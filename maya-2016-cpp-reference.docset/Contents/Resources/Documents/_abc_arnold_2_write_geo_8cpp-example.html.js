var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>AbcArnold/WriteGeo.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_arnold_2_write_geo_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>AbcArnold/WriteGeo.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcArnold/WriteGeo.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2011,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;WriteGeo.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;ArbGeomParams.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ai.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if AI_VERSION_ARCH_NUM == 3</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #if AI_VERSION_MAJOR_NUM &lt; 4</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">        #define AiNodeGetNodeEntry(node)   ((node)-&gt;base_node)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> nodeHasParameter( <span class=\"keyword\">struct</span> AtNode * node, <span class=\"keyword\">const</span> std::string &amp; paramName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> AiNodeEntryLookUpParameter( AiNodeGetNodeEntry( node ),</div>\n\
<div class=\"line\">            paramName.c_str() ) != NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ApplyTransformation( <span class=\"keyword\">struct</span> AtNode * node, </div>\n\
<div class=\"line\">        MatrixSampleMap * xformSamples, ProcArgs &amp;args )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !node || !xformSamples || xformSamples-&gt;empty() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// confirm that this node has a parameter</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !nodeHasParameter( node, <span class=\"stringliteral\">&quot;matrix&quot;</span> ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// check to see that we&#39;re not a single identity matrix</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xformSamples-&gt;size() == 1 &amp;&amp;</div>\n\
<div class=\"line\">            xformSamples-&gt;begin()-&gt;second == Imath::M44d())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::vector&lt;float&gt; sampleTimes;</div>\n\
<div class=\"line\">    sampleTimes.reserve(xformSamples-&gt;size());</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::vector&lt;float&gt; mlist;</div>\n\
<div class=\"line\">    mlist.reserve( 16* xformSamples-&gt;size() );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( MatrixSampleMap::iterator I = xformSamples-&gt;begin();</div>\n\
<div class=\"line\">            I != xformSamples-&gt;end(); ++I )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// build up a vector of relative sample times to feed to </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// &quot;transform_time_samples&quot; or &quot;time_samples&quot;</span></div>\n\
<div class=\"line\">        sampleTimes.push_back( GetRelativeSampleTime(args, (*I).first) );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; 16; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mlist.push_back( (*I).second.getValue()[i] );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AiNodeSetArray(node, <span class=\"stringliteral\">&quot;matrix&quot;</span>,</div>\n\
<div class=\"line\">                ArrayConvert(1, xformSamples-&gt;size(),</div>\n\
<div class=\"line\">                        AI_TYPE_MATRIX, &amp;mlist[0]));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( sampleTimes.size() &gt; 1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// persp_camera calls it time_samples while the primitives call it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// transform_time_samples</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( nodeHasParameter( node, <span class=\"stringliteral\">&quot;transform_time_samples&quot;</span> ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetArray(node, <span class=\"stringliteral\">&quot;transform_time_samples&quot;</span>,</div>\n\
<div class=\"line\">                            ArrayConvert(sampleTimes.size(), 1,</div>\n\
<div class=\"line\">                                    AI_TYPE_FLOAT, &amp;sampleTimes[0]));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( nodeHasParameter( node, <span class=\"stringliteral\">&quot;time_samples&quot;</span> ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetArray(node, <span class=\"stringliteral\">&quot;time_samples&quot;</span>,</div>\n\
<div class=\"line\">                            ArrayConvert(sampleTimes.size(), 1,</div>\n\
<div class=\"line\">                                    AI_TYPE_FLOAT, &amp;sampleTimes[0]));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//TODO, warn if neither is present? Should be there in all</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//commercial versions of arnold by now.</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> geomParamT&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ProcessIndexedBuiltinParam(</div>\n\
<div class=\"line\">        geomParamT param,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SampleTimeSet &amp; sampleTimes,</div>\n\
<div class=\"line\">        std::vector&lt;float&gt; &amp; values,</div>\n\
<div class=\"line\">        std::vector&lt;AtUInt32&gt; &amp; idxs,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">size_t</span> elementSize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !param.valid() ) { <span class=\"keywordflow\">return</span>; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isFirstSample = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( SampleTimeSet::iterator I = sampleTimes.begin();</div>\n\
<div class=\"line\">          I != sampleTimes.end(); ++I, isFirstSample = <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ISampleSelector sampleSelector( *I );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> ( param.getScope() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVaryingScope:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kVertexScope:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// a value per-point, idxs should be the same as vidxs</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// so we&#39;ll leave it empty</span></div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"comment\">// we&#39;ll get the expanded form here</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">typename</span> geomParamT::Sample sample = param.getExpandedValue(</div>\n\
<div class=\"line\">                    sampleSelector);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> footprint = sample.getVals()-&gt;size() * elementSize;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            values.reserve( values.size() + footprint );</div>\n\
<div class=\"line\">            values.insert( values.end(),</div>\n\
<div class=\"line\">                    (float32_t*) sample.getVals()-&gt;get(),</div>\n\
<div class=\"line\">                    ((float32_t*) sample.getVals()-&gt;get()) + footprint );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kFacevaryingScope:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// get the indexed form and feed to nidxs</span></div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keyword\">typename</span> geomParamT::Sample sample = param.getIndexedValue(</div>\n\
<div class=\"line\">                    sampleSelector);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( isFirstSample )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                idxs.reserve( sample.getIndices()-&gt;size() );</div>\n\
<div class=\"line\">                idxs.insert( idxs.end(),</div>\n\
<div class=\"line\">                        sample.getIndices()-&gt;get(),</div>\n\
<div class=\"line\">                        sample.getIndices()-&gt;get() +</div>\n\
<div class=\"line\">                                sample.getIndices()-&gt;size() );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> footprint = sample.getVals()-&gt;size() * elementSize;</div>\n\
<div class=\"line\">            values.reserve( values.size() + footprint );</div>\n\
<div class=\"line\">            values.insert( values.end(),</div>\n\
<div class=\"line\">                    (<span class=\"keyword\">const</span> float32_t*) sample.getVals()-&gt;get(),</div>\n\
<div class=\"line\">                    ((<span class=\"keyword\">const</span> float32_t*) sample.getVals()-&gt;get()) + footprint );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Arnold scene build is single-threaded so we don&#39;t have to lock around</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// access to this for now.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;std::string, AtNode *&gt; NodeCache;</div>\n\
<div class=\"line\">    NodeCache g_meshCache;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is templated to handle shared behavior of IPolyMesh and ISubD</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// We send in our empty sampleTimes and vidxs because polymesh needs those</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for processing animated normal.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The return value is the polymesh node. If instanced, it will be returned</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for the first created instance only.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> primT&gt;</div>\n\
<div class=\"line\">AtNode * ProcessPolyMeshBase(</div>\n\
<div class=\"line\">        primT &amp; prim, ProcArgs &amp; args,</div>\n\
<div class=\"line\">        SampleTimeSet &amp; sampleTimes,</div>\n\
<div class=\"line\">        std::vector&lt;AtUInt32&gt; &amp; vidxs,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> subdiv_iterations,</div>\n\
<div class=\"line\">        MatrixSampleMap * xformSamples, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string &amp; facesetName = <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !prim.valid() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">typename</span> primT::schema_type  &amp;ps = prim.getSchema();</div>\n\
<div class=\"line\">    TimeSamplingPtr ts = ps.getTimeSampling();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ps.getTopologyVariance() != kHeterogenousTopology )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        GetRelevantSampleTimes( args, ts, ps.getNumSamples(), sampleTimes );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        sampleTimes.insert( args.frame / args.fps );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::string name = args.nameprefix + prim.getFullName();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AtNode * instanceNode = NULL;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::string cacheId;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( args.makeInstance )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::ostringstream buffer;</div>\n\
<div class=\"line\">        AbcA::ArraySampleKey sampleKey;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( SampleTimeSet::iterator I = sampleTimes.begin();</div>\n\
<div class=\"line\">                I != sampleTimes.end(); ++I )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ISampleSelector sampleSelector( *I );</div>\n\
<div class=\"line\">            ps.getPositionsProperty().getKey(sampleKey, sampleSelector);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            buffer &lt;&lt; GetRelativeSampleTime( args, (*I) ) &lt;&lt; <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\">            sampleKey.digest.print(buffer);</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        buffer &lt;&lt; <span class=\"stringliteral\">&quot;@&quot;</span> &lt;&lt; subdiv_iterations;</div>\n\
<div class=\"line\">        buffer &lt;&lt; <span class=\"stringliteral\">&quot;@&quot;</span> &lt;&lt; facesetName;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        cacheId = buffer.str();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        instanceNode = AiNode( <span class=\"stringliteral\">&quot;ginstance&quot;</span> );</div>\n\
<div class=\"line\">        AiNodeSetStr( instanceNode, <span class=\"stringliteral\">&quot;name&quot;</span>, name.c_str() );</div>\n\
<div class=\"line\">        args.createdNodes.push_back(instanceNode);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( args.proceduralNode )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetInt( instanceNode, <span class=\"stringliteral\">&quot;visibility&quot;</span>,</div>\n\
<div class=\"line\">                    AiNodeGetInt( args.proceduralNode, <span class=\"stringliteral\">&quot;visibility&quot;</span> ) );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetInt( instanceNode, <span class=\"stringliteral\">&quot;visibility&quot;</span>, AI_RAY_ALL );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        ApplyTransformation( instanceNode, xformSamples, args );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        NodeCache::iterator I = g_meshCache.find(cacheId);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( I != g_meshCache.end() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetPtr(instanceNode, <span class=\"stringliteral\">&quot;node&quot;</span>, (*I).second );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    SampleTimeSet singleSampleTimes;</div>\n\
<div class=\"line\">    singleSampleTimes.insert( args.frame / args.fps );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::vector&lt;AtByte&gt; nsides;</div>\n\
<div class=\"line\">    std::vector&lt;float&gt; vlist;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::vector&lt;float&gt; uvlist;</div>\n\
<div class=\"line\">    std::vector&lt;AtUInt32&gt; uvidxs;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// POTENTIAL OPTIMIZATIONS LEFT TO THE READER</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 1) vlist needn&#39;t be copied if it&#39;s a single sample</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isFirstSample = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( SampleTimeSet::iterator I = sampleTimes.begin();</div>\n\
<div class=\"line\">          I != sampleTimes.end(); ++I, isFirstSample = <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ISampleSelector sampleSelector( *I );</div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> primT::schema_type::Sample sample = ps.getValue( sampleSelector );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( isFirstSample )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> numPolys = sample.getFaceCounts()-&gt;size();</div>\n\
<div class=\"line\">            nsides.reserve( sample.getFaceCounts()-&gt;size() );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; numPolys; ++i ) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                int32_t n = sample.getFaceCounts()-&gt;get()[i];</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( n &gt; 255 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// TODO, warning about unsupported face</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                nsides.push_back( (AtByte) n );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">size_t</span> vidxSize = sample.getFaceIndices()-&gt;size();</div>\n\
<div class=\"line\">            vidxs.reserve( vidxSize );</div>\n\
<div class=\"line\">            vidxs.insert( vidxs.end(), sample.getFaceIndices()-&gt;get(),</div>\n\
<div class=\"line\">                    sample.getFaceIndices()-&gt;get() + vidxSize );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        vlist.reserve( vlist.size() + sample.getPositions()-&gt;size() * 3);</div>\n\
<div class=\"line\">        vlist.insert( vlist.end(),</div>\n\
<div class=\"line\">                (<span class=\"keyword\">const</span> float32_t*) sample.getPositions()-&gt;get(),</div>\n\
<div class=\"line\">                ((<span class=\"keyword\">const</span> float32_t*) sample.getPositions()-&gt;get()) +</div>\n\
<div class=\"line\">                        sample.getPositions()-&gt;size() * 3 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    ProcessIndexedBuiltinParam(</div>\n\
<div class=\"line\">            ps.getUVsParam(),</div>\n\
<div class=\"line\">            singleSampleTimes,</div>\n\
<div class=\"line\">            uvlist,</div>\n\
<div class=\"line\">            uvidxs,</div>\n\
<div class=\"line\">            2);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AtNode* meshNode = AiNode( <span class=\"stringliteral\">&quot;polymesh&quot;</span> );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!meshNode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AiMsgError(<span class=\"stringliteral\">&quot;Failed to make polymesh node for %s&quot;</span>,</div>\n\
<div class=\"line\">                prim.getFullName().c_str());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    args.createdNodes.push_back(meshNode);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( instanceNode != NULL)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AiNodeSetStr( meshNode, <span class=\"stringliteral\">&quot;name&quot;</span>, (name + <span class=\"stringliteral\">&quot;:src&quot;</span>).c_str() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AiNodeSetStr( meshNode, <span class=\"stringliteral\">&quot;name&quot;</span>, name.c_str() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;vidxs&quot;</span>, </div>\n\
<div class=\"line\">            ArrayConvert(vidxs.size(), 1, AI_TYPE_UINT,</div>\n\
<div class=\"line\">                    (<span class=\"keywordtype\">void</span>*)&amp;vidxs[0]));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;nsides&quot;</span>,</div>\n\
<div class=\"line\">            ArrayConvert(nsides.size(), 1, AI_TYPE_BYTE,</div>\n\
<div class=\"line\">                    &amp;(nsides[0])));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;vlist&quot;</span>,</div>\n\
<div class=\"line\">            ArrayConvert( vlist.size() / sampleTimes.size(), </div>\n\
<div class=\"line\">                    sampleTimes.size(), AI_TYPE_FLOAT, (<span class=\"keywordtype\">void</span>*)(&amp;(vlist[0]))));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !uvlist.empty() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//TODO, option to disable v flipping</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 1, e = uvlist.size(); i &lt; e; i += 2)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            uvlist[i] = 1.0 - uvlist[i];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;uvlist&quot;</span>,</div>\n\
<div class=\"line\">            ArrayConvert( uvlist.size(), 1, AI_TYPE_FLOAT,</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">void</span>*)(&amp;(uvlist[0]))));</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !uvidxs.empty() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;uvidxs&quot;</span>,</div>\n\
<div class=\"line\">                    ArrayConvert(uvidxs.size(), 1, AI_TYPE_UINT,</div>\n\
<div class=\"line\">                            &amp;(uvidxs[0])));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;uvidxs&quot;</span>,</div>\n\
<div class=\"line\">                    ArrayConvert(vidxs.size(), 1, AI_TYPE_UINT,</div>\n\
<div class=\"line\">                            &amp;(vidxs[0])));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( sampleTimes.size() &gt; 1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector&lt;float&gt; relativeSampleTimes;</div>\n\
<div class=\"line\">        relativeSampleTimes.reserve( sampleTimes.size() );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (SampleTimeSet::const_iterator I = sampleTimes.begin();</div>\n\
<div class=\"line\">                I != sampleTimes.end(); ++I )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            relativeSampleTimes.push_back(</div>\n\
<div class=\"line\">                    GetRelativeSampleTime( args, (*I) ) );</div>\n\
<div class=\"line\">                    </div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        AiNodeSetArray( meshNode, <span class=\"stringliteral\">&quot;deform_time_samples&quot;</span>,</div>\n\
<div class=\"line\">                ArrayConvert(relativeSampleTimes.size(), 1,</div>\n\
<div class=\"line\">                        AI_TYPE_FLOAT, &amp;relativeSampleTimes[0]));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// faceset visibility array</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !facesetName.empty() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( ps.hasFaceSet( facesetName ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ISampleSelector frameSelector( *singleSampleTimes.begin() );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            IFaceSet faceSet = ps.getFaceSet( facesetName );</div>\n\
<div class=\"line\">            IFaceSetSchema::Sample faceSetSample = </div>\n\
<div class=\"line\">                    faceSet.getSchema().getValue( frameSelector );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            std::set&lt;int&gt; facesToKeep;</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            facesToKeep.insert( faceSetSample.getFaces()-&gt;get(),</div>\n\
<div class=\"line\">                    faceSetSample.getFaces()-&gt;get() +</div>\n\
<div class=\"line\">                            faceSetSample.getFaces()-&gt;size() );</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> *faceVisArray = <span class=\"keyword\">new</span> bool(nsides.size());</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> i = 0; i &lt; (int) nsides.size(); ++i )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                faceVisArray[i] = facesToKeep.find( i ) != facesToKeep.end();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( AiNodeDeclare( meshNode, <span class=\"stringliteral\">&quot;face_visibility&quot;</span>, <span class=\"stringliteral\">&quot;uniform BOOL&quot;</span> ) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                AiNodeSetArray( meshNode, <span class=\"stringliteral\">&quot;face_visibility&quot;</span>,</div>\n\
<div class=\"line\">                        ArrayConvert( nsides.size(), 1, AI_TYPE_BOOLEAN,</div>\n\
<div class=\"line\">                                faceVisArray ) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span>[] faceVisArray;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ICompoundProperty arbGeomParams = ps.getArbGeomParams();</div>\n\
<div class=\"line\">        ISampleSelector frameSelector( *singleSampleTimes.begin() );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        AddArbitraryGeomParams( arbGeomParams, frameSelector, meshNode );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( instanceNode == NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( xformSamples )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ApplyTransformation( meshNode, xformSamples, args );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> meshNode;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AiNodeSetInt( meshNode, <span class=\"stringliteral\">&quot;visibility&quot;</span>, 0 );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        AiNodeSetPtr(instanceNode, <span class=\"stringliteral\">&quot;node&quot;</span>, meshNode );</div>\n\
<div class=\"line\">        g_meshCache[cacheId] = meshNode;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> meshNode;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ProcessPolyMesh( IPolyMesh &amp;polymesh, ProcArgs &amp;args,</div>\n\
<div class=\"line\">        MatrixSampleMap * xformSamples, <span class=\"keyword\">const</span> std::string &amp; facesetName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    SampleTimeSet sampleTimes;</div>\n\
<div class=\"line\">    std::vector&lt;AtUInt32&gt; vidxs;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AtNode * meshNode = ProcessPolyMeshBase(</div>\n\
<div class=\"line\">            polymesh, args, sampleTimes, vidxs, 0, xformSamples,</div>\n\
<div class=\"line\">                    facesetName );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// This is a valid condition for the second instance onward and just</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// means that we don&#39;t need to do anything further.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !meshNode )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    IPolyMeshSchema &amp;ps = polymesh.getSchema();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::vector&lt;float&gt; nlist;</div>\n\
<div class=\"line\">    std::vector&lt;AtUInt32&gt; nidxs;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    ProcessIndexedBuiltinParam(</div>\n\
<div class=\"line\">            ps.getNormalsParam(),</div>\n\
<div class=\"line\">            sampleTimes,</div>\n\
<div class=\"line\">            nlist,</div>\n\
<div class=\"line\">            nidxs,</div>\n\
<div class=\"line\">            3);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !nlist.empty() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;nlist&quot;</span>,</div>\n\
<div class=\"line\">            ArrayConvert( nlist.size() / sampleTimes.size(), </div>\n\
<div class=\"line\">                    sampleTimes.size(), AI_TYPE_FLOAT, (<span class=\"keywordtype\">void</span>*)(&amp;(nlist[0]))));</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !nidxs.empty() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;nidxs&quot;</span>,</div>\n\
<div class=\"line\">                    ArrayConvert(nidxs.size(), 1, AI_TYPE_UINT,</div>\n\
<div class=\"line\">                            &amp;(nidxs[0])));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AiNodeSetArray(meshNode, <span class=\"stringliteral\">&quot;nidxs&quot;</span>,</div>\n\
<div class=\"line\">                    ArrayConvert(vidxs.size(), 1, AI_TYPE_UINT,</div>\n\
<div class=\"line\">                            &amp;(vidxs[0])));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ProcessSubD( ISubD &amp;subd, ProcArgs &amp;args,</div>\n\
<div class=\"line\">        MatrixSampleMap * xformSamples, <span class=\"keyword\">const</span> std::string &amp; facesetName )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    SampleTimeSet sampleTimes;</div>\n\
<div class=\"line\">    std::vector&lt;AtUInt32&gt; vidxs;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AtNode * meshNode = ProcessPolyMeshBase(</div>\n\
<div class=\"line\">            subd, args, sampleTimes, vidxs, args.subdIterations,</div>\n\
<div class=\"line\">                    xformSamples, facesetName );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// This is a valid condition for the second instance onward and just</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// means that we don&#39;t need to do anything further.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !meshNode )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    AiNodeSetStr( meshNode, <span class=\"stringliteral\">&quot;subdiv_type&quot;</span>, <span class=\"stringliteral\">&quot;catclark&quot;</span> );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";