var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>xgenMR/XgMentalrayProcedural.h</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'xgen_m_r_2_xg_mentalray_procedural_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>xgenMR/XgMentalrayProcedural.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">xgenMR/XgMentalrayProcedural.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef __XGENMENTALRAYPROCEDURAL_H__</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define __XGENMENTALRAYPROCEDURAL_H__</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;shader.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;memory&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;XGen/XgRenderAPI.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>XGenRenderAPI;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> miTag miString;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>XGenMR</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ProceduralWrapper;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>miMatrixClass</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        miMatrix m;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>miMatrixStruct</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        miMatrixStruct( <span class=\"keyword\">const</span> miMatrix m )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mi_matrix_copy( m_matrix, m );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        miMatrixStruct( <span class=\"keyword\">const</span> miMatrixStruct&amp; m )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            *<span class=\"keyword\">this</span> = m;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        miMatrixStruct&amp; operator=( <span class=\"keyword\">const</span> miMatrixStruct&amp; m )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mi_matrix_copy( m_matrix, m.m_matrix );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">/*miMatrix&amp; operator()</span></div>\n\
<div class=\"line\"><span class=\"comment\">        {</span></div>\n\
<div class=\"line\"><span class=\"comment\">            return m_matrix;</span></div>\n\
<div class=\"line\"><span class=\"comment\">        }</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        const miMatrix&amp; operator() const</span></div>\n\
<div class=\"line\"><span class=\"comment\">        {</span></div>\n\
<div class=\"line\"><span class=\"comment\">            return m_matrix;</span></div>\n\
<div class=\"line\"><span class=\"comment\">        }</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\">        miMatrix m_matrix;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Registration user data class used for pushing the data on the hair scalars</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This stores if the data needs to be pushed, and a buffer pointer to it.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt; <span class=\"keyword\">class </span>T<span class=\"comment\">/*user data type*/</span>, <span class=\"keyword\">class </span>E<span class=\"comment\">/*enum for the primitive cache*/</span>, <span class=\"keywordtype\">int</span> N<span class=\"comment\">/*Number of components.*/</span> &gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>TUserData</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        TUserData( PrimitiveCache* pc, PrimitiveCache::EBoolAttribute bAdd, E eArray, <span class=\"keywordtype\">int</span> context, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        TUserData( <span class=\"keyword\">const</span> T* p, <span class=\"keywordtype\">int</span> context, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* name );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> T <span class=\"keyword\">get</span>(<span class=\"keywordtype\">size_t</span> j) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> registerUserData( <span class=\"keywordtype\">size_t</span>&amp; io_perPrim, <span class=\"keywordtype\">size_t</span>&amp; io_perPoint, XGenMR::UserDataFormat&amp; fmt, <span class=\"keywordtype\">size_t</span>&amp; k, <span class=\"keywordtype\">int</span>* interpolateComponent );</div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> registerUserData( <span class=\"keywordtype\">size_t</span>&amp; io_perPrim, <span class=\"keywordtype\">size_t</span>&amp; io_perPoint, XGenMR::UserDataFormat&amp; fmt );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> copy( <span class=\"keywordtype\">size_t</span> j, <span class=\"keywordtype\">float</span>* cur, <span class=\"keywordtype\">size_t</span>&amp; k, <span class=\"keywordtype\">int</span> context );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> isValid( <span class=\"keywordtype\">int</span> context );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>         m_context;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>        m_add;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> T*    m_p;</div>\n\
<div class=\"line\">        std::string m_name;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> TUserData&lt;int,PrimitiveCache::EIntArrayAttribute,1&gt; TIntUserData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> TUserData&lt;float,PrimitiveCache::EFloatArrayAttribute,1&gt; TFloatUserData;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> TUserData&lt;vec3,PrimitiveCache::EVec3ArrayAttribute,3&gt; TVec3UserData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; TIntUserData &gt;     TIntUserDataList;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; TFloatUserData &gt;   TFloatUserDataList;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::vector&lt; TVec3UserData &gt;    TVec3UserDataList;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Holds the 3 user data type lists + some helper functions.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>UserDataList</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"comment\">// Iterate over all the user data vectors</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> pushUserData( <span class=\"keywordtype\">size_t</span> j, <span class=\"keywordtype\">float</span>* cur, <span class=\"keywordtype\">size_t</span>&amp; k, <span class=\"keywordtype\">int</span> context );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// List all the optional built in user data</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> listUserData( PrimitiveCache* pc, <span class=\"keywordtype\">bool</span> isSpline );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Register Hair Optional User Data</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> registerUserData( <span class=\"keywordtype\">size_t</span>&amp; io_perPrim, <span class=\"keywordtype\">size_t</span>&amp; io_perPoint, XGenMR::UserDataFormat&amp; fmt, <span class=\"keywordtype\">size_t</span>&amp; k, <span class=\"keywordtype\">int</span>* interpolateComponent );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Register Hair Optional User Data</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> registerUserData( <span class=\"keywordtype\">size_t</span>&amp; io_perPrim, <span class=\"keywordtype\">size_t</span>&amp; io_perPoint, XGenMR::UserDataFormat&amp; fmt );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        TIntUserDataList vecInt;</div>\n\
<div class=\"line\">        TFloatUserDataList vecFloat;</div>\n\
<div class=\"line\">        TVec3UserDataList vecVec3;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>UserDataList; <span class=\"comment\">// forward declaration</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Procedural; <span class=\"comment\">// forward declaration</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>BaseProcedural : <span class=\"keyword\">public</span> ProceduralCallbacks</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        BaseProcedural( <span class=\"keyword\">const</span> BaseProcedural* parentProc );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~BaseProcedural();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> <span class=\"keyword\">get</span>( EBoolAttribute ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">get</span>( EStringAttribute ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">float</span> <span class=\"keyword\">get</span>( EFloatAttribute ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* <span class=\"keyword\">get</span>( EFloatArrayAttribute ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getSize( EFloatArrayAttribute ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* getOverride( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> getArchiveBoundingBox( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_filename, bbox&amp; out_bbox ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getTransform( <span class=\"keywordtype\">float</span> in_time, mat44&amp; out_mat ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        BaseProcedural( );</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> convertMatrix( <span class=\"keyword\">const</span> miMatrix in_mat, mat44&amp; out_mat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We&#39;ll put all the attributes from user/options/camera in a param map.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The Parameters maps are initialized a single time in init().</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">class </span>Param</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">            ~Param()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>( isString() )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::string* p = (std::string*)m_p;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> p;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( isFloat() )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span>* p = (<span class=\"keywordtype\">float</span>*)m_p;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> p;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( isFloatArray() )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::vector&lt;float&gt;* p = (std::vector&lt;float&gt;*)m_p;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> p;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>( isMatrixArray() )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    std::vector&lt;miMatrixStruct&gt;* p = (std::vector&lt;miMatrixStruct&gt;*)m_p;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> p;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                m_p = NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            Param( <span class=\"keyword\">const</span> std::string&amp; in_str )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_t = eString;</div>\n\
<div class=\"line\">                std::string* s = <span class=\"keyword\">new</span> std::string;</div>\n\
<div class=\"line\">                *s = in_str;</div>\n\
<div class=\"line\">                m_p = (<span class=\"keywordtype\">void</span>*)s;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isString() { <span class=\"keywordflow\">return</span> m_t==eString; }</div>\n\
<div class=\"line\">            std::string* asString()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> m_t==eString ? (std::string*)m_p : NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Param( <span class=\"keywordtype\">float</span> in_f )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_t = eFloat;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span>* f = <span class=\"keyword\">new</span> float;</div>\n\
<div class=\"line\">                *f = in_f;</div>\n\
<div class=\"line\">                m_p = (<span class=\"keywordtype\">void</span>*)f;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isFloat() { <span class=\"keywordflow\">return</span> m_t==eFloat; }</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span>* asFloat()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> m_t==eFloat ? (<span class=\"keywordtype\">float</span>*)m_p : NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Param( <span class=\"keyword\">const</span> std::vector&lt;float&gt;&amp; in_f )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_t = eFloatArray;</div>\n\
<div class=\"line\">                std::vector&lt;float&gt;* f = <span class=\"keyword\">new</span> std::vector&lt;float&gt;;</div>\n\
<div class=\"line\">                *f = in_f;</div>\n\
<div class=\"line\">                m_p = (<span class=\"keywordtype\">void</span>*)f;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isFloatArray() { <span class=\"keywordflow\">return</span> m_t==eFloatArray; }</div>\n\
<div class=\"line\">            std::vector&lt;float&gt;* asFloatArray()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> m_t==eFloatArray ? (std::vector&lt;float&gt;*)m_p : NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            Param( <span class=\"keyword\">const</span> std::vector&lt;miMatrixStruct&gt;&amp; in_m )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_t = eMatrixArray;</div>\n\
<div class=\"line\">                std::vector&lt;miMatrixStruct&gt;* m = <span class=\"keyword\">new</span> std::vector&lt;miMatrixStruct&gt;;</div>\n\
<div class=\"line\">                *m = in_m;</div>\n\
<div class=\"line\">                m_p = (<span class=\"keywordtype\">void</span>*)m;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> isMatrixArray() { <span class=\"keywordflow\">return</span> m_t==eMatrixArray; }</div>\n\
<div class=\"line\">            std::vector&lt;miMatrixStruct&gt;* asMatrixArray()</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> m_t==eMatrixArray ? (std::vector&lt;miMatrixStruct&gt;*)m_p : NULL;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">            <span class=\"keyword\">enum</span> ParamType</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                eString, eFloat, eFloatArray, eMatrixArray</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\">            ParamType m_t;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span>* m_p;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::map&lt;std::string,Param*&gt; ParamMap;</div>\n\
<div class=\"line\">        ParamMap m_user, m_overrides;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getString( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span> ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getFloat( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keywordtype\">float</span>&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getArraySize( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keywordtype\">int</span> in_eType, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getFloatArray( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getMatrixArray( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keyword\">const</span> miMatrix*&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// A face renderer is created by enumerating the Faces on the PatchRenderer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It will take a snapshot of the state of the PatchRenderer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It will also inherit the xgen args and ProceduralCallbacks from the patch.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"keyword\">class </span>CountHairDataProcedural : <span class=\"keyword\">public</span> BaseProcedural</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        CountHairDataProcedural( <span class=\"keyword\">const</span> Procedural&amp; parentProc );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~CountHairDataProcedural() {}</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> reset() {</div>\n\
<div class=\"line\">            m_numPrims = 0;</div>\n\
<div class=\"line\">            m_numPoints = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// static function for initialization</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> initFaceRenderer(CountHairDataProcedural* dProc, </div>\n\
<div class=\"line\">            PatchRenderer* patch, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// XGenRenderAPI::ProceduralCallbacks</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> flush(  <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_geom, PrimitiveCache* in_cache );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> log( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_str ){}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> render() { m_face-&gt;render();}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getNumPrims()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_numPrims;}</div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getNumPoints()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_numPoints;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        CountHairDataProcedural();</div>\n\
<div class=\"line\">        CountHairDataProcedural( <span class=\"keyword\">const</span> CountHairDataProcedural&amp; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::auto_ptr&lt;FaceRenderer&gt; m_face;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// approximation settings</span></div>\n\
<div class=\"line\">        miInteger m_approx_degree;</div>\n\
<div class=\"line\">        miInteger m_approx_mode;</div>\n\
<div class=\"line\">        miInteger m_approx_parametric_subdivisions;</div>\n\
<div class=\"line\">        miScalar  m_approx_fine_sub_pixel_size;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_numPrims;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_numPoints;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">       <span class=\"comment\">// A face renderer is created by enumerating the Faces on the PatchRenderer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It will take a snapshot of the state of the PatchRenderer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It will also inherit the xgen args and ProceduralCallbacks from the patch.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    <span class=\"keyword\">class </span>InitHairDataProcedural : <span class=\"keyword\">public</span> BaseProcedural</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        InitHairDataProcedural( <span class=\"keyword\">const</span> Procedural&amp; parentProc, UserDataList* pUserData, miHair_list* pHair);</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~InitHairDataProcedural() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// static function for initialization</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> initFaceRenderer(InitHairDataProcedural* dProc, </div>\n\
<div class=\"line\">            PatchRenderer* patch, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// XGenRenderAPI::ProceduralCallbacks</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> flush(  <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_geom, PrimitiveCache* in_cache );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> log( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_str ){}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> render() { m_face-&gt;render();}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> isValid() { <span class=\"keywordflow\">return</span> m_numInterpolateComponents != -1;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> miGeoIndex getNumScalarsPerPoint()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_numScalarsPerPoint;}</div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> miGeoIndex getNumScalarsPerPrim()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_numScalarsPerPrim;}</div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> miGeoIndex getNumInterpolateComponents()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_numInterpolateComponents;} </div>\n\
<div class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> std::string&amp; getUserDataStrFormat()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_userDataStrFormat;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        InitHairDataProcedural();</div>\n\
<div class=\"line\">        InitHairDataProcedural( <span class=\"keyword\">const</span> InitHairDataProcedural&amp; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::auto_ptr&lt;FaceRenderer&gt; m_face;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// approximation settings</span></div>\n\
<div class=\"line\">        miInteger m_approx_degree;</div>\n\
<div class=\"line\">        miInteger m_approx_mode;</div>\n\
<div class=\"line\">        miInteger m_approx_parametric_subdivisions;</div>\n\
<div class=\"line\">        miScalar  m_approx_fine_sub_pixel_size;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// this user data list will be initialized</span></div>\n\
<div class=\"line\">        UserDataList* m_pUserData;</div>\n\
<div class=\"line\">        std::string m_userDataStrFormat;</div>\n\
<div class=\"line\">        miHair_list* m_pHair;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// data layout numbers</span></div>\n\
<div class=\"line\">        miGeoIndex m_numScalarsPerPoint;</div>\n\
<div class=\"line\">        miGeoIndex m_numScalarsPerPrim;</div>\n\
<div class=\"line\">        miGeoIndex m_numInterpolateComponents;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>FlushHairDataProcedural : <span class=\"keyword\">public</span> BaseProcedural</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        FlushHairDataProcedural(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Procedural&amp; parentProc,</div>\n\
<div class=\"line\">            miGeoIndex* pHairIndices,</div>\n\
<div class=\"line\">            miScalar* pHairScalars,</div>\n\
<div class=\"line\">            UserDataList* pUserData,</div>\n\
<div class=\"line\">            miGeoIndex numScalarsPerPoint,</div>\n\
<div class=\"line\">            miGeoIndex numScalarsPerPrim,</div>\n\
<div class=\"line\">            miGeoIndex numInterpolateComponents,</div>\n\
<div class=\"line\">            miGeoIndex numScalarsTotal,</div>\n\
<div class=\"line\">            miGeoIndex numIndicesTotal);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~FlushHairDataProcedural() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// static function for initialization</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> initFaceRenderer(FlushHairDataProcedural* dProc, </div>\n\
<div class=\"line\">            PatchRenderer* patch, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// XGenRenderAPI::ProceduralCallbacks</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> flush(  <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_geom, PrimitiveCache* in_cache );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> log( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_str ){}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> render() { m_face-&gt;render();}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        FlushHairDataProcedural();</div>\n\
<div class=\"line\">        FlushHairDataProcedural( <span class=\"keyword\">const</span> FlushHairDataProcedural&amp; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::auto_ptr&lt;FaceRenderer&gt; m_face;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// approximation settings</span></div>\n\
<div class=\"line\">        miInteger m_approx_degree;</div>\n\
<div class=\"line\">        miInteger m_approx_mode;</div>\n\
<div class=\"line\">        miInteger m_approx_parametric_subdivisions;</div>\n\
<div class=\"line\">        miScalar  m_approx_fine_sub_pixel_size;</div>\n\
<div class=\"line\">        miScalar  m_motion_blur_multiplier;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// buffers to write the data to</span></div>\n\
<div class=\"line\">        miGeoIndex* m_pHairIndices;</div>\n\
<div class=\"line\">        miScalar* m_pHairScalars;</div>\n\
<div class=\"line\">        UserDataList* m_pUserData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// data layout sizes</span></div>\n\
<div class=\"line\">        miGeoIndex m_numScalarsPerPoint;</div>\n\
<div class=\"line\">        miGeoIndex m_numScalarsPerPrim;</div>\n\
<div class=\"line\">        miGeoIndex m_numInterpolateComponents;</div>\n\
<div class=\"line\">        <span class=\"comment\">// Debug: compute offsets into the buffers to assert total size</span></div>\n\
<div class=\"line\">        miGeoIndex m_hairScalarsOffset;</div>\n\
<div class=\"line\">        miGeoIndex m_hairIndicesOffset;</div>\n\
<div class=\"line\">        miGeoIndex m_numScalarsTotal;</div>\n\
<div class=\"line\">        miGeoIndex m_numIndicesTotal;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>FlushSphereProcedural : <span class=\"keyword\">public</span> BaseProcedural</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        FlushSphereProcedural(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Procedural&amp; parentProc, </div>\n\
<div class=\"line\">            miTag sphereTag);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~FlushSphereProcedural() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// static function for initialization</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> initFaceRenderer(FlushSphereProcedural* dProc, </div>\n\
<div class=\"line\">            PatchRenderer* patch, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> f);</div>\n\
<div class=\"line\">        miTag getResultTag() { <span class=\"keywordflow\">return</span> m_result;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// XGenRenderAPI::ProceduralCallbacks</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> flush(  <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_geom, PrimitiveCache* in_cache );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> log( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_str ){}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> render() { m_face-&gt;render();}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        FlushSphereProcedural();</div>\n\
<div class=\"line\">        FlushSphereProcedural( <span class=\"keyword\">const</span> FlushSphereProcedural&amp; );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::auto_ptr&lt;FaceRenderer&gt; m_face;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string m_parentName; <span class=\"comment\">// parent name copied from parent procedural </span></div>\n\
<div class=\"line\">        miTag m_sphere; </div>\n\
<div class=\"line\">        miTag m_result;</div>\n\
<div class=\"line\">        std::vector&lt;miTag&gt; m_tags;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Procedural : <span class=\"keyword\">public</span> BaseProcedural</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>ProceduralWrapper;</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>FlushHairDataProcedural;</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>InitHairDataProcedural;</div>\n\
<div class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>CountHairDataProcedural;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>Params</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            miString data;      <span class=\"comment\">// Procedural Arguments</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// User Attributes Arguments. We define everything on the geoshader node for now.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// All their content is converted into ParamMap, in init();</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// In other renderers, most are defined as user data on options, camera and the procedural.</span></div>\n\
<div class=\"line\">            miString user;      <span class=\"comment\">// User RiAttribute on the geoshader</span></div>\n\
<div class=\"line\">            miString overrides; <span class=\"comment\">// User overrides: length &quot;0.0&quot; width &quot;0.0&quot;</span></div>\n\
<div class=\"line\">            miScalar frame;</div>\n\
<div class=\"line\">            miString patches;   <span class=\"comment\">// List of patches</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Echo params</span></div>\n\
<div class=\"line\">            miBoolean   echo;                   <span class=\"comment\">// Echo the whole geoshader content to an mi file. The echo_* parameters fills the miEchoOptions struct.</span></div>\n\
<div class=\"line\">            miString    echo_filename;          <span class=\"comment\">// Filename where to echo.</span></div>\n\
<div class=\"line\">            miBoolean   echo_ascii;             <span class=\"comment\">// non-binary output</span></div>\n\
<div class=\"line\">            miInteger   echo_explode_objects;   <span class=\"comment\">// write objects to subfiles</span></div>\n\
<div class=\"line\">            miBoolean   echo_verbatim_textures; <span class=\"comment\">// dump textures verbatim ?</span></div>\n\
<div class=\"line\">            miInteger   echo_dont;              <span class=\"comment\">// EO_* bitmap: omit these</span></div>\n\
<div class=\"line\">            miInteger   echo_dont_recurse;      <span class=\"comment\">// EO_* bitmap: no prereqs</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Approx params</span></div>\n\
<div class=\"line\">            miInteger approx_degree;</div>\n\
<div class=\"line\">            miInteger approx_mode;</div>\n\
<div class=\"line\">            miInteger approx_parametric_subdivisions;</div>\n\
<div class=\"line\">            miScalar  approx_fine_sub_pixel_size;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Motion Blur params</span></div>\n\
<div class=\"line\">            miBoolean motion_blur;</div>\n\
<div class=\"line\">            miInteger motion_blur_mode;</div>\n\
<div class=\"line\">            miInteger motion_blur_steps;</div>\n\
<div class=\"line\">            miScalar  motion_blur_factor;</div>\n\
<div class=\"line\">            miScalar  motion_blur_multiplier;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Misc. params</span></div>\n\
<div class=\"line\">            miScalar max_displace;</div>\n\
<div class=\"line\">            miScalar m_hair_object_size;        <span class=\"comment\">// Multiplier for the default hair object size </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Sphere primitive params</span></div>\n\
<div class=\"line\">            miInteger m_sphere_subdiv_u;</div>\n\
<div class=\"line\">            miInteger m_sphere_subdiv_v;</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Procedural();</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~Procedural();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// MR Entry points.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> init(miState* state, Params* paras, miBoolean *inst_init_req );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> exit( miState* state, Params* paras );</div>\n\
<div class=\"line\">        miBoolean execute( miTag* result, miState* state, Params* paras );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Export geoshader content to disk.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> echo( miTag* result, miState* state, Params* paras );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// XGenRenderAPI::ProceduralCallbacks</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> flush(  <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_geom, PrimitiveCache* in_cache );</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> log( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_str ){}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Render is called from the assembly callback function.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> render( miTag* result, <span class=\"keyword\">const</span> miState* state );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Helper function for transferring data from placeholder callbacks</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to flushSplines and vice versa</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> setPlaceholderObjectTag(<span class=\"keyword\">const</span> miTag tag) { m_tagPlaceholderObject = tag;}</div>\n\
<div class=\"line\">        miTag getUserDataTag() { <span class=\"keywordflow\">return</span> m_tagUserData;}</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string&amp; getParentName()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_parentName;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// These 4 methods are protected by the global mutex.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> nextFace( bbox&amp; b, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>&amp; f );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> initPatchRenderer( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_params );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> initFaceRenderer( Procedural* pProc, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// init a new procedural per patch.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> initPatchProcedural( Procedural* pParent, <span class=\"keyword\">const</span> std::string&amp; strPatch );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Helper function for patch-render callback for splines/hair.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> renderHairObject( miTag* result, <span class=\"keyword\">const</span> miState* state );</div>\n\
<div class=\"line\">        <span class=\"comment\">// write out the hair object header</span></div>\n\
<div class=\"line\">        miHair_list* beginHairObject( );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> endHairObject( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numScalarsTotal, <span class=\"keyword\">const</span> std::string&amp; strFormat );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> renderSphereAssembly();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> flushCards( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *geomName, PrimitiveCache* pc );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> flushArchives( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *geomName, PrimitiveCache* pc );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> syncArchives( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *geomName, PrimitiveCache* pc );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//static void pushCustomParams( AtNode* in_node, PrimitiveCache* pc );</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* getUniqueName( <span class=\"keywordtype\">char</span>* buf, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* basename );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        miTag m_node;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">typedef</span> std::vector&lt;Procedural*&gt; TProcList;</div>\n\
<div class=\"line\">        TProcList m_patches;</div>\n\
<div class=\"line\">        PatchRenderer* m_patch;</div>\n\
<div class=\"line\">        std::string m_patchName;</div>\n\
<div class=\"line\">        FaceRenderer* m_face;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string m_data;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getString( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span> ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getFloat( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keywordtype\">float</span>&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> getArraySize( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keywordtype\">int</span> in_eType, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getFloatArray( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> getMatrixArray( <span class=\"keyword\">const</span> ParamMap&amp; in_params, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* in_name, <span class=\"keyword\">const</span> miMatrix*&amp; out_value, <span class=\"keywordtype\">bool</span> in_user=<span class=\"keyword\">false</span>  ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        miTag makeArchiveInstanceGroup( PrimitiveCache* pc, <span class=\"keyword\">const</span> std::string&amp; instanceName, <span class=\"keyword\">const</span> std::string&amp; instanceGroupName, <span class=\"keyword\">const</span> std::string&amp; filename, <span class=\"keyword\">const</span> std::string&amp; select, <span class=\"keyword\">const</span> std::string&amp; material, miScalar frame, miInteger assembly );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> miState* m_state;</div>\n\
<div class=\"line\">        miTag m_result;</div>\n\
<div class=\"line\">        miTag m_dummy;</div>\n\
<div class=\"line\">        miTag m_tagUserData;</div>\n\
<div class=\"line\">        std::string m_parentName;  </div>\n\
<div class=\"line\">        std::string m_parentNameNoFace;</div>\n\
<div class=\"line\">        std::string m_primType;</div>\n\
<div class=\"line\">        std::vector&lt;miTag&gt; m_tags;</div>\n\
<div class=\"line\">        std::vector&lt;miTag&gt; m_tagsHiddenGroup;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        miTag m_tagPlaceholderObject;</div>\n\
<div class=\"line\">        miGeoIndex m_numHairPoints;</div>\n\
<div class=\"line\">        miGeoIndex m_numHairPrims;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_faceBegin;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_faceEnd;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::map&lt;std::string,std::string&gt;* m_archives;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> m_bSyncArchives;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> m_bPerFaceAssemblies;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> m_bEcho;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        miInteger m_approx_degree;</div>\n\
<div class=\"line\">        miInteger m_approx_mode;</div>\n\
<div class=\"line\">        miInteger m_approx_parametric_subdivisions;</div>\n\
<div class=\"line\">        miScalar  m_approx_fine_sub_pixel_size;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> m_motion_blur;</div>\n\
<div class=\"line\">        miInteger m_motion_blur_mode;</div>\n\
<div class=\"line\">        miInteger m_motion_blur_steps;</div>\n\
<div class=\"line\">        miScalar  m_motion_blur_factor;</div>\n\
<div class=\"line\">        miScalar  m_motion_blur_multiplier;</div>\n\
<div class=\"line\">        miScalar  m_max_displace;</div>\n\
<div class=\"line\">        miInteger m_sphere_subdiv_u;</div>\n\
<div class=\"line\">        miInteger m_sphere_subdiv_v;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";