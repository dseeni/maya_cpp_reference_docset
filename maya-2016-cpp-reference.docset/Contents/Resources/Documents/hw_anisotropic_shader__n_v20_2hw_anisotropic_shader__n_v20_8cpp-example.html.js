var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>hwAnisotropicShader_NV20/hwAnisotropicShader_NV20.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'hw_anisotropic_shader__n_v20_2hw_anisotropic_shader__n_v20_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>hwAnisotropicShader_NV20/hwAnisotropicShader_NV20.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">hwAnisotropicShader_NV20/hwAnisotropicShader_NV20.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All </span></div>\n\
<div class=\"line\"><span class=\"comment\">// rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The coded instructions, statements, computer programs, and/or related </span></div>\n\
<div class=\"line\"><span class=\"comment\">// material (collectively the &quot;Data&quot;) in these files contain unpublished </span></div>\n\
<div class=\"line\"><span class=\"comment\">// information proprietary to Autodesk, Inc. (&quot;Autodesk&quot;) and/or its </span></div>\n\
<div class=\"line\"><span class=\"comment\">// licensors, which is protected by U.S. and Canadian federal copyright </span></div>\n\
<div class=\"line\"><span class=\"comment\">// law and by international treaties.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The Data is provided for use exclusively by You. You have the right </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to use, modify, and incorporate this Data into other products for </span></div>\n\
<div class=\"line\"><span class=\"comment\">// purposes authorized by the Autodesk software license agreement, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// without fee.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The copyright notices in the Software and this entire statement, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// including the above license grant, this restriction and the </span></div>\n\
<div class=\"line\"><span class=\"comment\">// following disclaimer, must be included in all copies of the </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Software, in whole or in part, and all derivative works of </span></div>\n\
<div class=\"line\"><span class=\"comment\">// the Software, unless such copies or derivative works are solely </span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the form of machine-executable object code generated by a </span></div>\n\
<div class=\"line\"><span class=\"comment\">// source language processor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED </span></div>\n\
<div class=\"line\"><span class=\"comment\">// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF </span></div>\n\
<div class=\"line\"><span class=\"comment\">// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR </span></div>\n\
<div class=\"line\"><span class=\"comment\">// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR </span></div>\n\
<div class=\"line\"><span class=\"comment\">// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS </span></div>\n\
<div class=\"line\"><span class=\"comment\">// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK </span></div>\n\
<div class=\"line\"><span class=\"comment\">// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY </span></div>\n\
<div class=\"line\"><span class=\"comment\">// OR PROBABILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// NOTE: PLEASE READ THE README.TXT FILE FOR INSTRUCTIONS ON</span></div>\n\
<div class=\"line\"><span class=\"comment\">// COMPILING AND USAGE REQUIREMENTS.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION: NV20-specific (Geforce3) sample shader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              This shader is meant to produce a anisotropic shading effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              It allows the user to change the parameters of a anisotropic</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              lookup table.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This shader builds on the foundation demonstrated in the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  hwUnlitShader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  PS: Thanks go to DAR from nVidia, for his help in making this</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      shader more robust. ;-)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable : 4786 )       // Disable STL warnings.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataBlock.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArrayDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLightDataAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEulerRotation.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLight.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNonAmbientLight.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Include NVIDIA&#39;s helper libraries.  These libraries have</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright info in them so we cannot release them but we</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can use them to verify that the API works correctly.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;GL/gl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;GL/glu.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;GL/glext.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define GLH_EXT_SINGLE_FILE</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;glh_extensions.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef GL_NV_vertex_array_range</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;glh_genext.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;glh_obs.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>glh;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;hwAnisotropicShader_NV20.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;ShadingConnection.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define TANGENT_INDEX 1 // macro to make normall array indexing a bit clearer</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> hwAnisotropicShader_NV20::id( 0x00105444 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Lookup table. Fixed at 256x256 resolution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> hwAnisotropicShader_NV20::lookup_texture_size(256);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::postConstructor( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    setMPSafe(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Static attribute instances.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::color;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::colorR;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::colorG;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::colorB;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::roughness;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::kDiffuse;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwAnisotropicShader_NV20::kSpecular;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::printGlError( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *call )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GLenum error;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span>( (error = glGetError()) != GL_NO_ERROR ) {</div>\n\
<div class=\"line\">        assert(0);</div>\n\
<div class=\"line\">        cerr &lt;&lt; call &lt;&lt; <span class=\"stringliteral\">&quot;:&quot;</span> &lt;&lt; error &lt;&lt; <span class=\"stringliteral\">&quot; is &quot;</span> &lt;&lt; (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *)gluErrorString( error ) &lt;&lt; <span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The Vertex Program for the model shading effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Meant to be used as an anisotropic shader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Version for point lights with a decay factor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CONSTANTS: (c)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c0- c3 4x4 ModelView-Projection composite matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c4     (.5, 1, 0, 0) vector for compute u,v</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c9     light color</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c11     light position (in object space)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c12    camera position in object space (possibly not normalized)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// VERTEX REGISTERS (mapped so that standard gl calls work):</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v0 - position</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v2 - tangent</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v3 - primary color</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// REGISTERS:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R0 - normalized view (surface-to-camera) direction in object space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R1 - normalized surface tangent in object space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R2 - normalized light (surface-to-light) direction.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R3 - temporary computation of u,v values for lookup-texture to be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      placed int TEX[0]</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R4,R5 - temporaries use to compute light decay</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span> vertexProgramStringPointDecay[] = </div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;!!VP1.0\\n&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply the vertex coords by the modelview-projection composite matrix,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to get clip space coordinates.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].x, c[0], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].y, c[1], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].z, c[2], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].w, c[3], v[0];&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Normalize the T (tangent), in case the modelview matrix is not a simple rotation.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MOV   R1, v[2];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R1.w, R1, R1;&quot;</span>           </div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R1.w, R1.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R1.xyz, R1, R1.w;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Compute the normalized light vector in object space</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD   R2, c[11], -v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R2.w, R2, R2;&quot;</span>           </div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R2.w, R2.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R2.xyz, R2, R2.w;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The vertex position, normal and light positions are expressed in object space at</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this point. We need to find the view direction in object space too.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD   R0, c[12], -v[0];&quot;</span>       <span class=\"comment\">// view direction, from surface to camera.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R0.w, R0, R0;&quot;</span>           <span class=\"comment\">// normalize the view direction.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R0.w, R0.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R0.xyz, R0, R0.w;&quot;</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Find the texture coordinates to fetch from the toon-param texture:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      u = 1/2 (T dot L) + 1/2</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      v = 1/2 (T dot V) + 1/2</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a) Do (T dot L) and (T dot V) and store in register R3</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.x, R1, R2;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.y, R1, R0;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// b) Scale by 1/2 and add 1/2 and store as texture coordinates</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD o[TEX0].x, R3.x, c[4].x, c[4].x;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD o[TEX0].y, R3.y, c[4].x, c[4].x;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply diffuse lighting into material color.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Take into account decay</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MOV R4, c[9];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MOV R5, c[9];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL R5.xyz, R4, R2.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL o[COL0], v[3], R5;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;END&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Version for point lights</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CONSTANTS: (c)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c0- c3 4x4 ModelView-Projection composite matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c4     (.5, 1, 0, 0) vector for compute u,v</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c9     light color</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c11     light position (in object space)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c12    camera position in object space (possibly not normalized)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// VERTEX REGISTERS (mapped so that standard gl calls work):</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v0 - position</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v2 - tangent</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v3 - primary color</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// REGISTERS:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R0 - normalized view (surface-to-camera) direction in object space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R1 - normalized surface tangent in object space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R2 - normalized light (surface-to-light) direction.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R3 - temporary computation of u,v values for lookup-texture to be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      placed int TEX[0]</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span> vertexProgramStringPoint[] = </div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;!!VP1.0\\n&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply the vertex coords by the modelview-projection composite matrix,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to get clip space coordinates.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].x, c[0], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].y, c[1], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].z, c[2], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].w, c[3], v[0];&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Normalize the T (tangent), in case the modelview matrix is not a simple rotation.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MOV   R1, v[2];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R1.w, R1, R1;&quot;</span>           </div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R1.w, R1.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R1.xyz, R1, R1.w;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Compute the normalized light vector in object space</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD   R2, c[11], -v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R2.w, R2, R2;&quot;</span>           </div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R2.w, R2.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R2.xyz, R2, R2.w;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The vertex position, normal and light positions are expressed in object space at</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this point. We need to find the view direction in object space too.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD   R0, c[12], -v[0];&quot;</span>       <span class=\"comment\">// view direction, from surface to camera.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R0.w, R0, R0;&quot;</span>           <span class=\"comment\">// normalize the view direction.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R0.w, R0.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R0.xyz, R0, R0.w;&quot;</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Find the texture coordinates to fetch from the toon-param texture:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      u = 1/2 (T dot L) + 1/2</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      v = 1/2 (T dot V) + 1/2</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a) Do (T dot L) and (T dot V) and store in register R3</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.x, R1, R2;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.y, R1, R0;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// b) Scale by 1/2 and add 1/2 and store as texture coordinates</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD o[TEX0].x, R3.x, c[4].x, c[4].x;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD o[TEX0].y, R3.y, c[4].x, c[4].x;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply diffuse lighting into material color.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL o[COL0], v[3], c[9];&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;END&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Version for directional lights</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CONSTANTS: (c)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c0- c3 4x4 ModelView-Projection composite matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c4     (.5, 1, 0, 0) vector for compute u,v</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c9     light color</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c11    light direction (in object space)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// c12    camera position in object space (possibly not normalized)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// VERTEX REGISTERS (mapped so that standard gl calls work):</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v0 - position</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v2 - tangent</span></div>\n\
<div class=\"line\"><span class=\"comment\">// v3 - primary color</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// REGISTERS:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R0 - normalized view (surface-to-camera) direction in object space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R1 - normalized surface tangent in object space.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R2 - normalized light (surface-to-light) direction.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// R3 - temporary computation of u,v values for lookup-texture to be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      placed int TEX[0]</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span> vertexProgramString[] = </div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;!!VP1.0\\n&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply the vertex coords by the modelview-projection composite matrix,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to get clip space coordinates.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].x, c[0], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].y, c[1], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].z, c[2], v[0];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4   o[HPOS].w, c[3], v[0];&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Normalize the T (tangent), in case the modelview matrix is not a simple rotation.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MOV   R1, v[2];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R1.w, R1, R1;&quot;</span>           </div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R1.w, R1.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R1.xyz, R1, R1.w;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Normalize the L (light) direction.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MOV   R2, c[11];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R2.w, R2, R2;&quot;</span>           </div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R2.w, R2.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R2.xyz, R2, R2.w;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// The vertex position, normal and light positions are expressed in object space at</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// this point. We need to find the view direction in object space too.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD   R0, c[12], -v[0];&quot;</span>       <span class=\"comment\">// view direction, from surface to camera.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3   R0.w, R0, R0;&quot;</span>           <span class=\"comment\">// normalize the view direction.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ   R0.w, R0.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL   R0.xyz, R0, R0.w;&quot;</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// Find the texture coordinates to fetch from the toon-param texture:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      u = 1/2 (N dot L) + 1/2</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//      v = 1/2 (T dot V) + 1/2</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a) Do (T dot L) and (T dot V) and store in register R3</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.x, R1, R2;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.y, R1, R0;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// b) Scale by 1/2 and add 1/2 and store as texture coordinates</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD o[TEX0].x, R3.x, c[4].x, c[4].x;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD o[TEX0].y, R3.y, c[4].x, c[4].x;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply diffuse lighting into material color.</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL o[COL0], v[3], c[9];&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;END&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> initVertexProgram(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> vertexProgramCode[], GLuint* pVertexProgramId)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Allocate and initialize the vertex program.</span></div>\n\
<div class=\"line\">    glGenProgramsNV(1, pVertexProgramId);</div>\n\
<div class=\"line\">    GLenum error = glGetError();</div>\n\
<div class=\"line\">    assert(error == GL_NO_ERROR);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Load the program.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = strlen(vertexProgramCode);</div>\n\
<div class=\"line\">    glLoadProgramNV(GL_VERTEX_PROGRAM_NV, *pVertexProgramId, length, </div>\n\
<div class=\"line\">        (<span class=\"keyword\">const</span> GLubyte *) vertexProgramCode);</div>\n\
<div class=\"line\">    error = glGetError();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If an error occured, find the location in the vertex program</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// code and assert.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (error != GL_NO_ERROR)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If an error occured, it&#39;s most likely due to a syntax or </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// logic error in the vertex program. The error position</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// below will contain the index in the vertex program</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// string that is faulty. See the NV_vertex_program</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// extension specification for more details.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (error == GL_INVALID_OPERATION)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> error_position = -2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glGetIntegerv(GL_PROGRAM_ERROR_POSITION_NV, &amp;error_position);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Most likely a bug in the vertex program code...</span></div>\n\
<div class=\"line\">            assert(0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Load the vertexProgram and fill in the necessary constants used in the vertex program.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::loadVertexProgramGL()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GLenum error = glGetError();</div>\n\
<div class=\"line\">    assert(!error);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the vertex programs haven&#39;t been loaded yet,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// do it now. (Note that they are shared between all contexts.)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fVertexProgramsLoaded)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        initVertexProgram(vertexProgramString, &amp;fVertexProgramDirectional);</div>\n\
<div class=\"line\">        initVertexProgram(vertexProgramStringPointDecay, &amp;fVertexProgramPointDecay);</div>\n\
<div class=\"line\">        initVertexProgram(vertexProgramStringPoint, &amp;fVertexProgramPointNoDecay);</div>\n\
<div class=\"line\">        fVertexProgramsLoaded = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Anisotropic material lookup texture</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (This function assumes that lookup_image and lookup_texture have been deallocated.)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::make_lookup_texture()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Re-calculate the look-up texture, if any of the material paramters</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// have changed</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>   t_roughness = 0.025f;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>   t_kd = 0.8f;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>   t_ks = 0.2f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//MPlug colorPlug(thisMObject(), color);</span></div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   roughPlug(thisMObject(), roughness);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   diffPlug(thisMObject(), kDiffuse);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   specPlug(thisMObject(), kSpecular);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    roughPlug.getValue(t_roughness);</div>\n\
<div class=\"line\">    diffPlug.getValue(t_kd);</div>\n\
<div class=\"line\">    specPlug.getValue(t_ks);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( t_roughness &lt; 0.0f ) t_roughness = 0.0f;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( t_roughness &gt; 1.0f ) t_roughness = 1.0f;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( t_kd &lt; 0.000000000001f ) t_kd = 0.000000000001f; <span class=\"comment\">// To prevent underflow in computation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( t_kd&gt; 1.0f ) t_kd= 1.0f;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( t_ks &lt; 0.0f ) t_ks= 0.0f;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( t_ks &gt; 1.0f ) t_ks = 1.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Only recompute the lookup texture if the values have changed since the last bind.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">boolean</span> dirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>  (currentKd != t_kd) {</div>\n\
<div class=\"line\">        dirty = <span class=\"keyword\">true</span>; currentKd = t_kd;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (currentKs != t_ks) {</div>\n\
<div class=\"line\">        dirty = <span class=\"keyword\">true</span>; currentKs = t_ks; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (currentRoughness != t_roughness) {</div>\n\
<div class=\"line\">        dirty = <span class=\"keyword\">true</span>; currentRoughness = t_roughness;       </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!dirty) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> imgsize = lookup_texture_size;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> imgsizeM1 = (float) (imgsize - 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Allocate the lookup_image and lookup_texture.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lookup_table == NULL)</div>\n\
<div class=\"line\">        lookup_table = <span class=\"keyword\">new</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>[imgsize*imgsize*3];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lookup_texture == NULL)</div>\n\
<div class=\"line\">        lookup_texture = <span class=\"keyword\">new</span> tex_object_2D;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Fill it up.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _DEBUG_DUMP_LOOKUP_TEXTURE</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Debug flag to dump out the texture to file.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Define this, if you want to write the lookup table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// out as a file texture.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">boolean</span> firstTime = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">boolean</span> firstTime = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (firstTime)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html\">MImage</a> image;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        image.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a903ff4fa0918f6c6438c4889025b7c91\">create</a>(lookup_texture_size, lookup_texture_size);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *ip  = image.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#aba6def80dd70f1c9af3dbd348fe270ac\">pixels</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       diff, spec, phong;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       lt, vt;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       h;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>         i, j;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>       invRough = 1.0 / t_roughness;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i=0; i &lt; imgsize; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Compute sqrt( 1- (L dot T)*(L dot T) )</span></div>\n\
<div class=\"line\">            lt = 1.0 - 2.0 * (float)i/(<span class=\"keywordtype\">float</span>)(imgsize-1);</div>\n\
<div class=\"line\">            diff= sqrt( 1.0-lt*lt );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(j=0; j &lt; imgsize; j++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                vt= 2.0 * (float)j/(<span class=\"keywordtype\">float</span>)(imgsize-1) - 1.0;</div>\n\
<div class=\"line\">                spec= diff*sqrt( 1-vt*vt ) - lt*vt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Compute standard phong model....</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// phong= Kd*diff + Ks*powf( spec&lt; 0.0 ? 0.0 : spec, 1.0/roughness );</span></div>\n\
<div class=\"line\">                phong= t_ks*powf( spec &lt; 0.0 ? 0.0 : spec, invRough );</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">float</span> Kddiff = t_kd*diff;</div>\n\
<div class=\"line\">      </div>\n\
<div class=\"line\">                h= (Kddiff+phong)*255.0 + 0.5;</div>\n\
<div class=\"line\">                *ip++ = (h &lt; 0.0) ? 0 : (h &gt; 255.0 ? 255 : (int)h);</div>\n\
<div class=\"line\">                h= (Kddiff+phong)*255.0 + 0.5;</div>\n\
<div class=\"line\">                *ip++ = (h &lt; 0.0) ? 0 : (h &gt; 255.0 ? 255 : (int)h);</div>\n\
<div class=\"line\">                h= (Kddiff+phong)*255.0 + 0.5;</div>\n\
<div class=\"line\">                *ip++ = (h &lt; 0.0) ? 0 : (h &gt; 255.0 ? 255 : (int)h);</div>\n\
<div class=\"line\">                *ip++ = 1.0;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        image.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_image.html#a99baff74083ba3886142bcf267fa46e4\">writeToFile</a>(<span class=\"stringliteral\">&quot;c:/aniso.iff&quot;</span>);</div>\n\
<div class=\"line\">        firstTime = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *ip  = lookup_table;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>       diff, spec, phong;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>       lt, vt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>       h;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>         i, j;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>       invRough = 1.0 / t_roughness;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i=0; i &lt; imgsize; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Compute sqrt( 1- (L dot T)*(L dot T) )</span></div>\n\
<div class=\"line\">        lt = 1.0 - 2.0 * (float)i/(<span class=\"keywordtype\">float</span>)(imgsize-1);</div>\n\
<div class=\"line\">        diff= sqrt( 1.0-lt*lt );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(j=0; j &lt; imgsize; j++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            vt= 2.0 * (float)j/(<span class=\"keywordtype\">float</span>)(imgsize-1) - 1.0;</div>\n\
<div class=\"line\">            spec= diff*sqrt( 1-vt*vt ) - lt*vt;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Compute standard phong model....</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// phong= Kd*diff + Ks*powf( spec&lt; 0.0 ? 0.0 : spec, 1.0/roughness );</span></div>\n\
<div class=\"line\">            phong= t_ks*powf( spec &lt; 0.0 ? 0.0 : spec, invRough );</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> Kddiff = t_kd*diff;</div>\n\
<div class=\"line\">  </div>\n\
<div class=\"line\">            h= (Kddiff+phong)*255.0 + 0.5;</div>\n\
<div class=\"line\">            *ip++ = (h &lt; 0.0) ? 0 : (h &gt; 255.0 ? 255 : (int)h);</div>\n\
<div class=\"line\">            h= (Kddiff+phong)*255.0 + 0.5;</div>\n\
<div class=\"line\">            *ip++ = (h &lt; 0.0) ? 0 : (h &gt; 255.0 ? 255 : (int)h);</div>\n\
<div class=\"line\">            h= (Kddiff+phong)*255.0 + 0.5;</div>\n\
<div class=\"line\">            *ip++ = (h &lt; 0.0) ? 0 : (h &gt; 255.0 ? 255 : (int)h);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    fLookupTextureReprocessed = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::bind_lookup_table()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Update the material table if needed</span></div>\n\
<div class=\"line\">    make_lookup_texture();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bind the lookup table texture</span></div>\n\
<div class=\"line\">    lookup_texture-&gt;bind();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fLookupTextureReprocessed)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB8, lookup_texture_size, lookup_texture_size, </div>\n\
<div class=\"line\">            0, GL_RGB, GL_UNSIGNED_BYTE, lookup_table); </div>\n\
<div class=\"line\">        fLookupTextureReprocessed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    lookup_texture-&gt;parameter(GL_TEXTURE_MIN_FILTER, GL_NEAREST);</div>\n\
<div class=\"line\">    lookup_texture-&gt;parameter(GL_TEXTURE_MAG_FILTER, GL_LINEAR);</div>\n\
<div class=\"line\">    lookup_texture-&gt;parameter(GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</div>\n\
<div class=\"line\">    lookup_texture-&gt;parameter(GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize the necessary OpenGL extensions</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::init_ext(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * ext)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!glh_init_extension(ext))</div>\n\
<div class=\"line\">    { cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to initialize &quot;</span> &lt;&lt; ext &lt;&lt; <span class=\"stringliteral\">&quot;!&quot;</span> &lt;&lt; endl; exit(0); }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">hwAnisotropicShader_NV20::hwAnisotropicShader_NV20()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get an reference to the singleton texture cache.</span></div>\n\
<div class=\"line\">    m_pTextureCache = MTextureCache::instance();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    init_ext(<span class=\"stringliteral\">&quot;GL_ARB_multitexture&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">//init_ext(&quot;GL_NV_register_combiners&quot;);</span></div>\n\
<div class=\"line\">    init_ext(<span class=\"stringliteral\">&quot;GL_NV_vertex_program&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    isDirectionalLight = <span class=\"keyword\">true</span>;  <span class=\"comment\">// light&#39;s rotation is connected to the lightRotation attr</span></div>\n\
<div class=\"line\">    isNonAmbientLight = <span class=\"keyword\">false</span>; <span class=\"comment\">// Does not have decay</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the lookup values to absurd values, so that the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// look-up table automatically get recomputed during the first update.</span></div>\n\
<div class=\"line\">    currentColor[0] = currentColor[1] = currentColor[2] = -1.0;</div>\n\
<div class=\"line\">    currentRoughness = -1.0;</div>\n\
<div class=\"line\">    currentKd = -1.0;</div>\n\
<div class=\"line\">    currentKs = -1.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    lookup_texture = NULL;</div>\n\
<div class=\"line\">    lookup_table   = NULL;</div>\n\
<div class=\"line\">    fLookupTextureReprocessed = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize callbacks.</span></div>\n\
<div class=\"line\">    fBeforeNewCB = 0;</div>\n\
<div class=\"line\">    fBeforeOpenCB = 0;</div>\n\
<div class=\"line\">    fBeforeRemoveReferenceCB = 0;</div>\n\
<div class=\"line\">    fMayaExitingCB = 0;</div>\n\
<div class=\"line\">    attachSceneCallbacks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize the vertex program ids...</span></div>\n\
<div class=\"line\">    fVertexProgramsLoaded = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    fVertexProgramDirectional = 0;</div>\n\
<div class=\"line\">    fVertexProgramPointDecay = 0;</div>\n\
<div class=\"line\">    fVertexProgramPointNoDecay = 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">// All vertex programs will get allocated and loaded</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// during the first refresh.</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">hwAnisotropicShader_NV20::~hwAnisotropicShader_NV20()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    detachSceneCallbacks();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> releaseVertexProgram(GLuint* pVertexProgramId)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// If the vertex program id is set...</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*pVertexProgramId &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Unbind any vertex program...</span></div>\n\
<div class=\"line\">        glBindProgramNV(GL_VERTEX_PROGRAM_NV, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glDeleteProgramsNV(1, pVertexProgramId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For sanity, set the id to 0.</span></div>\n\
<div class=\"line\">        *pVertexProgramId = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::releaseEverything()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    release_lookup_texture();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release all loaded vertex programs.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fVertexProgramsLoaded)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        releaseVertexProgram(&amp;fVertexProgramDirectional);</div>\n\
<div class=\"line\">        releaseVertexProgram(&amp;fVertexProgramPointDecay);</div>\n\
<div class=\"line\">        releaseVertexProgram(&amp;fVertexProgramPointNoDecay);</div>\n\
<div class=\"line\">        fVertexProgramsLoaded = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release the texture cache through refcounting.</span></div>\n\
<div class=\"line\">    m_pTextureCache-&gt;release();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!MTextureCache::getReferenceCount())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureCache = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::attachSceneCallbacks()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fBeforeNewCB  = <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaaf261bc0d5929af12c193ee3c6e451349\">MSceneMessage::kBeforeNew</a>,  releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    fBeforeOpenCB = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaac4fe9e5e85e4e962ca0366226b012d6f\">MSceneMessage::kBeforeOpen</a>, releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    fBeforeRemoveReferenceCB = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa2f6e3664b31d62f64c1b3c68d6373f26\">MSceneMessage::kBeforeRemoveReference</a>, </div>\n\
<div class=\"line\">                                                          releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    fMayaExitingCB = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa1efff7ad75eeef5a2ac9e3c0e890dbd0\">MSceneMessage::kMayaExiting</a>, releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::releaseCallback(<span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    hwAnisotropicShader_NV20 *pThis = (hwAnisotropicShader_NV20*) clientData;</div>\n\
<div class=\"line\">    pThis-&gt;releaseEverything();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::detachSceneCallbacks()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fBeforeNewCB)</div>\n\
<div class=\"line\">        <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fBeforeNewCB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fBeforeOpenCB)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fBeforeOpenCB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fBeforeRemoveReferenceCB)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fBeforeRemoveReferenceCB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fMayaExitingCB)</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fMayaExitingCB);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fBeforeNewCB = 0;</div>\n\
<div class=\"line\">    fBeforeOpenCB = 0;</div>\n\
<div class=\"line\">    fBeforeRemoveReferenceCB = 0;</div>\n\
<div class=\"line\">    fMayaExitingCB = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> UserClassify( <span class=\"stringliteral\">&quot;shader/surface/utility&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;4.5&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    status = plugin.registerNode( <span class=\"stringliteral\">&quot;hwAnisotropicShader_NV20&quot;</span>, hwAnisotropicShader_NV20::id, </div>\n\
<div class=\"line\">                                  hwAnisotropicShader_NV20::creator, hwAnisotropicShader_NV20::initialize,</div>\n\
<div class=\"line\">                                  <a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7aee2b86760284068eef3c463f9de9babc\">MPxNode::kHwShaderNode</a>, &amp;UserClassify );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plugin.deregisterNode( hwAnisotropicShader_NV20::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> * hwAnisotropicShader_NV20::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> hwAnisotropicShader_NV20();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize the plug-in. Called once when the plug-in is loaded.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This mostly involve creating attributes.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwAnisotropicShader_NV20::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> nAttr; </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> sAttr; <span class=\"comment\">// For string attributes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Material color </span></div>\n\
<div class=\"line\">    colorR = nAttr.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;colorR&quot;</span>, <span class=\"stringliteral\">&quot;cr&quot;</span>,<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    colorG = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;colorG&quot;</span>, <span class=\"stringliteral\">&quot;cg&quot;</span>,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.5f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    colorB = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;colorB&quot;</span>, <span class=\"stringliteral\">&quot;cb&quot;</span>,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.5f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    color = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;color&quot;</span>, <span class=\"stringliteral\">&quot;c&quot;</span>, colorR, colorG, colorB);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.0f, 0.5f, 0.5f);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Material parameters. Set defaults to be &quot;shiny&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    kDiffuse = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;kDiffuse&quot;</span>, <span class=\"stringliteral\">&quot;kd&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.2f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    kSpecular = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;kSpecular&quot;</span>, <span class=\"stringliteral\">&quot;ks&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.9f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    roughness = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;roughness&quot;</span>, <span class=\"stringliteral\">&quot;rn&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.025f);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Add the attributes here</span></div>\n\
<div class=\"line\">    addAttribute(color);</div>\n\
<div class=\"line\">    addAttribute(roughness);</div>\n\
<div class=\"line\">    addAttribute(kDiffuse);</div>\n\
<div class=\"line\">    addAttribute(kSpecular);</div>\n\
<div class=\"line\">    attributeAffects (colorR, outColor);</div>\n\
<div class=\"line\">    attributeAffects (colorG, outColor);</div>\n\
<div class=\"line\">    attributeAffects (colorB, outColor);</div>\n\
<div class=\"line\">    attributeAffects (color,  outColor);</div>\n\
<div class=\"line\">    attributeAffects (roughness, outColor);</div>\n\
<div class=\"line\">    attributeAffects (kDiffuse, outColor);</div>\n\
<div class=\"line\">    attributeAffects (kSpecular, outColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// To get 3 float values from the node attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwAnisotropicShader_NV20::getFloat3(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr, <span class=\"keywordtype\">float</span> value[3])</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the attr to use</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   plug(thisMObject(), attr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> object;</div>\n\
<div class=\"line\">    status = plug.getValue(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;hwAnisotropicShader_NV20::getFloat3 plug.getValue.&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> data(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;hwAnisotropicShader_NV20::getFloat3 construct data.&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = data.getData(value[0], value[1], value[2]);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;hwAnisotropicShader_NV20::getFloat3 get values.&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// To get a string value from the node attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwAnisotropicShader_NV20::getString(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attr, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;str)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   plug(thisMObject(), attr);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = plug.getValue( str );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwAnisotropicShader_NV20::bind(<span class=\"keyword\">const</span> <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request, <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the material color</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> t_color[3];</div>\n\
<div class=\"line\">    getFloat3(color, t_color);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glPushAttrib( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\">        glPushClientAttrib(GL_CLIENT_VERTEX_ARRAY_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set the material color</span></div>\n\
<div class=\"line\">        glColor4f(t_color[0], t_color[1], t_color[2], 1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Bind anisotropic texture in texture unit 1</span></div>\n\
<div class=\"line\">        glActiveTextureARB( GL_TEXTURE0_ARB );</div>\n\
<div class=\"line\">        glEnable(GL_TEXTURE_2D);</div>\n\
<div class=\"line\">        bind_lookup_table();    </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    view.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwAnisotropicShader_NV20::unbind(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    glActiveTextureARB( GL_TEXTURE0_ARB );</div>\n\
<div class=\"line\">    glDisable(GL_TEXTURE_2D);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPopClientAttrib();</div>\n\
<div class=\"line\">    glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwAnisotropicShader_NV20::geometry( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request,</div>\n\
<div class=\"line\">                                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> prim,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> writable,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> indexCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> * indexArray,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> vertexCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> * vertexIDs,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> normalCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> colorCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> texCoordCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We assume triangles here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (prim != GL_TRIANGLES)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;        <span class=\"comment\">// [claforte August 9th 2001] Should this be MS::kFailure?</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find out if we have a directional light before</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// loading the vertex program since we use a different</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// vertex program depending on whether the light is a directional</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// one or not</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    isDirectionalLight = <span class=\"keyword\">true</span>; <span class=\"comment\">// Assume is directional</span></div>\n\
<div class=\"line\">    isNonAmbientLight = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">boolean</span> useDefaultLight = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numLights;</div>\n\
<div class=\"line\">    <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> lightPath;</div>\n\
<div class=\"line\">    view.<a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a6d7dd7077570a84fb10857346d4dfabb\">getLightCount</a>( numLights );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numLights)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a3cea85bd9127b51d9ff35de2ffc9ca33\">M3dView::LightingMode</a> mode;</div>\n\
<div class=\"line\">        view.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a81510d35bc4111a82aeb9eed2fd1e1d3\">getLightingMode</a>(mode);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (mode == <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a3cea85bd9127b51d9ff35de2ffc9ca33ac5583c23e915ab5ba507cd5a016afade\">M3dView::kLightDefault</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            useDefaultLight = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            isDirectionalLight = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            view.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#af34e92a608e2075a00f0e02ec5a9a348\">getLightPath</a>( 0, lightPath );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> lightObj = lightPath.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ad1aa507eb8e63e89e8d46a0abc18aa8c\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            isDirectionalLight = lightObj.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adaca767aff665cd113008801c67f76ce\">MFn::kDirectionalLight</a> );</div>\n\
<div class=\"line\">            isNonAmbientLight = lightObj.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a89c35717b248c2a27025f3f7569e466c\">MFn::kNonAmbientLight</a> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isNonAmbientLight)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_non_ambient_light.html\">MFnNonAmbientLight</a> mNonAmbientLight(lightObj);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mNonAmbientLight.decayRate() == 0)</div>\n\
<div class=\"line\">                    isNonAmbientLight = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Load the appropriate vertex program</span></div>\n\
<div class=\"line\">    loadVertexProgramGL();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Bind and enable the appropriate vertex program,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// depending on light type.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isDirectionalLight)</div>\n\
<div class=\"line\">        glBindProgramNV(GL_VERTEX_PROGRAM_NV, fVertexProgramDirectional);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (isNonAmbientLight)</div>\n\
<div class=\"line\">        glBindProgramNV(GL_VERTEX_PROGRAM_NV, fVertexProgramPointDecay);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        glBindProgramNV(GL_VERTEX_PROGRAM_NV, fVertexProgramPointNoDecay);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Assert if an error occurs after binding the vertex programs.</span></div>\n\
<div class=\"line\">    GLenum error = glGetError();</div>\n\
<div class=\"line\">    assert(error == GL_NO_ERROR);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Enable the vertex program.</span></div>\n\
<div class=\"line\">    glEnable(GL_VERTEX_PROGRAM_NV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get object&#39;s inverse matrix (ie: from world to object space.)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> objPath = request.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html#a29c5fd43c9e42c958ae3455eba8e3e8e\">multiPath</a>();</div>\n\
<div class=\"line\">    <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> objMatrix = objPath.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a63405f44451dc83c36ac538c4470b67c\">inclusiveMatrixInverse</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the light direction in object space.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This code assumes that there is a directional light in the scene,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and that it is the first light in DAG order.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numLights)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Handle default lighting mode</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (useDefaultLight )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 11, 0, 0, 1, 1); <span class=\"comment\">// Light dir = 0,0,1</span></div>\n\
<div class=\"line\">            glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 9, 1.0, 1.0, 1.0, 1); <span class=\"comment\">// Light color = 1,1,1,1</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Handle other lighting modes</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#af34e92a608e2075a00f0e02ec5a9a348\">getLightPath</a>( 0, lightPath );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> matrix = lightPath.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a229ff721947ec3ded47b5a071a7311ec\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            isDirectionalLight = lightPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ad1aa507eb8e63e89e8d46a0abc18aa8c\">node</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adaca767aff665cd113008801c67f76ce\">MFn::kDirectionalLight</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Get rotation of a directional light in object space</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (isDirectionalLight)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> lightDir(0,0,1); </div>\n\
<div class=\"line\">                lightDir *= matrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Transform into object space</span></div>\n\
<div class=\"line\">                lightDir *= objMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Provide the direction to the vertex program (constant 11)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Need to send it over negated since Maya reverses light direction !!!</span></div>\n\
<div class=\"line\">                glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 11, -lightDir.x, -lightDir.y, -lightDir.z, 1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"comment\">// Get the position of a non-directional light in object space</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> lightPos(0,0,0); <span class=\"comment\">// origin</span></div>\n\
<div class=\"line\">                lightPos *= matrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Transform into object space</span></div>\n\
<div class=\"line\">                lightPos *= objMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Provide the position to the vertex program (constant 11)</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Need to send it over negated since Maya reverses light positions !!!</span></div>\n\
<div class=\"line\">                glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 11, -lightPos.x, -lightPos.y, -lightPos.z, 1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_light.html\">MFnLight</a> mLight(lightPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ad1aa507eb8e63e89e8d46a0abc18aa8c\">node</a>());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set the light&#39;s color.</span></div>\n\
<div class=\"line\">            <a name=\"_a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> lightColor = mLight.color();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> intensity = mLight.intensity();</div>\n\
<div class=\"line\">            lightColor.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> *= intensity;</div>\n\
<div class=\"line\">            lightColor.g *= intensity;</div>\n\
<div class=\"line\">            lightColor.b *= intensity;</div>\n\
<div class=\"line\">            <span class=\"comment\">// This should NOT be clamped here, so the vertex program</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// does the correct computation ! Don&#39;t uncomment these</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// lines.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//if (lightColor.r &gt; 1.0) lightColor.r = 1.0;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//if (lightColor.g &gt; 1.0) lightColor.g = 1.0;</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//if (lightColor.b &gt; 1.0) lightColor.b = 1.0;</span></div>\n\
<div class=\"line\">            glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 9, lightColor.r, lightColor.g, lightColor.b, 1);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Set some default values</span></div>\n\
<div class=\"line\">        glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 11, 0, 0, 1, 1);</div>\n\
<div class=\"line\">        glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 9, 1.0, 1.0, 1.0, 1);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the camera position in geometry&#39;s object space</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> cameraPos[4] = {0.0f, 0.0f, 0.0f, 0.0f};</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> camDag;</div>\n\
<div class=\"line\">        view.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a5e6ea41ec1bab5ed980b2ddffe398a73\">getCamera</a>(camDag);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> cameraInObject(0,0,0); </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> cameraToWorldMatrix = camDag.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a229ff721947ec3ded47b5a071a7311ec\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        cameraInObject *= cameraToWorldMatrix; <span class=\"comment\">// to world</span></div>\n\
<div class=\"line\">        cameraInObject *= objMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 12, cameraInObject.x, cameraInObject.y, cameraInObject.z, 1);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// VERTEX CONSTANTS:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  c0- 3  4x4 ModelView-Projection composite matrix</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  c4    (1/2, 1, 0, 0) vector needed to compute (u,v)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    glTrackMatrixNV(GL_VERTEX_PROGRAM_NV, 0, GL_MODELVIEW_PROJECTION_NV, GL_IDENTITY_NV);</div>\n\
<div class=\"line\">    glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 4, 0.5, 1.0, 0.0, 0.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// VERTEX REGISTERS (Attributes):</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 0 - coord</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2 - tangent</span></div>\n\
<div class=\"line\">    glVertexAttribPointerNV( 0, 3, GL_FLOAT, 0, vertexArray );</div>\n\
<div class=\"line\">    glVertexAttribPointerNV( 2, 3, GL_FLOAT, 0, normalArrays[TANGENT_INDEX] ); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glEnableClientState( GL_VERTEX_ATTRIB_ARRAY0_NV );</div>\n\
<div class=\"line\">    glEnableClientState( GL_VERTEX_ATTRIB_ARRAY2_NV );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, indexArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glDisableClientState( GL_VERTEX_ATTRIB_ARRAY0_NV );</div>\n\
<div class=\"line\">    glDisableClientState( GL_VERTEX_ATTRIB_ARRAY2_NV );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    glDisable(GL_VERTEX_PROGRAM_NV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span>     hwAnisotropicShader_NV20::normalsPerVertex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Need the normal and tangents for this computation</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 2;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span>     hwAnisotropicShader_NV20::texCoordsPerVertex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Release the lookup texture/image.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwAnisotropicShader_NV20::release_lookup_texture()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lookup_table)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> lookup_table;</div>\n\
<div class=\"line\">        lookup_table = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lookup_texture)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> lookup_texture;</div>\n\
<div class=\"line\">        lookup_table = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";