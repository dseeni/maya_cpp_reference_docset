var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>vertexBufferGenerator/vertexBufferGenerator.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'vertex_buffer_generator_2vertex_buffer_generator_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>vertexBufferGenerator/vertexBufferGenerator.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">vertexBufferGenerator/vertexBufferGenerator.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2011 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Example plugin: vertexBufferGenerator.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in is an example of a custom MPxVertexBufferGenerator.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It provides custom vertex streams based on shader requirements coming from </span></div>\n\
<div class=\"line\"><span class=\"comment\">// an MPxShaderOverride.  The semanticName() in the MVertexBufferDescriptor is used </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to signify a unique identifier for a custom stream.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This plugin is meant to be used in conjunction with the d3d11Shader or cgShader plugins.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The vertexBufferGeneratorGL.cgfx and vertexBufferGeneratorDX11.fx files accompanying this sample</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can be loaded using the appropriate shader plugin.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The Names of the streams and the stream data generated by this plugin match what is </span></div>\n\
<div class=\"line\"><span class=\"comment\">// expected from the included effects files.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This sample use the MyCustomBufferGenerator to create a custom made streams.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The vertexBufferGenerator2GL.cgfx and vertexBufferGenerator2DX11.fx files accompanying this sample</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can be loaded using the appropriate shader plugin.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The Names of the streams and the stream data generated by this plugin match what is </span></div>\n\
<div class=\"line\"><span class=\"comment\">// expected from the included effects files.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This sample use the MyCustomBufferGenerator2 to create a custom made streams</span></div>\n\
<div class=\"line\"><span class=\"comment\">// by combining the Position and Normal streams in a single one.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStatus.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxVertexBufferGenerator.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyCustomBufferGenerator : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MHWRender::MPxVertexBufferGenerator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MyCustomBufferGenerator() {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~MyCustomBufferGenerator() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> getSourceIndexing(<span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, </div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; sourceIndexing)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; vertToFaceVertIDs = sourceIndexing.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> faceNum = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> numPolys = mesh.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a3a7a28cf8f6a12dd19ab6ed0a639f9ed\">numPolygons</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is an empty mesh we do nothing.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (numPolys &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// for each face</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">int</span> i = 0; i &lt; numPolys; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// assign a color ID to all vertices in this face.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> faceColorID = faceNum%3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> vertexCount = mesh.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html#a4ca016a3feb28fee0b9f373f86aebced\">polygonVertexCount</a>(i);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> x = 0; x &lt; vertexCount; ++x)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// set each face vertex to the face color</span></div>\n\
<div class=\"line\">                vertToFaceVertIDs.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a29ccefc020c96f15e099924ebe83eb07\">append</a>(faceColorID);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            faceNum++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// assign the source indexing</span></div>\n\
<div class=\"line\">        sourceIndexing.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#a5a0c45f0f5203d71fc23d2ca2a8976d4\">setComponentType</a>(MComponentDataIndexing::kFaceVertex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> getSourceStreams(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;sourceStreams)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// No source stream needed</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> createVertexStream(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MVertexBuffer</a>&amp; vertexBuffer, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; targetIndexing, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; <span class=\"comment\">/*sharedIndexing*/</span>, <span class=\"keyword\">const</span> <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html\">MVertexBufferArray</a>&amp; <span class=\"comment\">/*sourceStreams*/</span>)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the descriptor from the vertex buffer.  </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// It describes the format and layout of the stream.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a>&amp; descriptor = vertexBuffer.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a float stream.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (descriptor.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() != <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a>) </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a float2</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (descriptor.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>() != 2)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a texture channel</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (descriptor.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() != <a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MGeometry::kTexture</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; indices = targetIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexCount = indices.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vertexCount &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// acquire the buffer to fill with data.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>* buffer = (<span class=\"keywordtype\">float</span>*)vertexBuffer.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(vertexCount, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>* start = buffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; vertexCount; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Here we are embedding some custom data into the stream.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// The included effects (vertexBufferGeneratorGL.cgfx and</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// vertexBufferGeneratorDX11.fx) will alternate </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// red, green, and blue vertex colored triangles based on this input.</span></div>\n\
<div class=\"line\">            *(buffer++) = 1.0f;</div>\n\
<div class=\"line\">            *(buffer++) = (<span class=\"keywordtype\">float</span>)indices[i]; <span class=\"comment\">// color index</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// commit the buffer to signal completion.</span></div>\n\
<div class=\"line\">        vertexBuffer.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(start);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyCustomBufferGenerator2 : <span class=\"keyword\">public</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MHWRender::MPxVertexBufferGenerator</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MyCustomBufferGenerator2() {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~MyCustomBufferGenerator2() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> getSourceIndexing(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>, </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; sourceIndexing)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> vertexCount, vertexList;</div>\n\
<div class=\"line\">        mesh.getVertices(vertexCount, vertexList);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; vertices = sourceIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; vertexList.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">            vertices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a29ccefc020c96f15e099924ebe83eb07\">append</a>( (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)vertexList[i] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> getSourceStreams(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;sourceStreams)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        sourceStreams.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;Position&quot;</span> );</div>\n\
<div class=\"line\">        sourceStreams.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( <span class=\"stringliteral\">&quot;Normal&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> createVertexStream(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; <span class=\"keywordtype\">object</span>,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MVertexBuffer</a>&amp; vertexBuffer, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; targetIndexing, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html\">MComponentDataIndexing</a>&amp; <span class=\"comment\">/*sourceIndexing*/</span>, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html\">MVertexBufferArray</a>&amp; sourceStreams)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the descriptor from the vertex buffer.  </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// It describes the format and layout of the stream.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MVertexBufferDescriptor</a>&amp; descriptor = vertexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a float or int stream.</span></div>\n\
<div class=\"line\">        <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6\">MGeometry::DataType</a> dataType = descriptor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dataType != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a> &amp;&amp; dataType != <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae3e576e62ae36818ff6edced2065c36e\">MGeometry::kInt32</a>) </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a dimension of 3 or 4</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> dimension = descriptor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (dimension != 4 &amp;&amp; dimension != 3)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we are expecting a texture channel</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (descriptor.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4a6de4261b95102b5402b425d62e1bda93\">MGeometry::kTexture</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// get the mesh from the current path</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// if it is not a mesh we do nothing.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>; <span class=\"comment\">// failed</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html\">MUintArray</a>&amp; indices = targetIndexing.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html#add6ba44a469f954709b358f65584542f\">indices</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> vertexCount = indices.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_uint_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vertexCount &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MVertexBuffer</a> *positionStream = sourceStreams.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html#a621df52a0b7842e1bad3bb7472c8d5e0\">getBuffer</a>( <span class=\"stringliteral\">&quot;Position&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(positionStream == NULL || positionStream-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> positionDimension = positionStream-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(positionDimension != 3 &amp;&amp; positionDimension != 4)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MVertexBuffer</a> *normalStream = sourceStreams.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html#a621df52a0b7842e1bad3bb7472c8d5e0\">getBuffer</a>( <span class=\"stringliteral\">&quot;Normal&quot;</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(normalStream == NULL || normalStream-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc7588a483f61d3d4a1e8204ca14d6f6\">dataType</a>() != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a>)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> normalDimension = normalStream-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a331cfb987f5f4d632a747e7fbbbe4a43\">descriptor</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#ae5acbe47d704ceb866e3717e2ac9422f\">dimension</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(normalDimension != 3 &amp;&amp; normalDimension != 4)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>* positionBuffer = (<span class=\"keywordtype\">float</span>*)positionStream-&gt;<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#abc9e783c4d7826700a6a6824451f8230\">map</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(positionBuffer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span>* normalBuffer = (<span class=\"keywordtype\">float</span>*)normalStream-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#abc9e783c4d7826700a6a6824451f8230\">map</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(normalBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">void</span>* compositeBuffer = vertexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(vertexCount, <span class=\"keyword\">true</span> <span class=\"comment\">/*writeOnly - we don&#39;t need the current buffer values*/</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(compositeBuffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">void</span>* compositeBufferStart = compositeBuffer;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span>* compositeBufferAsFloat = (<span class=\"keywordtype\">float</span>*)compositeBuffer;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">int</span>* compositeBufferAsInt = (<span class=\"keywordtype\">int</span>*)compositeBuffer;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; vertexCount; ++i)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(dataType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6a5686197bafb177bdc82550848416a1ad\">MGeometry::kFloat</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            *(compositeBufferAsFloat++) = *(positionBuffer + 1);    <span class=\"comment\">// store position.y </span></div>\n\
<div class=\"line\">                            *(compositeBufferAsFloat++) = *(positionBuffer + 2);    <span class=\"comment\">// store position.z </span></div>\n\
<div class=\"line\">                            *(compositeBufferAsFloat++) = *(normalBuffer);          <span class=\"comment\">// store normal.x</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>(dimension == 4)</div>\n\
<div class=\"line\">                                *(compositeBufferAsFloat++) = *(normalBuffer + 2);  <span class=\"comment\">// store normal.z</span></div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span>(dataType == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6ae3e576e62ae36818ff6edced2065c36e\">MGeometry::kInt32</a>)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            *(compositeBufferAsInt++) = (<span class=\"keywordtype\">int</span>)(*(positionBuffer + 1) * 255);     <span class=\"comment\">// store position.y </span></div>\n\
<div class=\"line\">                            *(compositeBufferAsInt++) = (<span class=\"keywordtype\">int</span>)(*(positionBuffer + 2) * 255);     <span class=\"comment\">// store position.z </span></div>\n\
<div class=\"line\">                            *(compositeBufferAsInt++) = (<span class=\"keywordtype\">int</span>)(*(normalBuffer) * 255);           <span class=\"comment\">// store normal.x</span></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span>(dimension == 4)</div>\n\
<div class=\"line\">                                *(compositeBufferAsInt++) = (<span class=\"keywordtype\">int</span>)(*(normalBuffer + 2) * 255);   <span class=\"comment\">// store normal.z</span></div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">                        positionBuffer += positionDimension;</div>\n\
<div class=\"line\">                        normalBuffer += normalDimension;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    vertexBuffer.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(compositeBufferStart);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                normalStream-&gt;<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            positionStream-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c\">unmap</a>();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the buffer generator creation function registered with the DrawRegistry.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Used to initialize the generator.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MPxVertexBufferGenerator</a>* createMyCustomBufferGenerator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> MyCustomBufferGenerator();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html\">MPxVertexBufferGenerator</a>* createMyCustomBufferGenerator2()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> MyCustomBufferGenerator2();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The following routines are used to register/unregister</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the vertex generators with Maya</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// register a generator based on a custom semantic for DX11.  You can use any name in DX11.</span></div>\n\
<div class=\"line\">    <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aad2a7378bd3b995cf222d665030a08f0\">MDrawRegistry::registerVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;myCustomStream&quot;</span>, createMyCustomBufferGenerator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// register a generator based on a custom semantic for cg.  </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pretty limited in cg so we hook onto the &quot;ATTR&quot; semantics.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aad2a7378bd3b995cf222d665030a08f0\">MDrawRegistry::registerVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;ATTR8&quot;</span>, createMyCustomBufferGenerator);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// register a generator based on a custom semantic for DX11.  You can use any name in DX11.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aad2a7378bd3b995cf222d665030a08f0\">MDrawRegistry::registerVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;myCustomStreamB&quot;</span>, createMyCustomBufferGenerator2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// register a generator based on a custom semantic for cg.  </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pretty limited in cg so we hook onto the &quot;ATTR&quot; semantics.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#aad2a7378bd3b995cf222d665030a08f0\">MDrawRegistry::registerVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;ATTR7&quot;</span>, createMyCustomBufferGenerator2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a9c4ddee2564a6aa587a2407f8ba301b8\">MDrawRegistry::deregisterVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;myCustomStream&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a9c4ddee2564a6aa587a2407f8ba301b8\">MDrawRegistry::deregisterVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;ATTR8&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a9c4ddee2564a6aa587a2407f8ba301b8\">MDrawRegistry::deregisterVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;myCustomStreamB&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a9c4ddee2564a6aa587a2407f8ba301b8\">MDrawRegistry::deregisterVertexBufferGenerator</a>(<span class=\"stringliteral\">&quot;ATTR7&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";