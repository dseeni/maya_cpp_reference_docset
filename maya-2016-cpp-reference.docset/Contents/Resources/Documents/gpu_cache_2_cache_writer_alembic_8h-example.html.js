var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>gpuCache/CacheWriterAlembic.h</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2_cache_writer_alembic_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>gpuCache/CacheWriterAlembic.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/CacheWriterAlembic.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef _CacheWriterAlembic_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _CacheWriterAlembic_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Includes</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CacheWriter.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/Abc/OArchive.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/Abc/OObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/OXform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/OPolyMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcGeom/Visibility.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcMaterial/OMaterial.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Alembic/AbcMaterial/MaterialAssignment.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;boost/ptr_container/ptr_vector.hpp&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;boost/shared_ptr.hpp&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;boost/scoped_ptr.hpp&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Forward Declarations</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicXformWriter;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicMeshWriter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicCacheWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicCacheWriter : <span class=\"keyword\">public</span> CacheWriter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> boost::shared_ptr&lt;CacheWriter&gt; create(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keywordtype\">char</span> compressLevel, <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dataFormat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~AlembicCacheWriter();</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> valid() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the hierarchy of nodes under the given top level node to</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the cache file.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeSubNodeHierarchy(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::SubNode::Ptr&amp; topNode, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the materials to the cache file.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMaterials(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::MaterialGraphMap::Ptr&amp; materialGraphMap,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// returns the actual file name the implementation is writing</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; getFileObject() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GPUCACHE_DECLARE_MAKE_SHARED_FRIEND_3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    AlembicCacheWriter(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>&amp; file, <span class=\"keywordtype\">char</span> compressLevel, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; dataFormat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_file_object.html\">MFileObject</a>                   fFile;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>                          fCompressLevel;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>                       fDataFormat;</div>\n\
<div class=\"line\">    Alembic::Abc::OArchive        fAbcArchive;</div>\n\
<div class=\"line\">    Alembic::Abc::TimeSamplingPtr fAbcTimeSampling;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>                  fMaxNumSamples;</div>\n\
<div class=\"line\">    std::vector&lt;MBoundingBox&gt;     fArchiveBounds;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicSubNodeWriter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~AlembicSubNodeWriter(){}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Alembic::Abc::OObject object() = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicXformWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicXformWriter: <span class=\"keyword\">public</span> AlembicSubNodeWriter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AlembicXformWriter(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::OObject&amp; parent,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Alembic::Abc::OObject object();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write first sample.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> write(<span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::XformSample&gt;&amp;  sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write following samples.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> write(<span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::XformSample&gt;&amp;  sample,</div>\n\
<div class=\"line\">               <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::XformSample&gt;&amp;  prev);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillXform(Alembic::AbcGeom::XformSample&amp; xformSample,</div>\n\
<div class=\"line\">                   <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::XformSample&gt;&amp; sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::TimeSamplingPtr         fTimeSampPtr;</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OXformSchema        fAbcXform;</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OVisibilityProperty fVisibility;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                                fCachedWrite;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS AlembicMeshWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>AlembicMeshWriter: <span class=\"keyword\">public</span> AlembicSubNodeWriter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    AlembicMeshWriter(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Alembic::Abc::OObject&amp; parent,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>&amp; name,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> secondsPerSample, <span class=\"keywordtype\">double</span> startTimeInSeconds);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Alembic::Abc::OObject object();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write first sample.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> write(<span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp;  sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write following samples.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> write(<span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp;  sample,</div>\n\
<div class=\"line\">               <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp;  prev);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillWireframeSample(Alembic::Abc::Int32ArraySample&amp; wireIndicesSample,</div>\n\
<div class=\"line\">                             <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillTriangleSample(Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">                            Alembic::Abc::Int32ArraySample&amp; groupSizesSample,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillPositionSample(Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillNormalSample(Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">                          <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">                          <span class=\"keywordtype\">bool</span> forceWrite);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillUVSample(Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">                      <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample,</div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">bool</span> forceWrite);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillBoundingBoxSample(Alembic::AbcGeom::OPolyMeshSchema::Sample&amp; meshSample,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> fillDiffuseColorSample(Alembic::AbcGeom::C4f&amp; diffuseColorSample,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> boost::shared_ptr&lt;const GPUCache::ShapeSample&gt;&amp; sample);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::Abc::TimeSamplingPtr fTimeSampPtr;</div>\n\
<div class=\"line\">    Alembic::AbcGeom::OPolyMeshSchema fAbcMesh;</div>\n\
<div class=\"line\">    Alembic::Abc::OStringProperty     fAbcCreator;</div>\n\
<div class=\"line\">    Alembic::Abc::OStringProperty     fAbcVersion;</div>\n\
<div class=\"line\">    Alembic::Abc::OInt32ArrayProperty fAbcWireIndices;</div>\n\
<div class=\"line\">    Alembic::Abc::OInt32ArrayProperty fAbcGroupSizes;</div>\n\
<div class=\"line\">    Alembic::Abc::OC4fProperty        fAbcDiffuseColor;</div>\n\
<div class=\"line\">    std::vector&lt;int&gt; fGroupSizes;</div>\n\
<div class=\"line\">    std::vector&lt;int&gt; fPolygonCount;</div>\n\
<div class=\"line\">    std::vector&lt;Alembic::Abc::int32_t&gt; fFaceIndices;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::vector&lt;GPUCache::IndexBuffer::ReadableArrayPtr&gt; fIndexReadInterfaces;</div>\n\
<div class=\"line\">    std::vector&lt;GPUCache::VertexBuffer::ReadableArrayPtr&gt; fVertexReadInterfaces;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcGeom::OVisibilityProperty fVisibility;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span>                                fCachedWrite;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS MaterialGraphWriter</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Write a material graph to Alembic (OMaterial)</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MaterialGraphWriter : boost::noncopyable</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    MaterialGraphWriter(</div>\n\
<div class=\"line\">        Alembic::Abc::OObject               parent,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>                              secondsPerSample,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span>                              startTimeInSeconds,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::MaterialGraph::Ptr&amp; graph);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Write the material graph to the file.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> write();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Templated Write methods</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ABC_PROP&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setMaterialProperty(</div>\n\
<div class=\"line\">        ABC_PROP&amp; abcProp, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ABC_PROP&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> writeMaterialProperty(Alembic::Abc::OCompoundProperty&amp; parent, </div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ABC_PROP abcProp(</div>\n\
<div class=\"line\">            parent,</div>\n\
<div class=\"line\">            prop-&gt;name().asChar(),</div>\n\
<div class=\"line\">            fTimeSampPtr</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (prop-&gt;isAnimated()) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Animated property, we write to the last sample.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> lastSampleTimeInSeconds = </div>\n\
<div class=\"line\">                (--prop-&gt;getSamples().end())-&gt;first + 0.5f * fSecondsPerSample;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">double</span> time = fStartTimeInSeconds; </div>\n\
<div class=\"line\">                    time &lt; lastSampleTimeInSeconds; </div>\n\
<div class=\"line\">                    time += fSecondsPerSample) {</div>\n\
<div class=\"line\">                setMaterialProperty(abcProp, prop, time);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Static property, we just write one sample (sample 0)</span></div>\n\
<div class=\"line\">            setMaterialProperty(abcProp, prop, 0.0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Alembic::AbcMaterial::OMaterialSchema fAbcMaterial;</div>\n\
<div class=\"line\">    Alembic::Abc::TimeSamplingPtr         fTimeSampPtr;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>                          fSecondsPerSample;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>                          fStartTimeInSeconds;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialGraph::Ptr    fGraph;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Template explicit specialization must be in namespace scope.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OBoolProperty&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    abcProp.set(prop-&gt;asBool(timeInSeconds));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OInt32Property&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    abcProp.set(prop-&gt;asInt32(timeInSeconds));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OFloatProperty&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    abcProp.set(prop-&gt;asFloat(timeInSeconds));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OV2fProperty&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::V2f value;</div>\n\
<div class=\"line\">    prop-&gt;asFloat2(timeInSeconds, value.x, value.y);</div>\n\
<div class=\"line\">    abcProp.set(value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OV3fProperty&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Alembic::Abc::V3f value;</div>\n\
<div class=\"line\">    prop-&gt;asFloat3(timeInSeconds, value.x, value.y, value.z);</div>\n\
<div class=\"line\">    abcProp.set(value);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OC3fProperty&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> value = prop-&gt;asColor(timeInSeconds);</div>\n\
<div class=\"line\">    abcProp.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a113cffc9317234cfcb5cd850536d67f3\">set</a>(Alembic::Abc::C3f(value.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a>, value.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a>, value.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> MaterialGraphWriter::setMaterialProperty(</div>\n\
<div class=\"line\">    Alembic::Abc::OWstringProperty&amp; abcProp, </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> GPUCache::MaterialProperty::Ptr&amp; prop, </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> timeInSeconds)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> value = prop-&gt;asString(timeInSeconds);</div>\n\
<div class=\"line\">    abcProp.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a113cffc9317234cfcb5cd850536d67f3\">set</a>(value.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ade6a9ba4bd9b9d2d0ae95b05a7f75522\">asWChar</a>());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";