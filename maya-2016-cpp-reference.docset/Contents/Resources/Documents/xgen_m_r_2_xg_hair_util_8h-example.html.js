var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>xgenMR/XgHairUtil.h</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'xgen_m_r_2_xg_hair_util_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>xgenMR/XgHairUtil.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">xgenMR/XgHairUtil.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk </span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic </span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef __XGENHAIRUTIL_H__</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define __XGENHAIRUTIL_H__</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;shader.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>XGenMR</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// All user data descriptions</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is used at shader execution to query the index of a particular user data.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>UserDataFormat</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Single User data definition</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Entry</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry();</div>\n\
<div class=\"line\">        Entry( <span class=\"keyword\">const</span> std::string&amp; str, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> offset, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numScalars );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Checks if name and size are valid.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isValid() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// We&#39;ll persist all the hair layout information in a custom user data, on the hair object</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> toString( std::string&amp; out_str ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        std::string m_name;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_offset;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_numScalars;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    UserDataFormat();</div>\n\
<div class=\"line\">    UserDataFormat( <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* str, <span class=\"keywordtype\">size_t</span> size );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> EType</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        eInvalid,</div>\n\
<div class=\"line\">        eTexList,</div>\n\
<div class=\"line\">        eInplace,</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    EType getType()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_type; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setType( EType t ) { m_type = t; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We&#39;ll persist all the hair layout information in a custom user data, on the hair object</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> toString( std::string&amp; out_str ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// register a user data to the list, the map is filled later on by buildMap()</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> registerUserData( <span class=\"keyword\">const</span> std::string&amp; str, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numScalars, <span class=\"keywordtype\">int</span> perPoint );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build the map from the list of registered user data.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It builds the offsets correctly</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> buildMap();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Add a user data to the map. The offset must be known.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> addUserData( <span class=\"keyword\">const</span> std::string&amp; str, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> offset, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numScalars );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Entry* find( <span class=\"keyword\">const</span> std::string&amp; str );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Entry* getEntry( <span class=\"keywordtype\">size_t</span> i );</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Entry* getEntry( <span class=\"keywordtype\">size_t</span> i ) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> getEntryCount() <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> getOffsetScalars( )<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> m_offsetScalars;}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    EType m_type;</div>\n\
<div class=\"line\">    std::map&lt;std::string,Entry&gt; m_map;</div>\n\
<div class=\"line\">    std::vector&lt;Entry&gt; m_list; <span class=\"comment\">// temp list used by register and build map.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> m_offsetScalars; <span class=\"comment\">// inplace user data scalars</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// hair util shader class. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Will deprecate it soon. The seexpr shader does much more and better. </span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>HairUtil</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// mental ray input parameters</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Params</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        miTag format;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> init( miState* state, Params* paras );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// calls getField for the 3 components, based on the what init() picked.</span></div>\n\
<div class=\"line\">    miBoolean execute( miVector* result, miState* state, Params* paras );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* Names[43];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// What data to retreive on the miState</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> Field</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        no_field, bary, point, normal, normal_geom, direction, tex,</div>\n\
<div class=\"line\">        derivs0, derivs1, derivs2, derivs3, derivs4, derivs5, derivs6, derivs7, derivs8, derivs9, </div>\n\
<div class=\"line\">        scalars0, scalars1, scalars2, scalars3, scalars4, scalars5, scalars6, scalars7, scalars8, scalars9, </div>\n\
<div class=\"line\">        hair_min_raster_size, hair_raster_area,</div>\n\
<div class=\"line\">        hair_min_pixel_size, hair_pixel_area,</div>\n\
<div class=\"line\">        tex_list0, tex_list1, tex_list2, tex_list3, tex_list4, tex_list5, tex_list6, tex_list7, tex_list8, tex_list9, </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// A component of the Vector3</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> Comp</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        no_comp, x, y, z</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Return the data from the miState</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">float</span> getField( miState* state, Field field, Comp component );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Texture Helper</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> getTextures( miState *state, <span class=\"keywordtype\">int</span>&amp; max_tex, miVector** out_textures );</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> getHairScalars( miState *state, <span class=\"keywordtype\">int</span>&amp; max_scalars, std::vector&lt;miScalar&gt;&amp; out_scalars );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Data for the shader instance, initialized in init()</span></div>\n\
<div class=\"line\">    std::string m_format;</div>\n\
<div class=\"line\">    Field m_fields[3];</div>\n\
<div class=\"line\">    Comp m_components[3];</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";