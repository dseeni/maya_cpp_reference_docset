var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>AbcBullet/MayaUtility.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_bullet_2_maya_utility_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>AbcBullet/MayaUtility.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcBullet/MayaUtility.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2012,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;MayaUtility.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// return seconds per frame</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> util::spf()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a> sec(1.0, <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1.0 / sec.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a5b08f84ff68e42c0a32dbd8e0a2d6506\">MTime::uiUnit</a>());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> util::isAncestorDescendentRelationship(<span class=\"keyword\">const</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; path1,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp; path2)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length1 = path1.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length2 = path2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> diff;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (length1 == length2 &amp;&amp; !(path1 == path2))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> ancestor, descendent;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (length1 &gt; length2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ancestor = path2;</div>\n\
<div class=\"line\">        descendent = path1;</div>\n\
<div class=\"line\">        diff = length1 - length2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ancestor = path1;</div>\n\
<div class=\"line\">        descendent = path2;</div>\n\
<div class=\"line\">        diff = length2 - length1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    descendent.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac71eca2b78b8cfc088adc9af6f851dfd\">pop</a>(diff);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> ret = (ancestor == descendent);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ret)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> err = path1.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac4b316731c4019c927aa63731d4749e8\">fullPathName</a>() + <span class=\"stringliteral\">&quot; and &quot;</span>;</div>\n\
<div class=\"line\">        err += path2.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac4b316731c4019c927aa63731d4749e8\">fullPathName</a>() + <span class=\"stringliteral\">&quot; have parenting relationships&quot;</span>;</div>\n\
<div class=\"line\">        <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(err);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// returns 0 if static, 1 if sampled, and 2 if a curve</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> util::getSampledType(<span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; iPlug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> conns;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iPlug.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3727c18c58fc5ba8be5fb2582b5d06f1\">connectedTo</a>(conns, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// it&#39;s possible that only some element of an array plug or</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// some component of a compound plus is connected</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (conns.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iPlug.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a42a62e7e85c661ab761d25ba77504f15\">isArray</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numConnectedElements = iPlug.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a6dcee5cd9bc00a6d9d94508fddb9f1bf\">numConnectedElements</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> e = 0; e &lt; numConnectedElements; e++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> retVal = getSampledType(iPlug.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a9c03f550d14f6f48dd9e4a6a5d67c4e6\">connectionByPhysicalIndex</a>(e));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (retVal &gt; 0)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (iPlug.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a4b080071a2ea7391777e269781e3dc07\">isCompound</a>() &amp;&amp; iPlug.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a56ab190377fd0fb57e33ed95e846a181\">numConnectedChildren</a>() &gt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numChildren = iPlug.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a0a27cb351cc1a05aa82d4329d7f99bd1\">numChildren</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> c = 0; c &lt; numChildren; c++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> retVal = getSampledType(iPlug.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae9e2ba9ea7be1790e7e13fd2c49bd143\">child</a>(c));</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (retVal &gt; 0)</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> retVal;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> ob;</div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> nodeFn;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> i = 0; i &lt; conns.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ob = conns[i].node();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFn::Type</a> type = ob.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#a7e5fd5d37dde6df8c0cf350e00ca0a75\">apiType</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (type)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a7a1f6eda450248d2dcb4510fc9fde2e9\">MFn::kAnimCurveTimeToAngular</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7afec3235d8db7b78a166738602b3d33b0\">MFn::kAnimCurveTimeToDistance</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad71eb31361d2708e05f809c3a8004e7a\">MFn::kAnimCurveTimeToTime</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aafb0f435f8ab67e4ac0d7f87b18277a0\">MFn::kAnimCurveTimeToUnitless</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                nodeFn.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(ob);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> incoming = nodeFn.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;i&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// sampled</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (incoming.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a86ea067b523cb58b56699e1e334fa274\">isConnected</a>())</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// curve</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> 2;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab75a43878bcd6b4768e79683a077380b\">MFn::kMute</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                nodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_base.html#ad09f5acece0f9926b3e0e55cff78c3be\">setObject</a>(ob);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> mutePlug = nodeFn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(<span class=\"stringliteral\">&quot;mute&quot;</span>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// static</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (mutePlug.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">                <span class=\"comment\">// curve</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                   <span class=\"keywordflow\">return</span> 2;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> util::getRotOrder(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bc\">MTransformationMatrix::RotationOrder</a> iOrder,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp; oXAxis, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp; oYAxis, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> &amp; oZAxis)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (iOrder)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bcacfa82ee0eaf4075f3cda4152dd020d99\">MTransformationMatrix::kXYZ</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oXAxis = 0;</div>\n\
<div class=\"line\">            oYAxis = 1;</div>\n\
<div class=\"line\">            oZAxis = 2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca87ec3a6c693801d56c5ce902cea31877\">MTransformationMatrix::kYZX</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oXAxis = 1;</div>\n\
<div class=\"line\">            oYAxis = 2;</div>\n\
<div class=\"line\">            oZAxis = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca07c45baf7aa32873fe3c8238424ebfa1\">MTransformationMatrix::kZXY</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oXAxis = 2;</div>\n\
<div class=\"line\">            oYAxis = 0;</div>\n\
<div class=\"line\">            oZAxis = 1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca0982bd58c3430b5f521f4c180aec001d\">MTransformationMatrix::kXZY</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oXAxis = 0;</div>\n\
<div class=\"line\">            oYAxis = 2;</div>\n\
<div class=\"line\">            oZAxis = 1;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca23214e1b520c135ffa06f3fcd5030d92\">MTransformationMatrix::kYXZ</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oXAxis = 1;</div>\n\
<div class=\"line\">            oYAxis = 0;</div>\n\
<div class=\"line\">            oZAxis = 2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#af3d74c777e523f2725cdf87c15a4b5bca0ede29653f0c0e677e80ddd6f6bd84d4\">MTransformationMatrix::kZYX</a>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            oXAxis = 2;</div>\n\
<div class=\"line\">            oYAxis = 1;</div>\n\
<div class=\"line\">            oZAxis = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// 0 dont write, 1 write static 0, 2 write anim 0, 3 write anim -1</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> util::getVisibilityType(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; iPlug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> type = getSampledType(iPlug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// static case</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (type == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// dont write anything</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// write static 0</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// anim write -1</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (iPlug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// write anim 0</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// does this cover all cases?</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> util::isAnimated(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; <span class=\"keywordtype\">object</span>, <span class=\"keywordtype\">bool</span> checkParent)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html\">MItDependencyGraph</a> iter(<span class=\"keywordtype\">object</span>, <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a94dd08feda7b2cf0ff8262312c4fcc09\">MFn::kInvalid</a>,</div>\n\
<div class=\"line\">        <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#a224b9163917ac32fc95a60d8c1eec3aaa8a1fab0ce1da9f8eb804389091ba08a9\">MItDependencyGraph::kUpstream</a>,</div>\n\
<div class=\"line\">        <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#a5d3b8e489d2892096e6d65b9d9b72b65a6e92a8757afce03be51397f0b518f4c5\">MItDependencyGraph::kDepthFirst</a>,</div>\n\
<div class=\"line\">        <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dependency_graph.html#a221b779e6bb7b8d40677d7642bfefac5a328f00ae2a12674d627e8080cc5f80a4\">MItDependencyGraph::kNodeLevel</a>,</div>\n\
<div class=\"line\">        &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat!= <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Unable to create DG iterator &quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// MAnimUtil::isAnimated(node) will search the history of the node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for any animation curve nodes. It will return true for those nodes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that have animation curve in their history.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The average time complexity is O(n^2) where n is the number of history</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// nodes. But we can improve the best case by split the loop into two.</span></div>\n\
<div class=\"line\">    std::vector&lt;MObject&gt; nodesToCheckAnimCurve;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !iter.isDone(); iter.next())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = iter.thisNode();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (node.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af34d84d127b40b54ca8cbef9c6a8e7ec\">MFn::kPluginDependNode</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>( <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a099517fc2a2a058fdea132c5ec6b0956\">MFn::kConstraint</a> ) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab7ec4db4e20394eaf6b695cab4465ba0\">MFn::kPointConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a8d8ee06d6aa8abbea0508dd9acc0f2de\">MFn::kAimConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a6238013a3ded4d9484fa775437874b27\">MFn::kOrientConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2a9b1283b2446d2dccf823b1e9baa37d\">MFn::kScaleConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7afeac6393a05deb7ffcf7b660797e83a0\">MFn::kGeometryConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7afcbc6a4546f05058fbc4f1d939fac5e6\">MFn::kNormalConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a59bbdb6dcb2d09c59d740ca3bffa07ba\">MFn::kTangentConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a031a2aba444907484dab822d717efb42\">MFn::kParentConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7abac92dc6735068a3219b01adf8f77c7b\">MFn::kPoleVectorConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a031a2aba444907484dab822d717efb42\">MFn::kParentConstraint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a65c3a8bb75ba1a57e36c86855169752e\">MFn::kTime</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab8b14d1ed753088b316e8ee8c5d38ca9\">MFn::kJoint</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ad8368127a06255cd0684dc4abb2f5226\">MFn::kGeometryFilt</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7af34dcaf409dd76501fdc3ed67a9b73fd\">MFn::kTweak</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a90f070b79dfbfb1c48a2e93ae4c328eb\">MFn::kPolyTweak</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a9574d89defdd99c43fb8e20117f4c944\">MFn::kSubdTweak</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7aee59b0c2d9f2747b448d17ae37227694\">MFn::kCluster</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a4ef978e3c156dd2df1fe9d76459d20f3\">MFn::kFluid</a>) ||</div>\n\
<div class=\"line\">                node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a83beaef33543cbd69cc170b0828b6c9d\">MFn::kPolyBoolOp</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (node.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af0af77f14f96d1134fb8e8e60dc7e420\">hasFn</a>(<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a05fe101e6da85b22f800f036df18e669\">MFn::kExpression</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_expression.html\">MFnExpression</a> fn(node, &amp;stat);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; fn.isAnimated())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        nodesToCheckAnimCurve.push_back(node);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0; i &lt; nodesToCheckAnimCurve.size(); i++) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_util.html#a44de0f1cf03a138aaf11ac495b01ba17\">MAnimUtil::isAnimated</a>(nodesToCheckAnimCurve[i], checkParent))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> util::isIntermediate(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; <span class=\"keywordtype\">object</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a name=\"_a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> mFn(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = mFn.findPlug(<span class=\"stringliteral\">&quot;intermediateObject&quot;</span>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> util::isRenderable(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp; <span class=\"keywordtype\">object</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> mFn(<span class=\"keywordtype\">object</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// templated turned on?  return false</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = mFn.findPlug(<span class=\"stringliteral\">&quot;template&quot;</span>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// visibility or lodVisibility off?  return false</span></div>\n\
<div class=\"line\">    plug = mFn.findPlug(<span class=\"stringliteral\">&quot;visibility&quot;</span>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; !plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// the value is off. let&#39;s check if it has any in-connection,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// otherwise, it means it is not animated.</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> arrayIn;</div>\n\
<div class=\"line\">        plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3727c18c58fc5ba8be5fb2582b5d06f1\">connectedTo</a>(arrayIn, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; arrayIn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    plug = mFn.findPlug(<span class=\"stringliteral\">&quot;lodVisibility&quot;</span>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; !plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aea1ddab8d4272d03146b3dad29be3af0\">asBool</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> arrayIn;</div>\n\
<div class=\"line\">        plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3727c18c58fc5ba8be5fb2582b5d06f1\">connectedTo</a>(arrayIn, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, &amp;stat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; arrayIn.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// this shape is renderable</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> util::stripNamespaces(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; iNodeName, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iDepth)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iDepth == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> iNodeName;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> strArray;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iNodeName.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39;:&#39;</span>, strArray) == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> len = strArray.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we want to strip off more namespaces than what we have</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// so we just return the last name</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (len == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> iNodeName;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (len &lt;= iDepth + 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> strArray[len-1];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = iDepth; i &lt; len - 1; ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            name += strArray[i];</div>\n\
<div class=\"line\">            name += <span class=\"stringliteral\">&quot;:&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        name += strArray[len-1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> name;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> iNodeName;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> util::getHelpText()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ret =</div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;AbcBullet [options]\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Options:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-h / -help  Print this message.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-prs / -preRollStartFrame double\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;The frame to start scene evaluation at.  This is used to set the\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;starting frame for time dependent translations and can be used to evaluate\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;run-up that isn&#39;t actually translated.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-duf / -dontSkipUnwrittenFrames\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;When evaluating multiple translate jobs, the presence of this flag decides\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;whether to evaluate frames between jobs when there is a gap in their frame\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;ranges.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-v / -verbose\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Prints the current frame that is being evaluated.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-j / -jobArg string REQUIRED\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;String which contains flags for writing data to a particular file.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Multiple jobArgs can be specified.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-jobArg flags:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-a / -attr string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;A specific geometric attribute to write out.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;This flag may occur more than once.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-atp / -attrPrefix string (default ABC_)\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Prefix filter for determining which geometric attributes to write out.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;This flag may occur more than once.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-ef / -eulerFilter\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present, apply Euler filter while sampling rotations.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-f / -file string REQUIRED\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;File location to write the Alembic data.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-fr / -frameRange double double\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;The frame range to write.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-frs / -frameRelativeSample double\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;frame relative sample that will be written out along the frame range.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;This flag may occur more than once.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-nn / -noNormals\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present normal data for Alembic poly meshes will not be\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;written.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-ro / -renderableOnly\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present non-renderable hierarchy (invisible, or templated)\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;will not be written out.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-rt / -root\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Maya dag path which will be parented to the root of the Alembic file.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;This flag may occur more than once.  If unspecified, it defaults to &#39;|&#39; which\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;means the entire scene will be written out.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-s / -step double (default 1.0)\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;The time interval (expressed in frames) at which the frame range is sampled.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Additional samples around each frame can be specified with -frs.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-sl / -selection\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present, write out all all selected nodes from the active\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;selection list that are descendents of the roots specified with -root.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-sn / -stripNamespaces (optional int)\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present all namespaces will be stripped off of the node before\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;being written to Alembic.  If an optional int is specified after the flag\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;then that many namespaces will be stripped off of the node name. Be careful\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;that the new stripped name does not collide with other sibling node names.\\n\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Examples: \\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;taco:foo:bar would be written as just bar with -sn\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;taco:foo:bar would be written as foo:bar with -sn 1\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-u / -userAttr string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;A specific user attribute to write out.  This flag may occur more than once.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-uatp / -userAttrPrefix string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Prefix filter for determining which user attributes to write out.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;This flag may occur more than once.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-uv / -uvWrite\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present, uv data for PolyMesh and SubD shapes will be written to\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;the Alembic file.  Only the current uv map is used.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-wcs / -writeColorSets\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Write all color sets on MFnMeshes as color 3 or color 4 indexed geometry \\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;parameters with face varying scope.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-wfs / -writeFaceSets\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Write all Face sets on MFnMeshes.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-wfg / -wholeFrameGeo\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present data for geometry will only be written out on whole\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;frames.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-ws / -worldSpace\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present, any root nodes will be stored in world space.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-wv / -writeVisibility\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;If this flag is present, visibility state will be stored in the Alembic\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;file.  Otherwise everything written out is treated as visible.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-mfc / -melPerFrameCallback string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;When each frame (and the static frame) is evaluated the string specified is\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;evaluated as a Mel command. See below for special processing rules.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-mpc / -melPostJobCallback string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;When the translation has finished the string specified is evaluated as a Mel\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;command. See below for special processing rules.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-pfc / -pythonPerFrameCallback string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;When each frame (and the static frame) is evaluated the string specified is\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;evaluated as a python command. See below for special processing rules.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-ppc / -pythonPostJobCallback string\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;When the translation has finished the string specified is evaluated as a\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;python command. See below for special processing rules.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Special callback information:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;On the callbacks, special tokens are replaced with other data, these tokens\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;and what they are replaced with are as follows:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;#FRAME# replaced with the frame number being evaluated.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;#FRAME# is ignored in the post callbacks.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;#BOUNDS# replaced with a string holding bounding box values in minX minY minZ\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;maxX maxY maxZ space seperated order.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;#BOUNDSARRAY# replaced with the bounding box values as above, but in\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;array form.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;In Mel: {minX, minY, minZ, maxX, maxY, maxZ}\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;In Python: [minX, minY, minZ, maxX, maxY, maxZ]\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Examples:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;AbcBullet -j \\&quot;-root |group|foo -root |test|path|bar -file /tmp/test.abc\\&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Writes out everything at foo and below and bar and below to /tmp/test.abc.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;foo and bar are siblings parented to the root of the Alembic scene.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;AbcBullet -j \\&quot;-frameRange 1 5 -step 0.5 -root |group|foo -file /tmp/test.abc\\&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Writes out everything at foo and below to /tmp/test.abc sampling at frames:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;1 1.5 2 2.5 3 3.5 4 4.5 5\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;AbcBullet -j \\&quot;-fr 0 10 -frs -0.1 -frs 0.2 -step 5 -file /tmp/test.abc\\&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Writes out everything in the scene to /tmp/test.abc sampling at frames:\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;-0.1 0.2 4.9 5.2 9.9 10.2\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Note: The difference between your highest and lowest frameRelativeSample can\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;not be greater than your step size.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;AbcBullet -j \\&quot;-step 0.25 -frs 0.3 -frs 0.60 -fr 1 5 -root foo -file test.abc\\&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Is illegal because the highest and lowest frameRelativeSamples are 0.3 frames\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;apart.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;AbcBullet -j \\&quot;-sl -root |group|foo -file /tmp/test.abc\\&quot;\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;Writes out all selected nodes and it&#39;s ancestor nodes including up to foo.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;foo will be parented to the root of the Alembic scene.\\n&quot;</span></div>\n\
<div class=\"line\"><span class=\"stringliteral\">&quot;\\n&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";