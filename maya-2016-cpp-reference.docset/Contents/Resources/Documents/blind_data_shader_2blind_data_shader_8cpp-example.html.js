var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>blindDataShader/blindDataShader.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'blind_data_shader_2blind_data_shader_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>blindDataShader/blindDataShader.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">blindDataShader/blindDataShader.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable : 4786 )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDoubleArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLightDataAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;blindDataShader.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> mergeSort( <span class=\"keywordtype\">int</span> startIndex, <span class=\"keywordtype\">int</span> sortingOffset,</div>\n\
<div class=\"line\">                <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; sortingArray, <span class=\"keywordtype\">int</span>* tempSortingArray,</div>\n\
<div class=\"line\">                <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a>&amp; otherArray, <span class=\"keywordtype\">double</span>* tempOtherArray)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This is a very dirty recursive implementation of the merge sort</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that is very application-specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sortingOffset == 2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sortingArray[startIndex] &gt; sortingArray[startIndex+1])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> temp = sortingArray[startIndex+1];</div>\n\
<div class=\"line\">            sortingArray[startIndex+1] = sortingArray[startIndex];</div>\n\
<div class=\"line\">            sortingArray[startIndex] = temp;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> ftemp = otherArray[startIndex+1];</div>\n\
<div class=\"line\">            otherArray[startIndex+1] = otherArray[startIndex];</div>\n\
<div class=\"line\">            otherArray[startIndex] = ftemp;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (sortingOffset &gt; 2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// First, sort each half</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> leftCount = sortingOffset / 2;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> rightCount = sortingOffset - leftCount;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> leftIndex = startIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> rightIndex = startIndex + leftCount;</div>\n\
<div class=\"line\">        mergeSort(leftIndex, leftCount, sortingArray, tempSortingArray,</div>\n\
<div class=\"line\">            otherArray, tempOtherArray);</div>\n\
<div class=\"line\">        mergeSort(rightIndex, rightCount, sortingArray, tempSortingArray,</div>\n\
<div class=\"line\">            otherArray, tempOtherArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Second, merge the halves into the temporary arrays</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> index = startIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (leftIndex &lt; (startIndex + leftCount)</div>\n\
<div class=\"line\">            &amp;&amp; rightIndex &lt; (startIndex + sortingOffset) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (sortingArray[leftIndex] &lt; sortingArray[rightIndex])</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                tempSortingArray[index] = sortingArray[leftIndex];</div>\n\
<div class=\"line\">                tempOtherArray[index++] = otherArray[leftIndex++];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                tempSortingArray[index] = sortingArray[rightIndex];</div>\n\
<div class=\"line\">                tempOtherArray[index++] = otherArray[rightIndex++];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// One of the sides is done, so add the other side</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (leftIndex &lt; (startIndex + leftCount) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            tempSortingArray[index] = sortingArray[leftIndex];</div>\n\
<div class=\"line\">            tempOtherArray[index++] = otherArray[leftIndex++];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (rightIndex &lt; (startIndex + sortingOffset) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            tempSortingArray[index] = sortingArray[rightIndex];</div>\n\
<div class=\"line\">            tempOtherArray[index++] = otherArray[rightIndex++];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Finally, copy the temporary sorting array over to the other side</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (index = startIndex; index &lt; (startIndex + sortingOffset); ++index)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            sortingArray[index] = tempSortingArray[index];</div>\n\
<div class=\"line\">            otherArray[index] = tempOtherArray[index];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> binarySearch(<span class=\"keywordtype\">int</span> searchValue, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a>&amp; searchArray)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Application-specific implementation of the binary search algorithm.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// It returns the index in the &quot;searchArray&quot; where the &quot;searchValue&quot;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// is found or -1 if it is not found.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> max = searchArray.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> min = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (max - min &gt; 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> currentIndex = ((max - min) / 2) + min;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> currentValue = searchArray[currentIndex];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (currentValue == searchValue) <span class=\"keywordflow\">return</span> currentIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (currentValue &lt; searchValue) min = currentIndex;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> max = currentIndex;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (searchArray[min] == searchValue) <span class=\"keywordflow\">return</span> min;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> -1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Blind Data Shader class</span></div>\n\
<div class=\"line\"><span class=\"comment\"> ***************************************************************************/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Static class member variables</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Unique Node TypeId</span></div>\n\
<div class=\"line\"><a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> blindDataShader::id( 0x00086000 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* blindDataShader::creator()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: Static member function that returns a new</span></div>\n\
<div class=\"line\"><span class=\"comment\">// dynamically-allocated instance of the class.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> blindDataShader();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindDataShader::initialize()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description: Static member function that initializes the static</span></div>\n\
<div class=\"line\"><span class=\"comment\">// member variables of the class. In this case, it does nothing, since</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;id&quot; is already set to the default value.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindDataShader::compute(</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;      plug,</div>\n\
<div class=\"line\">      <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block ) </div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> k = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    k |= (plug==outColor);</div>\n\
<div class=\"line\">    k |= (plug==outColorR);</div>\n\
<div class=\"line\">    k |= (plug==outColorG);</div>\n\
<div class=\"line\">    k |= (plug==outColorB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !k ) <span class=\"keywordflow\">return</span> <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a7f858db05022c8bc860d685e13bab6ae\">MS::kUnknownParameter</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Always return black for now.</span></div>\n\
<div class=\"line\">    <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> resultColor(0.0,0.0,0.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set ouput color attribute</span></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outColorHandle = block.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( outColor );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; outColor = outColorHandle.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a5e7d49f6ed0e237f1e9e43b639f06d07\">asFloatVector</a>();</div>\n\
<div class=\"line\">    outColor = resultColor;</div>\n\
<div class=\"line\">    outColorHandle.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindDataShader::bind(<span class=\"keyword\">const</span> <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request, <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    view.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPushAttrib( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\">    glPushClientAttrib(GL_CLIENT_VERTEX_ARRAY_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindDataShader::unbind(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request,</div>\n\
<div class=\"line\">               <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>(); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPopClientAttrib();</div>\n\
<div class=\"line\">    glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> blindDataShader::geometry( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request,</div>\n\
<div class=\"line\">                                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> prim,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> writable,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> indexCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> * indexArray,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> vertexCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> * vertexIDs,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> * vertexArray,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> normalCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** normalArrays,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> colorCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** colorArrays,</div>\n\
<div class=\"line\">                                <span class=\"keywordtype\">int</span> texCoordCount,</div>\n\
<div class=\"line\">                                <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> ** texCoordArrays)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Once everything is plugged, this function is called by the Maya rendering</span></div>\n\
<div class=\"line\"><span class=\"comment\">// engine to render the given objects. It will be called for each frame, so </span></div>\n\
<div class=\"line\"><span class=\"comment\">// the efficiency of this algorithm is important.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> blindDataUniqueID = 60;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create our own empty colour array and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// populate it with the default colour value for the attribute.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* colours = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[vertexCount * 3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> defaultColour[3] = { 0.0f, 0.0f, 0.0f };</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug( thisMObject(), outColor );</div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> colorObject;</div>\n\
<div class=\"line\">    plug.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a64f7093bfde5c5eb9d89b32635b772aa\">getValue</a>(colorObject);</div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html\">MFnNumericData</a> data(colorObject);</div>\n\
<div class=\"line\">    data.getData(defaultColour[0], defaultColour[1], defaultColour[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the blind data to set independant colour values</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> mesh(request.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html#a29c5fd43c9e42c958ae3455eba8e3e8e\">multiPath</a>().<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ad1aa507eb8e63e89e8d46a0abc18aa8c\">node</a>(), &amp;stat);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stat &amp;&amp; mesh.hasBlindData(<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>, &amp;stat)</div>\n\
<div class=\"line\">        &amp;&amp; mesh.hasBlindData(vertexIDs[0], <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>,</div>\n\
<div class=\"line\">        blindDataUniqueID, &amp;stat))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html\">MIntArray</a> redComponentIDs, greenComponentIDs, blueComponentIDs;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html\">MDoubleArray</a> redColour, greenColour, blueColour;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        stat = mesh.getDoubleBlindData( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>,</div>\n\
<div class=\"line\">            blindDataUniqueID, <span class=\"stringliteral\">&quot;red&quot;</span>, redComponentIDs, redColour);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat) stat = mesh.getDoubleBlindData( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>,</div>\n\
<div class=\"line\">            blindDataUniqueID, <span class=\"stringliteral\">&quot;green&quot;</span>, greenComponentIDs, greenColour);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat) stat = mesh.getDoubleBlindData( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a040adaedfb9ad2fcc82cdeca1e214522\">MFn::kMeshVertComponent</a>,</div>\n\
<div class=\"line\">            blindDataUniqueID, <span class=\"stringliteral\">&quot;blue&quot;</span>, blueComponentIDs, blueColour);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (stat &amp;&amp; redComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == redColour.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()</div>\n\
<div class=\"line\">            &amp;&amp; greenComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == greenColour.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()</div>\n\
<div class=\"line\">            &amp;&amp; blueComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == blueColour.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_double_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Now that I have all the blind data,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// use the vertex IDs and the component IDs arrays</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// to map the blind data values inside the colour array.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Sort the components IDs and the colour values in increasing</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// order to speed up the association</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> maxArrayLength =</div>\n\
<div class=\"line\">                (redComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; greenComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) ?</div>\n\
<div class=\"line\">                ((redComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; blueComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) ?</div>\n\
<div class=\"line\">                    redComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() : blueComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) :</div>\n\
<div class=\"line\">                ((greenComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt; blueComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()) ?</div>\n\
<div class=\"line\">                    greenComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() : blueComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>());</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span>* tempIntArray = <span class=\"keyword\">new</span> <span class=\"keywordtype\">int</span>[maxArrayLength];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span>* tempFloatArray = <span class=\"keyword\">new</span> <span class=\"keywordtype\">double</span>[maxArrayLength];</div>\n\
<div class=\"line\">            mergeSort(0, redComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(), redComponentIDs,</div>\n\
<div class=\"line\">                tempIntArray, redColour, tempFloatArray);</div>\n\
<div class=\"line\">            mergeSort(0, greenComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(), greenComponentIDs,</div>\n\
<div class=\"line\">                tempIntArray, greenColour, tempFloatArray);</div>\n\
<div class=\"line\">            mergeSort(0, blueComponentIDs.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_int_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(), blueComponentIDs,</div>\n\
<div class=\"line\">                tempIntArray, blueColour, tempFloatArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Associate the vertex IDs with the colour values</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i = 0; i &lt; vertexCount; ++i)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> index = binarySearch(vertexIDs[i], redComponentIDs);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != -1) colours[3*i] = redColour[index];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> colours[3*i] = defaultColour[0];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                index = binarySearch(vertexIDs[i], greenComponentIDs);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != -1) colours[3*i+1] = greenColour[index];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> colours[3*i+1] = defaultColour[1];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                index = binarySearch(vertexIDs[i], blueComponentIDs);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (index != -1) colours[3*i+2] = blueColour[index];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> colours[3*i+2] = defaultColour[2];</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render the triangles using the new vertex colour information</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// taken from the blind data values of the mesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPushAttrib( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\">    glPushClientAttrib(GL_CLIENT_VERTEX_ARRAY_BIT);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glDisable(GL_LIGHTING);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glVertexPointer(3, GL_FLOAT, 0, vertexArray);</div>\n\
<div class=\"line\">    glEnableClientState(GL_VERTEX_ARRAY);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Is the next line necessary?</span></div>\n\
<div class=\"line\">    glColor4f( 1.0f, 1.0f, 1.0f, 1.0f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glColorPointer(3, GL_DOUBLE, 0, colours);</div>\n\
<div class=\"line\">    glEnableClientState(GL_COLOR_ARRAY);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glDrawElements(prim, indexCount, GL_UNSIGNED_INT, indexArray);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glDisable(GL_COLOR_MATERIAL);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glPopClientAttrib();</div>\n\
<div class=\"line\">    glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";