var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2016\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2015-10-14\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>hwRefractReflectShader_NV20/hwRefractReflectShader_NV20.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'hw_refract_reflect_shader__n_v20_2hw_refract_reflect_shader__n_v20_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>hwRefractReflectShader_NV20/hwRefractReflectShader_NV20.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">hwRefractReflectShader_NV20/hwRefractReflectShader_NV20.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All </span></div>\n\
<div class=\"line\"><span class=\"comment\">// rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The coded instructions, statements, computer programs, and/or related </span></div>\n\
<div class=\"line\"><span class=\"comment\">// material (collectively the &quot;Data&quot;) in these files contain unpublished </span></div>\n\
<div class=\"line\"><span class=\"comment\">// information proprietary to Autodesk, Inc. (&quot;Autodesk&quot;) and/or its </span></div>\n\
<div class=\"line\"><span class=\"comment\">// licensors, which is protected by U.S. and Canadian federal copyright </span></div>\n\
<div class=\"line\"><span class=\"comment\">// law and by international treaties.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The Data is provided for use exclusively by You. You have the right </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to use, modify, and incorporate this Data into other products for </span></div>\n\
<div class=\"line\"><span class=\"comment\">// purposes authorized by the Autodesk software license agreement, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// without fee.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The copyright notices in the Software and this entire statement, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// including the above license grant, this restriction and the </span></div>\n\
<div class=\"line\"><span class=\"comment\">// following disclaimer, must be included in all copies of the </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Software, in whole or in part, and all derivative works of </span></div>\n\
<div class=\"line\"><span class=\"comment\">// the Software, unless such copies or derivative works are solely </span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the form of machine-executable object code generated by a </span></div>\n\
<div class=\"line\"><span class=\"comment\">// source language processor.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND. </span></div>\n\
<div class=\"line\"><span class=\"comment\">// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED </span></div>\n\
<div class=\"line\"><span class=\"comment\">// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF </span></div>\n\
<div class=\"line\"><span class=\"comment\">// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR </span></div>\n\
<div class=\"line\"><span class=\"comment\">// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR </span></div>\n\
<div class=\"line\"><span class=\"comment\">// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS </span></div>\n\
<div class=\"line\"><span class=\"comment\">// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK </span></div>\n\
<div class=\"line\"><span class=\"comment\">// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY </span></div>\n\
<div class=\"line\"><span class=\"comment\">// OR PROBABILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// NOTE: PLEASE READ THE README.TXT FILE FOR INSTRUCTIONS ON</span></div>\n\
<div class=\"line\"><span class=\"comment\">// COMPILING AND USAGE REQUIREMENTS.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION: NV20-specific (Geforce3) sample shader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//              This shader produces reflection and refraction effects.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This shader builds on the foundation demonstrated in the hwUnlitShader.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable : 4786 )       // Disable stupid STL warnings.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnTypedAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnStringData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MSceneMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MQuaternion.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEulerRotation.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;GL/gl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;GL/glext.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Include NVIDIA&#39;s helper libraries.  These libraries have</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright info in them so we cannot release them but we</span></div>\n\
<div class=\"line\"><span class=\"comment\">// can use them to verify that the API works correctly.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define GLH_EXT_SINGLE_FILE</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;glh_extensions.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#undef GL_NV_vertex_array_range</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;glh_genext.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;glh_obs.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>glh;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;hwRefractReflectShader_NV20.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;ShadingConnection.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> hwRefractReflectShader_NV20::id( 0x00105445 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::postConstructor( )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    setMPSafe(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Static attribute instances.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwRefractReflectShader_NV20::color;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwRefractReflectShader_NV20::colorR;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwRefractReflectShader_NV20::colorG;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwRefractReflectShader_NV20::colorB;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwRefractReflectShader_NV20::refractionIndex;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>  hwRefractReflectShader_NV20::reflectivity;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The Vertex Program for the reflection&amp;refraction shading effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CONSTANTS:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  0- 3    4x4 ModelView-Projection composite matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  4- 7    4x4 ModelView   inverseTranspose matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  8- 11   4x4 ModelView   matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  12-15   4x4 Texture     matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 58   refraction index [rIdx, rIdx*rIdx, 0.0, 0.0]</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 59   camera position in eye space [0.0, 0.0, 0.0, 1.0]  </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      (camera could be offseted if necessary, should work but untested)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 64   misc constants [0.0, 1.0, 2.0, 3.0]</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// VERTEX REGISTERS (mapped so that standard gl calls work):</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 0 - coord</span></div>\n\
<div class=\"line\"><span class=\"comment\">// 2 - normal</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// RESULTS:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// texcoord0    (Refraction coords in eye-space)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// texcoord1    (Reflection coords in eye-space)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">char</span> vertexProgramString[] = </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;!!VP1.0 # Refraction and Reflection\\n&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Multiply the vertex coords by the GL_MODELVIEW_PROJECTION</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// composite matrix, to get clip space coordinates.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    o[HPOS].x, c[0], v[OPOS];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    o[HPOS].y, c[1], v[OPOS];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    o[HPOS].z, c[2], v[OPOS];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    o[HPOS].w, c[3], v[OPOS];&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// =====================================================</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// The rest of the computations are done in the eyeSpace</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// =====================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Transform, vertex position to eye space, with the MODELVIEW matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    R9.x, c[8],  v[OPOS];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    R9.y, c[9],  v[OPOS];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    R9.z, c[10], v[OPOS];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP4    R9.w, c[11], v[OPOS];&quot;</span>      <span class=\"comment\">// R9 = eye space Position of this vertex</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Using the inverseTranspose of the MODELVIEW matrix,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// transform the vertex normal to eye space and normalize it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R0.x, c[4], v[NRML];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R0.y, c[5], v[NRML];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R0.z, c[6], v[NRML];&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R11.w, R0, R0;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ    R11.w, R11.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL    R11, R0, R11.w;&quot;</span>            <span class=\"comment\">// R11 = normalized normal vector in the eyeSpace</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Compute the &#39;vertex-&gt;eye&#39; vector and normalize it</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD    R0, -R9, c[59];&quot;</span>            <span class=\"comment\">// c[59] = eye position in eye space (0,0,0,1)</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R8.w, R0, R0;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ    R8.w, R8.w;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL    R8, R0, R8.w;&quot;</span>              <span class=\"comment\">// R8 = the eye/incident vector (I)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Calculate REFRACTION: Renderman style</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// float    eta;    // the refraction index value</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// float    IdotN = I.N;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// float    k = 1 - eta*eta*(1 - IdotN*IdotN);</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// return   k &lt; 0 ? (0,0,0) : eta*I - (eta*IdotN + sqrt(k))*N;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R0.x, R11, -R8;&quot;</span>                <span class=\"comment\">// R0 = N.I</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD    R1.x, -R0.x, R0.x, c[64].y;&quot;</span>    <span class=\"comment\">// R1.x = (1 - IdotN * IdotN)       == SQR( sin(Ti) )</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL    R1.x, R1.x, c[58].y;&quot;</span>           <span class=\"comment\">// R1.x = R1.x * eta*eta</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;ADD    R1.x, c[64].y, -R1.x;&quot;</span>          <span class=\"comment\">// R1.x = (1 - (R1.x * eta * eta) ) == 1 - SQR( eta * sin(Ti) )</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RSQ    R2.x, R1.x;&quot;</span>                    <span class=\"comment\">// R2.x = 1 / SQRT(R1.x)</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;RCP    R2.x, R2.x;&quot;</span>                    <span class=\"comment\">// R2.x = cos(Tr) = SQRT(R1.x)  &lt;=== OK</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD    R2.x, c[58].x, R0.x, R2.x;&quot;</span>     <span class=\"comment\">// R2.x = eta*(IdotN) + cos(Tr)</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL    R2, R11, R2.x;&quot;</span>                 <span class=\"comment\">// R2 = N * R2.x</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD    R2, c[58].x, -R8, R2;&quot;</span>          <span class=\"comment\">// R2 is the refracted ray direction</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Transform refracted ray by cubemap transform (texture matrix)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    o[TEX0].x, c[12], R2;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    o[TEX0].y, c[13], R2;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    o[TEX0].z, c[14], R2;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Calculate REFLECTION in cubeMap space</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MUL    R0, R11, c[64].z;&quot;</span>      <span class=\"comment\">// R0   = 2*N</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    R3.w, R11, R8;&quot;</span>         <span class=\"comment\">// R3.w = N.dot.I</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;MAD    R3, R3.w, R0, -R8;&quot;</span>     <span class=\"comment\">// R3   = 2*N*(N.dot.I) - I</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Transform reflected ray by cubemap transform (texture matrix)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    o[TEX1].x, c[12], R3;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    o[TEX1].y, c[13], R3;&quot;</span></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;DP3    o[TEX1].z, c[14], R3;&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"stringliteral\">&quot;END&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> initVertexProgram(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> vertexProgramCode[], GLuint* pVertexProgramId)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Allocate and initialize the vertex program.</span></div>\n\
<div class=\"line\">    glGenProgramsNV(1, pVertexProgramId);</div>\n\
<div class=\"line\">    GLenum error = glGetError();</div>\n\
<div class=\"line\">    assert(error == GL_NO_ERROR);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Load the program.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> length = strlen(vertexProgramCode);</div>\n\
<div class=\"line\">    glLoadProgramNV(GL_VERTEX_PROGRAM_NV, *pVertexProgramId, length, </div>\n\
<div class=\"line\">        (<span class=\"keyword\">const</span> GLubyte *) vertexProgramCode);</div>\n\
<div class=\"line\">    error = glGetError();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If an error occured, find the location in the vertex program</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// code and assert.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (error != GL_NO_ERROR)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If an error occured, it&#39;s most likely due to a syntax or </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// logic error in the vertex program. The error position</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// below will contain the index in the vertex program</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// string that is faulty. See the NV_vertex_program</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// extension specification for more details.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (error == GL_INVALID_OPERATION)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> error_position = -2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glGetIntegerv(GL_PROGRAM_ERROR_POSITION_NV, &amp;error_position);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Most likely a bug in the vertex program code...</span></div>\n\
<div class=\"line\">            assert(0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Load the vertexProgram and fill in the necessary constants used in the vertex program.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::loadVertexProgramGL( <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    view.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Don&#39;t load/initialize the vertex program more than once.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vertex_program_id == 0) </div>\n\
<div class=\"line\">            initVertexProgram(vertexProgramString, &amp;vertex_program_id);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Set up the constant values.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// CONSTANTS:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  0- 3    4x4 ModelView-Projection composite matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  4- 7    4x4 ModelView   inverseTranspose matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  8- 11   4x4 ModelView   matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  12-15   4x4 Texture     matrix</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        glTrackMatrixNV(GL_VERTEX_PROGRAM_NV, 0,  GL_MODELVIEW_PROJECTION_NV, GL_IDENTITY_NV);</div>\n\
<div class=\"line\">        glTrackMatrixNV(GL_VERTEX_PROGRAM_NV, 4,  GL_MODELVIEW,               GL_INVERSE_TRANSPOSE_NV);</div>\n\
<div class=\"line\">        glTrackMatrixNV(GL_VERTEX_PROGRAM_NV, 8,  GL_MODELVIEW,               GL_IDENTITY_NV);</div>\n\
<div class=\"line\">        glTrackMatrixNV(GL_VERTEX_PROGRAM_NV, 12, GL_TEXTURE,                 GL_IDENTITY_NV);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> rIdx = fRefractionIndex;</div>\n\
<div class=\"line\">        glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 58, rIdx, rIdx*rIdx, 0.0, 0.0);    <span class=\"comment\">// refraction index</span></div>\n\
<div class=\"line\">        glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 59, 0.0, 0.0, 0.0, 1.0);           <span class=\"comment\">// eye position</span></div>\n\
<div class=\"line\">        glProgramParameter4fNV(GL_VERTEX_PROGRAM_NV, 64, 0.0, 1.0, 2.0, 3.0);           <span class=\"comment\">// misc constants</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    view.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Load the file textures for the cube maps.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwRefractReflectShader_NV20::loadTextures(<span class=\"keyword\">const</span> <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the cube map file names</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>    decalNames;</div>\n\
<div class=\"line\">    <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>         decalName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find the cubemap textures by tracing through the connection from the color atttribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    ShadingConnection   colorConnection(thisMObject(), request.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html#a29c5fd43c9e42c958ae3455eba8e3e8e\">multiPath</a>().<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a6e9ba8c60415451d03d26e01accaca81\">partialPathName</a>(), <span class=\"stringliteral\">&quot;color&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the color attribute is ultimately connected to a environment, </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// find its filenames, otherwise use the default color texture.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> gotAllEnvironmentMaps = TRUE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (colorConnection.type() == ShadingConnection::TEXTURE &amp;&amp;</div>\n\
<div class=\"line\">        colorConnection.texture().hasFn(<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ab824bea4f4d7b08318294cbab187f8af\">MFn::kEnvCube</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the filenames of the texture.</span></div>\n\
<div class=\"line\">        <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> textureNode(colorConnection.texture());</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attributeName;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> envNames[6] = { <span class=\"stringliteral\">&quot;top&quot;</span>, <span class=\"stringliteral\">&quot;bottom&quot;</span>, <span class=\"stringliteral\">&quot;left&quot;</span>, <span class=\"stringliteral\">&quot;right&quot;</span>, <span class=\"stringliteral\">&quot;front&quot;</span>, <span class=\"stringliteral\">&quot;back&quot;</span> };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Scan for connected file textures to the environment map node</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;6; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            ShadingConnection conn(colorConnection.texture(), request.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html#a29c5fd43c9e42c958ae3455eba8e3e8e\">multiPath</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a6e9ba8c60415451d03d26e01accaca81\">partialPathName</a>(), </div>\n\
<div class=\"line\">                            envNames[i]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (conn.type() == ShadingConnection::TEXTURE &amp;&amp;</div>\n\
<div class=\"line\">                conn.texture().hasFn(<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ac3bee92500cdc3a4ccbec4cb35e91f2a\">MFn::kFileTexture</a>))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> envNode(conn.texture());</div>\n\
<div class=\"line\">                <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> filenamePlug( conn.texture(), envNode.attribute(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;fileTextureName&quot;</span>)) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                filenamePlug.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a64f7093bfde5c5eb9d89b32635b772aa\">getValue</a>(decalName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (decalName.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == 0)    decalName = <span class=\"stringliteral\">&quot;internalDefaultTexture&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Append next environment map name</span></div>\n\
<div class=\"line\">                decalNames.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( decalName );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// If any of the environment maps are not mapped put in a fake texture</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                decalName = <span class=\"stringliteral\">&quot;internalDefaultTexture&quot;</span>;</div>\n\
<div class=\"line\">                decalNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( decalName );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Put in a fake texture for each side</span></div>\n\
<div class=\"line\">        decalName = <span class=\"stringliteral\">&quot;internalDefaultTexture&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;6; i++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            decalNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>( decalName );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Reload cube maps if the name of the textures</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for any of the cube maps changes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> reload = FALSE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i&lt;6; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (currentTextureNames[i] != decalNames[i])</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            reload = TRUE;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( reload )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ypTexName(decalNames[0]);   <span class=\"comment\">// y+ == top</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> ynTexName(decalNames[1]);   <span class=\"comment\">// y- == bottom</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> xpTexName(decalNames[2]);   <span class=\"comment\">// x+ == left</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> xnTexName(decalNames[3]);   <span class=\"comment\">// x- == right</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> zpTexName(decalNames[4]);   <span class=\"comment\">// z+ == front</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> znTexName(decalNames[5]);   <span class=\"comment\">// z- == back</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (! (stat = theImage_XP.readFromFile(xpTexName)) )    <span class=\"keywordflow\">return</span> <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (! (stat = theImage_XN.readFromFile(xnTexName)) )    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (! (stat = theImage_YP.readFromFile(ypTexName)) )    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (! (stat = theImage_YN.readFromFile(ynTexName)) )    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (! (stat = theImage_ZP.readFromFile(zpTexName)) )    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (! (stat = theImage_ZN.readFromFile(znTexName)) )    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Only create texture names the first time</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fTextureName == -1)     glGenTextures(1, &amp;fTextureName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glBindTexture( GL_TEXTURE_CUBE_MAP_ARB, fTextureName );</div>\n\
<div class=\"line\">            glEnable( GL_TEXTURE_CUBE_MAP_ARB );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// The cubeMap textures have to have the same size</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, height;</div>\n\
<div class=\"line\">            stat = theImage_XP.getSize( width, height );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB,</div>\n\
<div class=\"line\">                0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, theImage_XP.pixels() );</div>\n\
<div class=\"line\">            glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB,</div>\n\
<div class=\"line\">                0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, theImage_XN.pixels() );</div>\n\
<div class=\"line\">            glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB,</div>\n\
<div class=\"line\">                0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, theImage_YP.pixels() );</div>\n\
<div class=\"line\">            glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB,</div>\n\
<div class=\"line\">                0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, theImage_YN.pixels() );</div>\n\
<div class=\"line\">            glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB,</div>\n\
<div class=\"line\">                0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, theImage_ZP.pixels() );</div>\n\
<div class=\"line\">            glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB,</div>\n\
<div class=\"line\">                0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, theImage_ZN.pixels() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_CUBE_MAP_ARB, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_CUBE_MAP_ARB, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_CUBE_MAP_ARB, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_CUBE_MAP_EXT, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</div>\n\
<div class=\"line\">            glTexParameteri(GL_TEXTURE_CUBE_MAP_EXT, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</div>\n\
<div class=\"line\">            glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i=0; i&lt;6; i++)     currentTextureNames[i] = decalNames[i];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// stage 0 -- cubeMap texture for the refraction</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        glActiveTextureARB( GL_TEXTURE0_ARB );</div>\n\
<div class=\"line\">        glBindTexture( GL_TEXTURE_CUBE_MAP_ARB, fTextureName );</div>\n\
<div class=\"line\">        glEnable( GL_TEXTURE_CUBE_MAP_ARB );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// stage 1 -- cubeMap texture for the reflection</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        glActiveTextureARB( GL_TEXTURE1_ARB );</div>\n\
<div class=\"line\">        glBindTexture( GL_TEXTURE_CUBE_MAP_ARB, fTextureName );</div>\n\
<div class=\"line\">        glEnable( GL_TEXTURE_CUBE_MAP_ARB );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize the register combiners setting</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>    hwRefractReflectShader_NV20::initCombiners(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Use only the 1st stage of the register combiner stages</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        glCombinerParameteriNV(GL_NUM_GENERAL_COMBINERS_NV, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> refractivity[4], reflectivity[4];</div>\n\
<div class=\"line\">            refractivity[0] = refractivity[1] = refractivity[2] = refractivity[3] = 1.0f - fReflectivity;</div>\n\
<div class=\"line\">            reflectivity[0] = reflectivity[1] = reflectivity[2] = reflectivity[3] = fReflectivity;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            glCombinerParameterfvNV(GL_CONSTANT_COLOR0_NV, refractivity);</div>\n\
<div class=\"line\">            glCombinerParameterfvNV(GL_CONSTANT_COLOR1_NV, reflectivity);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// combiner 0</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a*b+c*d</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// a is from the refractive color</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// c is from the refrlective texture</span></div>\n\
<div class=\"line\">        glCombinerInputNV(GL_COMBINER0_NV, GL_RGB, GL_VARIABLE_A_NV, GL_TEXTURE0_ARB, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        glCombinerInputNV(GL_COMBINER0_NV, GL_RGB, GL_VARIABLE_B_NV, GL_CONSTANT_COLOR0_NV, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        glCombinerInputNV(GL_COMBINER0_NV, GL_RGB, GL_VARIABLE_C_NV, GL_TEXTURE1_ARB, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        glCombinerInputNV(GL_COMBINER0_NV, GL_RGB, GL_VARIABLE_D_NV, GL_CONSTANT_COLOR1_NV, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// output:</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum)</span></div>\n\
<div class=\"line\">        glCombinerOutputNV(GL_COMBINER0_NV, GL_RGB, GL_DISCARD_NV, GL_DISCARD_NV, GL_SPARE0_NV, GL_NONE, GL_NONE, GL_FALSE, GL_FALSE, GL_FALSE);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// final combiner</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// output: Frgb = A*B + (1-A)*C + D</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (variable, input, mapping, componentUsage);</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Just pass through the D variable</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        glFinalCombinerInputNV(GL_VARIABLE_A_NV, GL_ZERO, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        glFinalCombinerInputNV(GL_VARIABLE_B_NV, GL_ZERO, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        glFinalCombinerInputNV(GL_VARIABLE_C_NV, GL_ZERO, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">        glFinalCombinerInputNV(GL_VARIABLE_D_NV, GL_SPARE0_NV, GL_UNSIGNED_IDENTITY_NV, GL_RGB);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Load the textures, update the necessary variable values, initialize register combiners,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// save and load the matrices with the proper values</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwRefractReflectShader_NV20::preDraw(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stat = loadTextures( request, view);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> != stat )      <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get the reflectivity value</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   tPlug(thisMObject(), reflectivity);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( tPlug.getValue( fReflectivity ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fReflectivity &lt; 0.01f ) fReflectivity = 0.01f;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( fReflectivity &gt; 1.0f )  fReflectivity = 1.0f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>    fReflectivity = 0.5f;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// get the refraction index value</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>   rPlug(thisMObject(), refractionIndex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( rPlug.getValue( fRefractionIndex ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fRefractionIndex &lt; 1.0f )  fRefractionIndex = 1.0f;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( fRefractionIndex &gt; 2.0f )  fRefractionIndex = 2.0f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>    fRefractionIndex = 1.0f;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    initCombiners( request, view );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Compute the camera rotation angle and axis</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>    cameraPath;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     status = view.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a5e6ea41ec1bab5ed980b2ddffe398a73\">getCamera</a>( cameraPath );</div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>     mmatrix = cameraPath.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a229ff721947ec3ded47b5a071a7311ec\">inclusiveMatrix</a>( &amp;status );</div>\n\
<div class=\"line\">    <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> tmatrix( mmatrix );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html\">MQuaternion</a> camRotation = tmatrix.rotation();</div>\n\
<div class=\"line\">    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a>     camAxis;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>      camTheta;</div>\n\
<div class=\"line\">    camRotation.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_quaternion.html#a5a7e08bad23c091c68ff4b4ddd3fba90\">getAxisAngle</a>(  camAxis, camTheta );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert to degrees from radians</span></div>\n\
<div class=\"line\">    camTheta *= 57.295779513082320876798154814105;  <span class=\"comment\">// == (180 / M_PI)</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">        glMatrixMode( GL_TEXTURE );</div>\n\
<div class=\"line\">        glPushMatrix();</div>\n\
<div class=\"line\">        glLoadIdentity();</div>\n\
<div class=\"line\">        glScalef(1.0, -1.0, 1.0);</div>\n\
<div class=\"line\">        glRotated( camTheta, camAxis[0], camAxis[1], camAxis[2]);</div>\n\
<div class=\"line\">        glMatrixMode( GL_MODELVIEW );</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwRefractReflectShader_NV20::geometry( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp;        view,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             prim,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    writable,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             indexCount,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> * indexArray,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             vertexCount,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> *     vertexIDs,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> *   vertexArray,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             normalCount,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> **  normalArrays,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             colorCount,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> **  colorArrays,</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>             texCoordCount,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> **  texCoordArrays)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// We assume triangles here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( prim != GL_TRIANGLES )      <span class=\"keywordflow\">return</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Save the current states of the openGL attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">        glPushAttrib( GL_ALL_ATTRIB_BITS );</div>\n\
<div class=\"line\">        glPushClientAttrib(GL_CLIENT_VERTEX_ARRAY_BIT);</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> preDrawStatus = preDraw( request, view );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> == preDrawStatus )</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        loadVertexProgramGL( view );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            glEnable(GL_REGISTER_COMBINERS_NV);</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Load, bind and enable the vertex program</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            glBindProgramNV(GL_VERTEX_PROGRAM_NV, vertex_program_id);</div>\n\
<div class=\"line\">            glEnable(GL_VERTEX_PROGRAM_NV);</div>\n\
<div class=\"line\">            {               </div>\n\
<div class=\"line\">                <span class=\"comment\">// VERTEX REGISTERS (Attributes):</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// 0 - coord</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// 2 - normal</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                glVertexAttribPointerNV( 0, 3, GL_FLOAT, 0, vertexArray );</div>\n\
<div class=\"line\">                glVertexAttribPointerNV( 2, 3, GL_FLOAT, 0, normalArrays[0] );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                glEnableClientState( GL_VERTEX_ATTRIB_ARRAY0_NV );</div>\n\
<div class=\"line\">                glEnableClientState( GL_VERTEX_ATTRIB_ARRAY2_NV );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, indexArray);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                glDisableClientState( GL_VERTEX_ATTRIB_ARRAY0_NV );</div>\n\
<div class=\"line\">                glDisableClientState( GL_VERTEX_ATTRIB_ARRAY2_NV );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            glDisable(GL_VERTEX_PROGRAM_NV);</div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            glDisable(GL_REGISTER_COMBINERS_NV);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        postDraw( request, view );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore the openGL attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">        glPopClientAttrib();</div>\n\
<div class=\"line\">        glPopAttrib();</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> preDrawStatus;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Retore the openGL matrices and the openGL texture objects states</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwRefractReflectShader_NV20::postDraw(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_request.html\">MDrawRequest</a>&amp; request,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html\">M3dView</a>&amp; view )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#a0e318e5634c7aaf31c4eb7232d2013d4\">beginGL</a>();</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        glMatrixMode( GL_TEXTURE );</div>\n\
<div class=\"line\">        glPopMatrix();</div>\n\
<div class=\"line\">        glMatrixMode( GL_MODELVIEW );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        glActiveTextureARB( GL_TEXTURE1_ARB );</div>\n\
<div class=\"line\">        glBindTexture( GL_TEXTURE_CUBE_MAP_ARB, 0 );</div>\n\
<div class=\"line\">        glDisable(GL_TEXTURE_CUBE_MAP_ARB);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        glActiveTextureARB( GL_TEXTURE0_ARB );</div>\n\
<div class=\"line\">        glBindTexture( GL_TEXTURE_CUBE_MAP_ARB, 0 );</div>\n\
<div class=\"line\">        glDisable(GL_TEXTURE_CUBE_MAP_ARB);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m3d_view.html#ab810c5a46d728df70ff5f44b604559f4\">endGL</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span>     hwRefractReflectShader_NV20::normalsPerVertex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span>     hwRefractReflectShader_NV20::texCoordsPerVertex()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize the necessary OpenGL extensions</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::init_ext(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> * ext)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!glh_init_extension(ext))</div>\n\
<div class=\"line\">    { cerr &lt;&lt; <span class=\"stringliteral\">&quot;Failed to initialize &quot;</span> &lt;&lt; ext &lt;&lt; <span class=\"stringliteral\">&quot;!&quot;</span> &lt;&lt; endl; exit(0); }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The constructor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">hwRefractReflectShader_NV20::hwRefractReflectShader_NV20()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get an reference to the singleton texture cache.</span></div>\n\
<div class=\"line\">    m_pTextureCache = MTextureCache::instance();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    init_ext(<span class=\"stringliteral\">&quot;GL_ARB_multitexture&quot;</span>);</div>\n\
<div class=\"line\">    init_ext(<span class=\"stringliteral\">&quot;GL_NV_register_combiners&quot;</span>);</div>\n\
<div class=\"line\">    init_ext(<span class=\"stringliteral\">&quot;GL_NV_vertex_program&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize the cubeMap texture names</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    fTextureName = -1;</div>\n\
<div class=\"line\">    currentTextureNames[0] = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    currentTextureNames[1] = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    currentTextureNames[2] = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    currentTextureNames[3] = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    currentTextureNames[4] = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    currentTextureNames[5] = <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize callbacks.</span></div>\n\
<div class=\"line\">    fBeforeNewCB = 0;</div>\n\
<div class=\"line\">    fBeforeOpenCB = 0;</div>\n\
<div class=\"line\">    fBeforeRemoveReferenceCB = 0;</div>\n\
<div class=\"line\">    fMayaExitingCB = 0;</div>\n\
<div class=\"line\">    attachSceneCallbacks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    vertex_program_id = 0;      <span class=\"comment\">// handle for the Vertex Program</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">hwRefractReflectShader_NV20::~hwRefractReflectShader_NV20()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    detachSceneCallbacks();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> releaseVertexProgram(GLuint* pVertexProgramId)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// If the vertex program id is set...</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*pVertexProgramId &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Unbind any vertex program...</span></div>\n\
<div class=\"line\">        glBindProgramNV(GL_VERTEX_PROGRAM_NV, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        glDeleteProgramsNV(1, pVertexProgramId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// For sanity, set the id to 0.</span></div>\n\
<div class=\"line\">        *pVertexProgramId = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::releaseEverything()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fTextureName != -1) glDeleteTextures(1, &amp;fTextureName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    releaseVertexProgram(&amp;vertex_program_id);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Release the texture cache through refcounting.</span></div>\n\
<div class=\"line\">    m_pTextureCache-&gt;release();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(!MTextureCache::getReferenceCount())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureCache = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::attachSceneCallbacks()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    fBeforeNewCB  = <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaaf261bc0d5929af12c193ee3c6e451349\">MSceneMessage::kBeforeNew</a>,  releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    fBeforeOpenCB = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaac4fe9e5e85e4e962ca0366226b012d6f\">MSceneMessage::kBeforeOpen</a>, releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    fBeforeRemoveReferenceCB = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa2f6e3664b31d62f64c1b3c68d6373f26\">MSceneMessage::kBeforeRemoveReference</a>, </div>\n\
<div class=\"line\">                                                          releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    fMayaExitingCB = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a0f4760368de3989378ce9cec3943ae6d\">MSceneMessage::addCallback</a>(<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_scene_message.html#a4f09127c805cc1f5ee20e67db7b45efaa1efff7ad75eeef5a2ac9e3c0e890dbd0\">MSceneMessage::kMayaExiting</a>, releaseCallback, <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::releaseCallback(<span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    hwRefractReflectShader_NV20 *pThis = (hwRefractReflectShader_NV20*) clientData;</div>\n\
<div class=\"line\">    pThis-&gt;releaseEverything();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> hwRefractReflectShader_NV20::detachSceneCallbacks()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fBeforeNewCB)               <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fBeforeNewCB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fBeforeOpenCB)              <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fBeforeOpenCB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fBeforeRemoveReferenceCB)   <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fBeforeRemoveReferenceCB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fMayaExitingCB)             <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(fMayaExitingCB);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fBeforeNewCB = 0;</div>\n\
<div class=\"line\">    fBeforeOpenCB = 0;</div>\n\
<div class=\"line\">    fBeforeRemoveReferenceCB = 0;</div>\n\
<div class=\"line\">    fMayaExitingCB = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> UserClassify( <span class=\"stringliteral\">&quot;shader/surface/utility&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;4.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    status = plugin.registerNode( <span class=\"stringliteral\">&quot;hwRefractReflectShader_NV20&quot;</span>, hwRefractReflectShader_NV20::id, </div>\n\
<div class=\"line\">                                  hwRefractReflectShader_NV20::creator, hwRefractReflectShader_NV20::initialize,</div>\n\
<div class=\"line\">                                  <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7aee2b86760284068eef3c463f9de9babc\">MPxNode::kHwShaderNode</a>, &amp;UserClassify );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a>   plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterNode( hwRefractReflectShader_NV20::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> * hwRefractReflectShader_NV20::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> hwRefractReflectShader_NV20();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize the plug-in. Called once when the plug-in is loaded.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This mostly involve creating attributes.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwRefractReflectShader_NV20::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> nAttr; </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_typed_attribute.html\">MFnTypedAttribute</a> sAttr; <span class=\"comment\">// For string attributes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create input attributes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    colorR = nAttr.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;colorR&quot;</span>, <span class=\"stringliteral\">&quot;cr&quot;</span>,<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    colorG = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;colorG&quot;</span>, <span class=\"stringliteral\">&quot;cg&quot;</span>,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.5f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    colorB = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;colorB&quot;</span>, <span class=\"stringliteral\">&quot;cb&quot;</span>,<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.5f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    color = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;color&quot;</span>, <span class=\"stringliteral\">&quot;c&quot;</span>, colorR, colorG, colorB);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.0f, 0.5f, 0.5f);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a4a44548ca2e5b1e7613a992a6b96a147\">setUsedAsColor</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    refractionIndex = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;refractionIndex&quot;</span>, <span class=\"stringliteral\">&quot;ri&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(2.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(1.1f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    reflectivity = nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>( <span class=\"stringliteral\">&quot;reflectivity&quot;</span>, <span class=\"stringliteral\">&quot;rfl&quot;</span>, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a5686197bafb177bdc82550848416a1ad\">MFnNumericData::kFloat</a>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a9e68a8b4af016b37f6567cfa6d68e551\">setKeyable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aba21b33176bb831de026b78605c1dcf3\">setMin</a>(0.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#adab95fd85497b1dad3a4ba7a842ce9d8\">setMax</a>(1.0f);</div>\n\
<div class=\"line\">    nAttr.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#aae3f2fbbbce06e006f1838a1fb6fdcdd\">setDefault</a>(0.5f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"comment\">// Add the attributes here</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    addAttribute(color);</div>\n\
<div class=\"line\">    addAttribute(refractionIndex);</div>\n\
<div class=\"line\">    addAttribute(reflectivity);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attributeAffects (colorR, outColor);</div>\n\
<div class=\"line\">    attributeAffects (colorG, outColor);</div>\n\
<div class=\"line\">    attributeAffects (colorB, outColor);</div>\n\
<div class=\"line\">    attributeAffects (color,  outColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attributeAffects (refractionIndex,   outColor);</div>\n\
<div class=\"line\">    attributeAffects (reflectivity,   outColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This function gets called by Maya to evaluate the texture.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// See &quot;Writing a shading node plug-in&quot; in the documentation</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for more information.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CAVEAT: This part of the HW shader plug-in is meant to allow</span></div>\n\
<div class=\"line\"><span class=\"comment\">// seamless transition from HW to SW rendering.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Unfortunately, as of 4.0.1 it&#39;s somewhat flaky.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Meanwhile, it is recommended to build two shading networks</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in parallel (one for SW, one for HW) and use MEL scripts</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to switch from one to the other.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> hwRefractReflectShader_NV20::compute(</div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp;      plug,</div>\n\
<div class=\"line\">      <a name=\"_a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block ) </div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"comment\">// Get color and lightModel from the input block.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get UV coordinates from the input block.</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> k = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    k |= (plug==outColor);</div>\n\
<div class=\"line\">    k |= (plug==outColorR);</div>\n\
<div class=\"line\">    k |= (plug==outColorG);</div>\n\
<div class=\"line\">    k |= (plug==outColorB);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( !k ) <span class=\"keywordflow\">return</span> <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a7f858db05022c8bc860d685e13bab6ae\">MS::kUnknownParameter</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> resultColor(0.0,0.0,0.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set ouput color attribute</span></div>\n\
<div class=\"line\">    <a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> outColorHandle = block.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>( outColor );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a>&amp; outColor = outColorHandle.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a5e7d49f6ed0e237f1e9e43b639f06d07\">asFloatVector</a>();</div>\n\
<div class=\"line\">    outColor = resultColor;</div>\n\
<div class=\"line\">    outColorHandle.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a7bdd61b8405188bb547fdba3fddace91\">setClean</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";