var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2017\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2016-06-16\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>cgFx/cgfxShaderCommon.h</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'cg_fx_2cgfx_shader_common_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>cgFx/cgfxShaderCommon.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">cgFx/cgfxShaderCommon.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (C) 2002-2003 NVIDIA </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// File: cgfxShaderCommon.h</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef _cgfxShaderCommon_h_</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define _cgfxShaderCommon_h_</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  pragma warning(disable: 4786)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This header file simply defines some things that I</span></div>\n\
<div class=\"line\"><span class=\"comment\">// want to use throughout the plug-in</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// If assertion is false, throw an InternalError exception.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Note: A Maya MStatus object can be used as the assertion... true means success.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define M_CHECK(assertion)  if (assertion) ; else throw ((cgfxShaderCommon::InternalError*)__LINE__)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef DEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define CGFX_DEBUG 1</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>cgfxShaderCommon</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef _WIN32</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>InternalError;    <span class=\"comment\">// Never defined.  Used like this:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   throw (InternalError*)__LINE__;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>InternalError</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* message;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"comment\">//   throw (InternalError*)__LINE__;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RETURNSTAT(s, msg)  \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    if (!s)                 \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">{                       \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    s.perror(msg);      \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    return s;           \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">}</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define lengthof(array) (sizeof(array) / sizeof(array[0]))</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if !defined(TEXTURES_BY_NAME) &amp;&amp; !defined(TEXTURES_BY_NODE)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  define TEXTURES_BY_NODE 1</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(CGFX_DEBUG) &amp;&amp; defined(_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  ifndef _CRTDBG_MAP_ALLOC</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    define _CRTDBG_MAP_ALLOC</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* CGFX_DEBUG &amp;&amp; _WIN32 */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// We must include &lt;stdlib.h&gt; before &lt;crtdbg.h&gt; or we get</span></div>\n\
<div class=\"line\"><span class=\"comment\">// errors about overloading calloc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  include &lt;crtdbg.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* _WIN32 */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(CGFX_DEBUG2)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  define OutputDebugString(s)          fprintf(stderr, &quot;%s&quot;, s)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  define OutputDebugStrings(s1, s2)    fprintf(stderr, &quot;%s%s\\n&quot;, s1, s2);</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  if defined (_WIN32)</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In optimized mode, send the string to the debugger</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#     define OutputDebugStrings(s1, s2) \\</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    (OutputDebugString(s1), OutputDebugString(s2), OutputDebugString(&quot;\\n&quot;))</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    define OutputDebugString(s)        ((void) 0)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    define OutputDebugStrings(s1, s2)  ((void) 0)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* CGFX_DEBUG */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Return true if item is found in Maya array.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"keyword\">typename</span> Tarray, <span class=\"keyword\">typename</span> Titem &gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">arrayContains( <span class=\"keyword\">const</span> Tarray&amp; array, <span class=\"keyword\">const</span> Titem&amp; item )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = array.length(); i &gt; 0; --i )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( array[ i - 1 ] == item )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> i &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Append item to Maya array if not already present.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Returns index of the new or existing array element.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt; <span class=\"keyword\">typename</span> Tarray, <span class=\"keyword\">typename</span> Titem &gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span></div>\n\
<div class=\"line\">findOrAppend( Tarray&amp; array, <span class=\"keyword\">const</span> Titem&amp; item )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> n = array.length();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( i = 0; i &lt; n; ++i )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( array[ i ] == item )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( i == n )</div>\n\
<div class=\"line\">        array.append( item );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> i;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef CGFXSHADER_VERSION  </span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define CGFXSHADER_VERSION  &quot;4.4&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MObject.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(LINUX) &amp;&amp; !defined(GL_GLEXT_PROTOTYPES)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #define GL_GLEXT_PROTOTYPES</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGL.h&gt;</span>   <span class=\"comment\">// OpenGL</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Cg/cg.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(WIN32) || defined(LINUX)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span> *pointer);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> void (* PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, <span class=\"keyword\">const</span> GLvoid *pixels);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;GL/glext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;Cg/cgGL.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The gl Registers</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>glRegister</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        kUnknown,</div>\n\
<div class=\"line\">        kPosition,</div>\n\
<div class=\"line\">        kVertexWeight,</div>\n\
<div class=\"line\">        kNormal,</div>\n\
<div class=\"line\">        kColor,</div>\n\
<div class=\"line\">        kSecondaryColor,</div>\n\
<div class=\"line\">        kFogCoord,</div>\n\
<div class=\"line\">        kTexCoord,</div>\n\
<div class=\"line\">        kLastTexCoord = kTexCoord + 7,</div>\n\
<div class=\"line\">        kVertexAttrib,</div>\n\
<div class=\"line\">        kLastVertexAttrib = kVertexAttrib + 15,</div>\n\
<div class=\"line\">        kLast</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A wee cache to minimise our gl state changes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>glStateCache</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">                glStateCache();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  glStateCache&amp; instance() { <span class=\"keywordflow\">return</span> gInstance; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> reset() { fRequiredRegisters = 0; fEnabledRegisters = 0; fActiveTextureUnit = -1; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>        flushState();</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> disableAll();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> enablePosition();</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> enableNormal();</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> disableNormal();</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> enableColor();</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> enableSecondaryColor();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>        activeTexture( <span class=\"keywordtype\">int</span> i);</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> enableAndActivateTexCoord( <span class=\"keywordtype\">int</span> i);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>        enableVertexAttrib( <span class=\"keywordtype\">int</span> i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span>  sMaxTextureUnits;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// GL extensions</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTexture;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointer;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArray;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArray;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4f;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointer;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3f;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> glStateCache gInstance;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span>    fRequiredRegisters;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span>    fEnabledRegisters;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>     fActiveTextureUnit;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::disableAll() { fRequiredRegisters = 0; flushState(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::enablePosition() { <span class=\"keywordflow\">if</span>( !(fEnabledRegisters &amp; (1 &lt;&lt; glRegister::kPosition))) { glEnableClientState(GL_VERTEX_ARRAY); fEnabledRegisters |= (1 &lt;&lt; glRegister::kPosition); } fRequiredRegisters |= (1 &lt;&lt; glRegister::kPosition); }</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::enableNormal() { <span class=\"keywordflow\">if</span>( !(fEnabledRegisters &amp; (1 &lt;&lt; glRegister::kNormal))) { glEnableClientState(GL_NORMAL_ARRAY); fEnabledRegisters |= (1 &lt;&lt; glRegister::kNormal); } fRequiredRegisters |= (1 &lt;&lt; glRegister::kNormal); }</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::disableNormal() { <span class=\"keywordflow\">if</span>( fEnabledRegisters &amp; (1 &lt;&lt; glRegister::kNormal)) { glDisableClientState(GL_NORMAL_ARRAY); fEnabledRegisters &amp;= ~(1 &lt;&lt; glRegister::kNormal); } fRequiredRegisters &amp;= ~(1 &lt;&lt; glRegister::kNormal); }</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::enableColor() { <span class=\"keywordflow\">if</span>( !(fEnabledRegisters &amp; (1 &lt;&lt; glRegister::kColor))) { glEnableClientState(GL_COLOR_ARRAY); fEnabledRegisters |= (1 &lt;&lt; glRegister::kColor); }  fRequiredRegisters |= (1 &lt;&lt; glRegister::kColor); }</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::enableSecondaryColor() { <span class=\"keywordflow\">if</span>( !(fEnabledRegisters &amp; (1 &lt;&lt; glRegister::kSecondaryColor))) { glEnableClientState(GL_SECONDARY_COLOR_ARRAY_EXT); fEnabledRegisters |= (1 &lt;&lt; glRegister::kSecondaryColor); }  fRequiredRegisters |= (1 &lt;&lt; glRegister::kSecondaryColor); }</div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> glStateCache::enableAndActivateTexCoord( <span class=\"keywordtype\">int</span> i) { activeTexture( i); <span class=\"keywordflow\">if</span>( !(fEnabledRegisters &amp; (1 &lt;&lt; (glRegister::kTexCoord + i)))) { glEnableClientState(GL_TEXTURE_COORD_ARRAY); fEnabledRegisters |= (1 &lt;&lt; (glRegister::kTexCoord + i)); } fRequiredRegisters |= (1 &lt;&lt; (glRegister::kTexCoord + i)); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* _cgfxShaderCommon_h */</span><span class=\"preprocessor\"></span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";