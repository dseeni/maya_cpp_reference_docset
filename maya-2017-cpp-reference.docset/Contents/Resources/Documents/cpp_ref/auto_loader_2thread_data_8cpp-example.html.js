var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2017\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2016-06-16\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>autoLoader/threadData.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'auto_loader_2thread_data_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>autoLoader/threadData.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">autoLoader/threadData.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Copyright 2012 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Use of this software is subject to the terms of the Autodesk license </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  agreement provided at the time of installation or download, or which </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  otherwise accompanies this software in either electronic or hard copy form.   </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;StdAfx.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if !defined( OSWin_ )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unistd.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;threadData.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MCommonSystemUtils.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span> <span class=\"keyword\">volatile</span> <span class=\"keywordtype\">bool</span> threadData::bThreadToExecute =true ;</div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span> <span class=\"keyword\">volatile</span> <span class=\"keywordtype\">bool</span> threadData::bWaitingForCommand =false ;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> threadData tdata ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>_threadData *threadData::getThreadData () {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (&amp;tdata) ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Compute function. This function is called from multiple asynchronous threads</span></div>\n\
<div class=\"line\">MThreadRetVal threadData::AsyncModuleThread (<span class=\"keywordtype\">void</span> *data) {</div>\n\
<div class=\"line\">    threadData *myData =(threadData *)data ;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ( threadData::bThreadToExecute ) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> ithreadDataDelay =threadDataDelayDefault ;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> *val =getenv (threadDataDelayName) ;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( val != NULL &amp;&amp; *val != _T(<span class=\"charliteral\">&#39;\\0&#39;</span>) )</div>\n\
<div class=\"line\">            ithreadDataDelay =atoi (val) ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        MModuleLogic::ModuleDetectionLogicCmdExecute (myData) ;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32) || defined(_WIN64)</span></div>\n\
<div class=\"line\">        Sleep (ithreadDataDelay * 1000) ;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        sleep (ithreadDataDelay) ;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (0) ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Variable to track threads. As each thread finishes it&#39;s work it</span></div>\n\
<div class=\"line\"><span class=\"comment\">// increments this variable. The main thread will wait until this</span></div>\n\
<div class=\"line\"><span class=\"comment\">// variable is equal to the thread count, meaning all threads have</span></div>\n\
<div class=\"line\"><span class=\"comment\">// completed their work variable will equal the thread count</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keywordtype\">int</span> g_async_count =0 ;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html\">MSpinLock</a> asyncSpinLock ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Thread completion callback.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Increment thread completion variable. Uses a lock to prevent race</span></div>\n\
<div class=\"line\"><span class=\"comment\">// conditions where two threads attempt to update the variable simultaneously</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> threadData::AsyncModuleThreadEnded (<span class=\"keywordtype\">void</span> *data) {</div>\n\
<div class=\"line\">    asyncSpinLock.<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#aa81aed607133209dade63a226818224d\">lock</a> () ;</div>\n\
<div class=\"line\">    g_async_count++ ;</div>\n\
<div class=\"line\">    asyncSpinLock.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#a9278be8203e1c42e2619179882ae4403\">unlock</a> () ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> threadData::startThread () {</div>\n\
<div class=\"line\">    <span class=\"comment\">// Define Thread Laps as an environment variable</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_common_system_utils.html#a643e73d62a48baed75753399e40761a2\">MCommonSystemUtils::getEnv</a> (threadDataDelayName) == <span class=\"stringliteral\">&quot;&quot;</span> )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_common_system_utils.html#a6f03a81b81232b99467f785bb6fb8b59\">MCommonSystemUtils::putEnv</a> (threadDataDelayName, szthreadDataDelayDefault) ;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Start threads. Each thread makes a call to AsyncModuleThread</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The stopThread function called in uninitializePlugin() waits until </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// all threads have completed (but we got only one here).</span></div>\n\
<div class=\"line\">    threadData::bThreadToExecute =true ;</div>\n\
<div class=\"line\">    threadData::bWaitingForCommand =false ;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> ms =<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_async.html#aad848133155102b2152f346cea3eb7d6\">MThreadAsync::init</a> () ;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ms != <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (ms) ;</div>\n\
<div class=\"line\">    ms =<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_async.html#ad805f347e198954c15fa9c384a2bd5e5\">MThreadAsync::createTask</a> (</div>\n\
<div class=\"line\">        threadData::AsyncModuleThread,</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">void</span> *)threadData::getThreadData (),</div>\n\
<div class=\"line\">        threadData::AsyncModuleThreadEnded,</div>\n\
<div class=\"line\">        NULL</div>\n\
<div class=\"line\">    ) ;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (ms) ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Test if variable matches the expected value. Locks required to</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ensure thread safe access to variables.</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*static*/</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html\">MSpinLock</a> threadData::exchangeSpinLock ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> threadData::Maya_InterlockedCompare (<span class=\"keyword\">volatile</span> <span class=\"keywordtype\">int</span> *variable, <span class=\"keywordtype\">int</span> compareValue) {</div>\n\
<div class=\"line\">    exchangeSpinLock.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_spin_lock.html#aa81aed607133209dade63a226818224d\">lock</a> () ;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rtn =(*variable == compareValue) ;</div>\n\
<div class=\"line\">    exchangeSpinLock.unlock () ;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (rtn) ;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Barrier function. Main thread enters here and polls the count</span></div>\n\
<div class=\"line\"><span class=\"comment\">// variable until all worker threads have indicated they have</span></div>\n\
<div class=\"line\"><span class=\"comment\">// completed by incrementing this count.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> threadData::WaitForAsyncThreads (<span class=\"keywordtype\">int</span> val) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ( !threadData::Maya_InterlockedCompare (&amp;g_async_count, val)) {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32) || defined(_WIN64)</span></div>\n\
<div class=\"line\">        Sleep (0) ;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        sleep (0) ;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> threadData::stopThread () {</div>\n\
<div class=\"line\">    <span class=\"comment\">// Ask the thread to terminate</span></div>\n\
<div class=\"line\">    threadData::bThreadToExecute =false ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Waits until all threads have completed before continuing</span></div>\n\
<div class=\"line\">    threadData::WaitForAsyncThreads (1) ;</div>\n\
<div class=\"line\">    <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_thread_async.html#a23b477d0e2d399f75d585d154c346591\">MThreadAsync::release</a> () ; <span class=\"comment\">// release async thread</span></div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";