var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2017\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2016-06-16\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>D3DViewportRenderer/D3DResourceManager.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_d3_d_viewport_renderer_2_d3_d_resource_manager_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>D3DViewportRenderer/D3DResourceManager.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">D3DViewportRenderer/D3DResourceManager.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(D3D9_SUPPORTED)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning (disable:4239)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;D3DResourceManager.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCamera.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAngle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MBoundingBox.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MNodeMessage.h&gt;</span> <span class=\"comment\">// For monitor geometry list</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLight.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSpotLight.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MColor.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFloatMatrix.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Monitors on Maya scene graph</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Handle node dirty changes</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> geometryDirtyCallback( <span class=\"keywordtype\">void</span>* clientData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GeometryItem *item = (GeometryItem *)clientData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectDirtyMonitor ); </div>\n\
<div class=\"line\">        item-&gt;m_objectDirtyMonitor = 0;</div>\n\
<div class=\"line\">        item-&gt;m_objectPath = <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>(); <span class=\"comment\">// Assign in valid dag path to mark as &quot;bad&quot;</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Handle node attr change </span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> geomteryChangedCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7\">MNodeMessage::AttributeMessage</a> msg, <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; otherPlug, <span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GeometryItem *item = (GeometryItem *)clientData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectChangeMonitor );    </div>\n\
<div class=\"line\">        item-&gt;m_objectChangeMonitor = 0;</div>\n\
<div class=\"line\">        item-&gt;m_objectPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>(); <span class=\"comment\">// Assign in valid dag path to mark as &quot;bad&quot;</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> textureChangedCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a2f710b68ff75e657f3be4b17a9dbe1e7\">MNodeMessage::AttributeMessage</a> msg, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp; otherPlug, <span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TextureItem *item = (TextureItem *)clientData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectChangeMonitor );    </div>\n\
<div class=\"line\">        item-&gt;m_objectChangeMonitor = 0;</div>\n\
<div class=\"line\">        item-&gt;m_mayaNode = <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ae6af14e0aa2c92bdda88c81280e1d122\">MObject::kNullObj</a>; <span class=\"comment\">// Assign in valid dag path to mark as &quot;bad&quot;</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Handle node delete</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> geometryDeleteCallback( <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;node,</div>\n\
<div class=\"line\">                        <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>&amp; modifier,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span>* clientData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GeometryItem *item = (GeometryItem *)clientData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectDeleteMonitor );    </div>\n\
<div class=\"line\">        item-&gt;m_objectDeleteMonitor = 0;</div>\n\
<div class=\"line\">        item-&gt;m_objectPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>(); <span class=\"comment\">// Assign in valid dag path to mark as &quot;bad&quot;</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> textureDeleteCallback( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;node,</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html\">MDGModifier</a>&amp; modifier,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span>* clientData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    TextureItem *item = (TextureItem *)clientData;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectDeleteMonitor );    </div>\n\
<div class=\"line\">        item-&gt;m_objectDeleteMonitor = 0;</div>\n\
<div class=\"line\">        item-&gt;m_mayaNode = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ae6af14e0aa2c92bdda88c81280e1d122\">MObject::kNullObj</a>; <span class=\"comment\">// Assign in valid dag path to mark as &quot;bad&quot;</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">D3DResourceManager::D3DResourceManager()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// All lights are off</span></div>\n\
<div class=\"line\">    m_numberLightsEnabled = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    initializeDefaultCamera();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\">D3DResourceManager::~D3DResourceManager()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> onlyInvalidItems = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    clearResources(onlyInvalidItems, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>                    </div>\n\
<div class=\"line\">D3DResourceManager::initializeDefaultCamera()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the default camera being 10 up and 10 back, with Y-up (to match Maya).</span></div>\n\
<div class=\"line\">    m_camera.m_vEyePt = D3DXVECTOR3( 0.0f, 10.0f, -10.0f );</div>\n\
<div class=\"line\">    m_camera.m_vLookatPt = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );</div>\n\
<div class=\"line\">    m_camera.m_vUpVec = D3DXVECTOR3 ( 0.0f, 1.0f, 0.0f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up default clip planes, and FOV to match Maya&#39;s</span></div>\n\
<div class=\"line\">    m_camera.m_FieldOfView = 45.0f;</div>\n\
<div class=\"line\">    m_camera.m_nearClip = 0.1f;</div>\n\
<div class=\"line\">    m_camera.m_farClip = 1000.0f;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>                    </div>\n\
<div class=\"line\">D3DResourceManager::translateCamera( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;cameraPath )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Translate Maya&#39;s camera </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> translatedCamera = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cameraPath.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a1da4467477df2e6955b9917434a94074\">isValid</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_camera.html\">MFnCamera</a> camera (cameraPath, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !status ) {</div>\n\
<div class=\"line\">            status.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;MFnCamera constructor&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            translatedCamera = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> eyePoint = camera.eyePoint( <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> lookAtPt = camera.centerOfInterestPoint( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">            <a name=\"_a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> upDirection = camera.upDirection ( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">            <a name=\"_a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_matrix.html\">MFloatMatrix</a> projMatrix = camera.projectionMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> horizontalFieldOfView = <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_angle.html\">MAngle</a>( <span class=\"comment\">/* camera.verticalFieldOfView() / */</span> camera.horizontalFieldOfView()</div>\n\
<div class=\"line\">                ).asDegrees();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> nearClippingPlane = camera.nearClippingPlane();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> farClippingPlane = camera.farClippingPlane();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Convert API values to internal native storage.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            m_camera.m_vEyePt = D3DXVECTOR3((<span class=\"keywordtype\">float</span>)eyePoint.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)eyePoint.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, (<span class=\"keywordtype\">float</span>)eyePoint.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">            m_camera.m_vLookatPt = D3DXVECTOR3((<span class=\"keywordtype\">float</span>)lookAtPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)lookAtPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, (<span class=\"keywordtype\">float</span>)lookAtPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">            m_camera.m_vUpVec = D3DXVECTOR3((<span class=\"keywordtype\">float</span>)upDirection.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)upDirection.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>, (<span class=\"keywordtype\">float</span>)upDirection.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">            m_camera.m_FieldOfView = (float)horizontalFieldOfView;</div>\n\
<div class=\"line\">            m_camera.m_nearClip = (float)nearClippingPlane;</div>\n\
<div class=\"line\">            m_camera.m_farClip = (float)farClippingPlane;</div>\n\
<div class=\"line\">            m_camera.m_isOrtho = camera.isOrtho();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        initializeDefaultCamera();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> translatedCamera;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span></div>\n\
<div class=\"line\">D3DResourceManager::enableLights( <span class=\"keywordtype\">bool</span> val, LPDIRECT3DDEVICE9 D3D )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i=0; i&lt;m_numberLightsEnabled; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3D-&gt;LightEnable( i, val);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> D3DResourceManager::cleanupLighting(LPDIRECT3DDEVICE9 D3D)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i=0; i&lt;m_numberLightsEnabled; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3D-&gt;LightEnable( i, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    LightItemList::const_iterator it, end_it;</div>\n\
<div class=\"line\">    end_it = m_lightItemList.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (it = m_lightItemList.begin(); it != end_it;  it++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        LightItem *item = *it;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> item;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    m_lightItemList.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> D3DResourceManager::setupLighting(LPDIRECT3DDEVICE9 D3D)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Set up lighting / materials.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set up Maya lights:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Nasty, need to scan for lights</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>, <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a4b1026889ac8a8c906a6f3a53301bbbc\">MFn::kLight</a>, &amp;status );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> lightPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;8; i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3D-&gt;LightEnable( i, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    m_numberLightsEnabled = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    HRESULT hr;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; !dagIterator.isDone(); dagIterator.next())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !dagIterator.getPath(lightPath) )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        LightItem *lightItem = <span class=\"keyword\">new</span> LightItem;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!lightItem)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        lightItem-&gt;m_objectDeleteMonitor = NULL;</div>\n\
<div class=\"line\">        lightItem-&gt;m_objectDirtyMonitor = NULL;</div>\n\
<div class=\"line\">        ZeroMemory(&amp;(lightItem-&gt;m_lightDesc), <span class=\"keyword\">sizeof</span>(lightItem-&gt;m_lightDesc));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        D3DLIGHT9 *d3dLight = &amp;(lightItem-&gt;m_lightDesc);</div>\n\
<div class=\"line\">        d3dLight-&gt;Range = 10000.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Falloff = 0.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Diffuse.a = 1.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Ambient.a = 1.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Specular.a = 1.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Attenuation0 = 0.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Attenuation1 = 0.0f;</div>\n\
<div class=\"line\">        d3dLight-&gt;Attenuation2 = 0.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// This code doesn&#39;t do all of the light attributes, but the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// general ones are pretty much supported.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_light.html\">MFnLight</a>    fnLight( lightPath );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( lightPath.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#abea5b1e5057d0e1088877be2573be47b\">hasFn</a>(<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7ae33c6f2b55f5c895e9d88b72881608f2\">MFn::kAmbientLight</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>      colorVal = fnLight.color();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> intensity = fnLight.intensity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            d3dLight-&gt;Type = D3DLIGHT_POINT;    </div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.g = colorVal.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.b = colorVal.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.r = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.g = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.b = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.r = d3dLight-&gt;Ambient.r;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.g = d3dLight-&gt;Ambient.g;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.b = d3dLight-&gt;Ambient.b;</div>\n\
<div class=\"line\">            d3dLight-&gt;Attenuation0 = 1.0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (lightPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#abea5b1e5057d0e1088877be2573be47b\">hasFn</a>(<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7adaca767aff665cd113008801c67f76ce\">MFn::kDirectionalLight</a>) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>      colorVal = fnLight.color();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> intensity = fnLight.intensity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            d3dLight-&gt;Type = D3DLIGHT_DIRECTIONAL;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.g = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.b = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.r = d3dLight-&gt;Diffuse.r;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.g = d3dLight-&gt;Diffuse.g;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.b = d3dLight-&gt;Diffuse.b;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.r = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.g = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.b = 0.0f;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (lightPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#abea5b1e5057d0e1088877be2573be47b\">hasFn</a>(<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a3bac71c4eea2f631ef083ede04af5618\">MFn::kPointLight</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            d3dLight-&gt;Type = D3DLIGHT_POINT;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>      colorVal = fnLight.color();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> intensity = fnLight.intensity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            d3dLight-&gt;Type = D3DLIGHT_POINT;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.g = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.b = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.r = d3dLight-&gt;Diffuse.r;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.g = d3dLight-&gt;Diffuse.g;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular.b = d3dLight-&gt;Diffuse.b;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.r = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.g = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.b = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Falloff = 0;</div>\n\
<div class=\"line\">            <span class=\"comment\">// Should set attenuation based on &quot;Decay Rate&quot; attrib on light. TO ADD</span></div>\n\
<div class=\"line\">            d3dLight-&gt;Attenuation0 = 1.0;</div>\n\
<div class=\"line\">            d3dLight-&gt;Attenuation1 = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Attenuation2 = 0.0f;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (lightPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#abea5b1e5057d0e1088877be2573be47b\">hasFn</a>(<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a7d8d4a73faeadc391f63cdafcd559a6d\">MFn::kSpotLight</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            d3dLight-&gt;Type = D3DLIGHT_SPOT;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>      colorVal = fnLight.color();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> intensity = fnLight.intensity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            d3dLight-&gt;Type = D3DLIGHT_SPOT;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.g = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Diffuse.b = colorVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a> * intensity;</div>\n\
<div class=\"line\">            d3dLight-&gt;Specular = d3dLight-&gt;Diffuse;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.r = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.g = 0.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Ambient.b = 0.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_spot_light.html\">MFnSpotLight</a> fnSpotLight( lightPath );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Differs from OpenGL in that we don&#39;t want half the angle (divide by 2) </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// in our setup.</span></div>\n\
<div class=\"line\">            d3dLight-&gt;Phi = (float) (fnSpotLight.coneAngle() ) + </div>\n\
<div class=\"line\">                            (<span class=\"keywordtype\">float</span>) (fnSpotLight.penumbraAngle() );</div>\n\
<div class=\"line\">            d3dLight-&gt;Theta = d3dLight-&gt;Phi - (float) (fnSpotLight.penumbraAngle() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Should set attenuation based on &quot;Decay Rate&quot; attrib on light. TO ADD</span></div>\n\
<div class=\"line\">            d3dLight-&gt;Attenuation0 = 1.0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> dropOffVal = (float) fnSpotLight.dropOff() / 1000.0f;</div>\n\
<div class=\"line\">            d3dLight-&gt;Attenuation1 = dropOffVal;</div>\n\
<div class=\"line\">            d3dLight-&gt;Falloff = 1.0f;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> lightItem;</div>\n\
<div class=\"line\">            lightItem = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup common position and direction information.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (lightItem &amp;&amp; d3dLight)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html\">MTransformationMatrix</a> worldMatrix = lightPath.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a229ff721947ec3ded47b5a071a7311ec\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> translation = worldMatrix.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a281b69f14d54ece041a86d5222f320a0\">translation</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8a45a60f04ac9114f0d6e865a6285f40b2\">MSpace::kWorld</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html\">MVector</a> direction( 0.0, 0.0, -1.0 ); </div>\n\
<div class=\"line\">            direction *= worldMatrix.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_transformation_matrix.html#a8e2933c5f73e8cfb7409366582caa596\">asMatrix</a>();</div>\n\
<div class=\"line\">            direction.normalize();</div>\n\
<div class=\"line\">            d3dLight-&gt;Position.x = (float)translation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>;</div>\n\
<div class=\"line\">            d3dLight-&gt;Position.y = (<span class=\"keywordtype\">float</span>)translation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab927965981178aa1fba979a37168db2a\">y</a>;</div>\n\
<div class=\"line\">            d3dLight-&gt;Position.z = (float)translation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_vector.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>;</div>\n\
<div class=\"line\">            d3dLight-&gt;Direction.x = (<span class=\"keywordtype\">float</span>)direction.x;</div>\n\
<div class=\"line\">            d3dLight-&gt;Direction.y = (float)direction.y;</div>\n\
<div class=\"line\">            d3dLight-&gt;Direction.z = (<span class=\"keywordtype\">float</span>)direction.z;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        hr = D3D-&gt;SetLight( m_numberLightsEnabled, d3dLight);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!SUCCEEDED(hr))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> lightItem;</div>\n\
<div class=\"line\">            lightItem = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        hr = D3D-&gt;LightEnable(m_numberLightsEnabled, TRUE);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!SUCCEEDED(hr))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> lightItem;</div>\n\
<div class=\"line\">            lightItem = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        m_numberLightsEnabled++;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Only allow up to 8 lights to be built for now</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_numberLightsEnabled &gt;= 8)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_lightItemList.push_back( lightItem );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_numberLightsEnabled == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup a headlight.</span></div>\n\
<div class=\"line\">        D3DLIGHT9 Light;</div>\n\
<div class=\"line\">        Light.Type = D3DLIGHT_DIRECTIONAL;</div>\n\
<div class=\"line\">        Light.Specular.r = 1.0f; Light.Specular.g = 1.0f; Light.Specular.b = 1.0f; Light.Specular.a = 1.0f; </div>\n\
<div class=\"line\">        Light.Diffuse.r = 1.0f; Light.Diffuse.g = 1.0f; Light.Diffuse.b = 1.0f; Light.Diffuse.a = 1.0f; </div>\n\
<div class=\"line\">        Light.Ambient.r = 0.0f; Light.Ambient.g = 0.0f; Light.Ambient.b = 0.0f; Light.Ambient.a = 0.0f; </div>\n\
<div class=\"line\">        Light.Range = 100000;</div>\n\
<div class=\"line\">        Light.Falloff = 0;</div>\n\
<div class=\"line\">        Light.Direction = m_camera.m_vLookatPt - m_camera.m_vEyePt; </div>\n\
<div class=\"line\">        D3D-&gt;SetLight( 0, &amp;Light);</div>\n\
<div class=\"line\">        D3D-&gt;LightEnable( 0, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// And a backlight.</span></div>\n\
<div class=\"line\">        D3DLIGHT9 Light2;</div>\n\
<div class=\"line\">        Light2.Type = D3DLIGHT_DIRECTIONAL;</div>\n\
<div class=\"line\">        Light2.Specular.r = 1.0f; Light2.Specular.g = 1.0f; Light2.Specular.b = 1.0f; Light2.Specular.a = 1.0f; </div>\n\
<div class=\"line\">        Light2.Diffuse.r = 1.0f; Light2.Diffuse.g = 1.0f; Light2.Diffuse.b = 1.0f; Light2.Diffuse.a = 1.0f; </div>\n\
<div class=\"line\">        Light2.Ambient.r = 0.0f; Light2.Ambient.g = 0.0f; Light2.Ambient.b = 0.0f; Light2.Ambient.a = 0.0f; </div>\n\
<div class=\"line\">        Light2.Range = 100000;</div>\n\
<div class=\"line\">        Light2.Falloff = 0;</div>\n\
<div class=\"line\">        Light2.Direction = m_camera.m_vEyePt - m_camera.m_vLookatPt;    </div>\n\
<div class=\"line\">        D3D-&gt;SetLight( 1, &amp;Light2);</div>\n\
<div class=\"line\">        D3D-&gt;LightEnable( 1, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_numberLightsEnabled = 2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    D3D-&gt;SetRenderState( D3DRS_LIGHTING, TRUE );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure specular is on.</span></div>\n\
<div class=\"line\">    D3D-&gt;SetRenderState( D3DRS_SPECULARENABLE, TRUE );</div>\n\
<div class=\"line\">    D3D-&gt;SetRenderState(D3DRS_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL);</div>\n\
<div class=\"line\">    D3D-&gt;SetRenderState(D3DRS_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL);</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set lighting to local-viewer</span></div>\n\
<div class=\"line\">    D3D-&gt;SetRenderState(D3DRS_LOCALVIEWER, TRUE);</div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure to auto-normalize normals</span></div>\n\
<div class=\"line\">    D3D-&gt;SetRenderState( D3DRS_NORMALIZENORMALS, TRUE );    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Get the geometry buffers for this bad boy</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">D3DGeometry* D3DResourceManager::getGeometry( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; dagPath, LPDIRECT3DDEVICE9 D3D)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    D3DGeometry* Geometry = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Look for a cached mesh ...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check to see if object is in the list, if not added a</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// new item and cache some geometry</span></div>\n\
<div class=\"line\">    GeometryItem *itemFound = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    GeometryItemList::const_iterator it, end_it;</div>\n\
<div class=\"line\">    end_it = m_geometryItemList.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (it = m_geometryItemList.begin(); it != end_it;  it++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        GeometryItem *item = *it;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item &amp;&amp; item-&gt;m_objectPath == dagPath)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            itemFound = item;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Build a new item, and add it to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!itemFound)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        itemFound = <span class=\"keyword\">new</span> GeometryItem;</div>\n\
<div class=\"line\">        itemFound-&gt;m_objectPath = dagPath;</div>\n\
<div class=\"line\">        Geometry = itemFound-&gt;m_objectGeometry = <span class=\"keyword\">new</span> D3DGeometry();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (Geometry)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Geometry-&gt;Populate( dagPath, D3D);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;obj = (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;) dagNode.object();</div>\n\
<div class=\"line\">        itemFound-&gt;m_objectDeleteMonitor = </div>\n\
<div class=\"line\">            <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a71d104c41cfd465708d0151b94a38810\">MNodeMessage::addNodeAboutToDeleteCallback</a>( obj, geometryDeleteCallback, (<span class=\"keywordtype\">void</span> *)itemFound ); <span class=\"comment\">// Add callback for node deleted.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Don&#39;t get attr change messages during playback, so use node dirty also..sigh</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//itemFound-&gt;m_objectChangeMonitor = </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  MNodeMessage::addAttributeChangedCallback( obj, geometryChangedCallback, (void *)itemFound); // Add callback for attr changed.</span></div>\n\
<div class=\"line\">        itemFound-&gt;m_objectChangeMonitor = 0;</div>\n\
<div class=\"line\">        itemFound-&gt;m_objectChangeMonitor = </div>\n\
<div class=\"line\">            <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a449a233d8c1f0d263a4ffd1f8dbe17b6\">MNodeMessage::addNodeDirtyCallback</a>( obj, geometryDirtyCallback, (<span class=\"keywordtype\">void</span> *)itemFound); <span class=\"comment\">// Add callback for node changed.       </span></div>\n\
<div class=\"line\">        m_geometryItemList.push_back( itemFound );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Geometry = itemFound-&gt;m_objectGeometry;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a new set of buffers for this mesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Geometry;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Get the DirectX texture for a Maya texture node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">D3DTexture* D3DResourceManager::getTexture( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; textureNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    D3DTexture* Texture = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Look for a cached texture ...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check to see if object is in the list, if not added a</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// new item and cache some texture</span></div>\n\
<div class=\"line\">    TextureItem *itemFound = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TextureItemList::const_iterator it, end_it;</div>\n\
<div class=\"line\">    end_it = m_textureItemList.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (it = m_textureItemList.begin(); it != end_it;  it++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        TextureItem *item = *it;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item &amp;&amp; item-&gt;m_mayaNode.object() == textureNode)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            itemFound = item;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// Build a new item, and add it to the list</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!itemFound)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        itemFound = <span class=\"keyword\">new</span> TextureItem();</div>\n\
<div class=\"line\">        itemFound-&gt;m_mayaNode = textureNode;</div>\n\
<div class=\"line\">        Texture = itemFound-&gt;m_texture = <span class=\"keyword\">new</span> D3DTexture( textureNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        itemFound-&gt;m_objectDeleteMonitor = </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a71d104c41cfd465708d0151b94a38810\">MNodeMessage::addNodeAboutToDeleteCallback</a>( textureNode, textureDeleteCallback, (<span class=\"keywordtype\">void</span> *)itemFound ); <span class=\"comment\">// Add callback for node deleted.</span></div>\n\
<div class=\"line\">        itemFound-&gt;m_objectChangeMonitor = </div>\n\
<div class=\"line\">            <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_node_message.html#a92573fa0091e7c9de4412b467e928810\">MNodeMessage::addAttributeChangedCallback</a>( textureNode, textureChangedCallback, (<span class=\"keywordtype\">void</span> *)itemFound); <span class=\"comment\">// Add callback for attr changed.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_textureItemList.push_back( itemFound );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Texture = itemFound-&gt;m_texture;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a new set of buffers for this mesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> Texture;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>                    </div>\n\
<div class=\"line\">D3DResourceManager::initializeDefaultSurfaceEffect( <span class=\"keyword\">const</span> <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;effectsLocation, LPDIRECT3DDEVICE9 D3D,</div>\n\
<div class=\"line\">                                                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; effectName )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Initialize default surface effects found in a given directory.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    HRESULT hres;</div>\n\
<div class=\"line\">    LPD3DXBUFFER pBufferErrors = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Shader flags for debugging</span></div>\n\
<div class=\"line\">    DWORD dwShaderFlags = 0;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #ifdef DEBUG_VS</span></div>\n\
<div class=\"line\">    dwShaderFlags |= D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #ifdef DEBUG_PS</span></div>\n\
<div class=\"line\">    dwShaderFlags |= D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ID3DXEffect* effect = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> effectLocation = effectsLocation + <span class=\"stringliteral\">&quot;\\\\&quot;</span> + effectName + <span class=\"stringliteral\">&quot;.fx&quot;</span>;</div>\n\
<div class=\"line\">    hres = D3DXCreateEffectFromFile( D3D, </div>\n\
<div class=\"line\">        effectLocation.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">        NULL, </div>\n\
<div class=\"line\">        NULL, </div>\n\
<div class=\"line\">        dwShaderFlags, </div>\n\
<div class=\"line\">        NULL, </div>\n\
<div class=\"line\">        &amp;effect, </div>\n\
<div class=\"line\">        &amp;pBufferErrors );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<span class=\"stringliteral\">&quot;Failed to compile FX file: &quot;</span> + effectLocation);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pBufferErrors)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *pCompilErrors = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)pBufferErrors-&gt;GetBufferPointer();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Compiler errors:\\n&quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(pCompilErrors) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }   </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Create a new effect item</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<span class=\"stringliteral\">&quot;Maya default pixel shader loaded: &quot;</span> + effectLocation);</div>\n\
<div class=\"line\">        SurfaceEffectItem *pei = <span class=\"keyword\">new</span> SurfaceEffectItem;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pei)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            pei-&gt;fEffect = effect;</div>\n\
<div class=\"line\">            pei-&gt;fName = effectName;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            m_SurfaceEffectItemList.push_back( pei );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (m_SurfaceEffectItemList.size() &gt; 0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>                    </div>\n\
<div class=\"line\">D3DResourceManager::initializePostEffects( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;effectsLocation, LPDIRECT3DDEVICE9 D3D)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Initialize all effects found in a given directory.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    HRESULT hres;</div>\n\
<div class=\"line\">    LPD3DXBUFFER pBufferErrors = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Shader flags for debugging</span></div>\n\
<div class=\"line\">    DWORD dwShaderFlags = 0;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #ifdef DEBUG_VS</span></div>\n\
<div class=\"line\">    dwShaderFlags |= D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #ifdef DEBUG_PS</span></div>\n\
<div class=\"line\">    dwShaderFlags |= D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Should do a proper directory search for now it&#39;s just hard coded.</span></div>\n\
<div class=\"line\">    <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> effectNames;</div>\n\
<div class=\"line\">    effectNames.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;PostProcess_SobelFilter&quot;</span>);</div>\n\
<div class=\"line\">    effectNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;PostProcess_ToneMapFilter&quot;</span>);</div>\n\
<div class=\"line\">    effectNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(<span class=\"stringliteral\">&quot;PostProcess_InvertFilter&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;effectNames.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ID3DXEffect* effect = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> effectLocation = effectsLocation + <span class=\"stringliteral\">&quot;\\\\&quot;</span> + effectNames[i] + <span class=\"stringliteral\">&quot;.fx&quot;</span>;</div>\n\
<div class=\"line\">        hres = D3DXCreateEffectFromFile( D3D, </div>\n\
<div class=\"line\">                                   effectLocation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(),</div>\n\
<div class=\"line\">                                   NULL, </div>\n\
<div class=\"line\">                                   NULL, </div>\n\
<div class=\"line\">                                   dwShaderFlags, </div>\n\
<div class=\"line\">                                   NULL, </div>\n\
<div class=\"line\">                                   &amp;effect, </div>\n\
<div class=\"line\">                                   &amp;pBufferErrors );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hres))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<span class=\"stringliteral\">&quot;Failed to compiler FX file&quot;</span> + effectLocation);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pBufferErrors)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *pCompilErrors = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)pBufferErrors-&gt;GetBufferPointer();</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;Compiler errors:\\n&quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(pCompilErrors) );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }   </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Create a new effect item</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            PostEffectItem *pei = <span class=\"keyword\">new</span> PostEffectItem;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (pei)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                pei-&gt;fEffect = effect;</div>\n\
<div class=\"line\">                pei-&gt;fName = effectNames[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                m_PostEffectItemList.push_back( pei );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (m_PostEffectItemList.size() &gt; 0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;    </div>\n\
<div class=\"line\">D3DResourceManager::getListOfEnabledPostEffects()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Find out which ones are enabled...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Should get via some UI interface. For now use Maya optionVars.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// e.g. optionVar -sv &quot;D3D_EFFECTS_LIST&quot; &quot;PostProcess_ToneMapFilter&quot; ;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// e.g. optionVar -sv &quot;D3D_EFFECTS_LIST&quot; &quot;PostProcess_ToneMapFilter,PostProcess_SobelFilter&quot; ;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// e.g. optionVar -sv &quot;D3D_EFFECTS_LIST&quot; &quot;&quot; ; // Clear the list</span></div>\n\
<div class=\"line\">    m_EnabledPostEffectItemList.<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> effectListVar(<span class=\"stringliteral\">&quot;D3D_EFFECTS_LIST&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">//MString effectList(&quot;PostProcess_ToneMapFilter, PostProcess_SobelFilter&quot;);</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> effectList;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#aba6c13d47a4c052cdd5915f45fed39b6\">MGlobal::getOptionVarValue</a>(effectListVar, effectList))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Create an option var if none previously existed.</span></div>\n\
<div class=\"line\">        <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#ac4846b16993246fd74b83d1d5b9b6a9f\">MGlobal::setOptionVarValue</a>(effectListVar, effectList);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Parse the effect list to get back a list of enabled effects</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (in order). Note that there is not restriction on effect</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// list order, and duplicates are allowed.</span></div>\n\
<div class=\"line\">        effectList.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#ac914d138fc96d7065c687a4f8b40c263\">split</a>(<span class=\"charliteral\">&#39; &#39;</span>, m_EnabledPostEffectItemList);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> m_EnabledPostEffectItemList;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>                    </div>\n\
<div class=\"line\">D3DResourceManager::clearResources(<span class=\"keywordtype\">bool</span> onlyInvalidItems, <span class=\"keywordtype\">bool</span> clearShaders)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    GeometryItemList::const_iterator git, end_git;</div>\n\
<div class=\"line\">    end_git = m_geometryItemList.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (git = m_geometryItemList.begin(); git != end_git;  git++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        GeometryItem *item = *git;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!onlyInvalidItems || (onlyInvalidItems &amp;&amp; !(item-&gt;m_objectPath.isValid() )))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_objectGeometry)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> item-&gt;m_objectGeometry;</div>\n\
<div class=\"line\">                    item-&gt;m_objectGeometry = NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                item-&gt;m_objectPath = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>(); <span class=\"comment\">// Assign invalid dag path</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Kill the delete monitor</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_objectDeleteMonitor)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectDeleteMonitor );</div>\n\
<div class=\"line\">                    item-&gt;m_objectDeleteMonitor = 0;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">// Kill the attr changed monitor</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_objectChangeMonitor)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectChangeMonitor );    </div>\n\
<div class=\"line\">                    item-&gt;m_objectChangeMonitor = 0;                    </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">// Kill node dirty monitor</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_objectDirtyMonitor)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectDirtyMonitor ); </div>\n\
<div class=\"line\">                    item-&gt;m_objectDirtyMonitor = 0;                                     </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!onlyInvalidItems)</div>\n\
<div class=\"line\">        m_geometryItemList.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TextureItemList::const_iterator tit, end_tit;</div>\n\
<div class=\"line\">    end_tit = m_textureItemList.end();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (tit = m_textureItemList.begin(); tit != end_tit;  tit++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        TextureItem *item = *tit;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!onlyInvalidItems || (onlyInvalidItems &amp;&amp; !(item-&gt;m_mayaNode.isValid() )))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_texture)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> item-&gt;m_texture;</div>\n\
<div class=\"line\">                    item-&gt;m_texture = NULL;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                item-&gt;m_mayaNode = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ae6af14e0aa2c92bdda88c81280e1d122\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Kill the delete monitor</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_objectDeleteMonitor)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectDeleteMonitor );</div>\n\
<div class=\"line\">                    item-&gt;m_objectDeleteMonitor = 0;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"comment\">// Kill the attr changed monitor</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;m_objectChangeMonitor)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>( item-&gt;m_objectChangeMonitor );    </div>\n\
<div class=\"line\">                    item-&gt;m_objectChangeMonitor = 0;                    </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!onlyInvalidItems)</div>\n\
<div class=\"line\">        m_textureItemList.clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (clearShaders)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Clean up post effects list</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        PostEffectItemList::const_iterator eit, end_eit;</div>\n\
<div class=\"line\">        end_eit = m_PostEffectItemList.end();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (eit = m_PostEffectItemList.begin(); eit != end_eit;  eit++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            PostEffectItem *item = *eit;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item-&gt;fEffect)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    item-&gt;fEffect-&gt;Release();</div>\n\
<div class=\"line\">                    item-&gt;fEffect = NULL;</div>\n\
<div class=\"line\">                }           </div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> item;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        m_PostEffectItemList.clear();</div>\n\
<div class=\"line\">        m_EnabledPostEffectItemList.clear();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Clean up surface effects list</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            SurfaceEffectItemList::const_iterator eit, end_eit;</div>\n\
<div class=\"line\">            end_eit = m_SurfaceEffectItemList.end();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (eit = m_SurfaceEffectItemList.begin(); eit != end_eit;  eit++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                SurfaceEffectItem *item = *eit;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (item)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (item-&gt;fEffect)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        item-&gt;fEffect-&gt;Release();</div>\n\
<div class=\"line\">                        item-&gt;fEffect = NULL;</div>\n\
<div class=\"line\">                    }           </div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> item;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            m_SurfaceEffectItemList.clear();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* D3D9_SUPPORTED */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";