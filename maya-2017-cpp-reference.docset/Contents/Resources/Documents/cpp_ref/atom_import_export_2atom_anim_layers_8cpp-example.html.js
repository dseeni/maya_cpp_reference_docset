var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2017\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2016-06-16\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>atomImportExport/atomAnimLayers.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'atom_import_export_2atom_anim_layers_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>atomImportExport/atomAnimLayers.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">atomImportExport/atomAnimLayers.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  File Name:  atomAnimLayers.cpp</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Information on animation layers, used by import and export.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimCurveClipboard.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomAnimLayers.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;atomImportExportStrings.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *kAnimLayers = <span class=\"stringliteral\">&quot;animLayers&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//return true if we have animLayers in the scene</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomAnimLayers::getOrderedAnimLayers()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">    <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;atomGetAllLayersOrdered();&quot;</span>);</div>\n\
<div class=\"line\">    mOrderedAnimLayerNames.setLength(0);</div>\n\
<div class=\"line\">    status = <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, mOrderedAnimLayerNames, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (status==<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> &amp;&amp; mOrderedAnimLayerNames.length() &gt;0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">//given a specified layerName and the name of the previous layer it follows,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//create the layer</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::createAnimLayer(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;layerName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;prevLayerName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(prevLayerName.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() !=0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//move the created layer to after the previous</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;animLayer -mva &quot;</span>) +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + prevLayerName +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>) +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)+ </div>\n\
<div class=\"line\">            layerName +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)+ <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;;&quot;</span>);</div>\n\
<div class=\"line\">        status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(layerName == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;BaseAnimation&quot;</span>)) <span class=\"comment\">//todo need a better way to handle the root layer</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand(<span class=\"stringliteral\">&quot;animLayer;&quot;</span>);</div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"comment\">//not the root so just create it, it will go at the end which is fine since we don&#39;t know where it shoudl go in the list.</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;animLayer &quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + layerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;;&quot;</span>);</div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//check and if the specified attrName on the specified nodeName exists on the specified layerName</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomAnimLayers::isAttrInAnimLayer(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;attrName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;layerName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> resultArray;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;animLayer -query -attribute &quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + layerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\">    status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, resultArray, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = nodeName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;.&quot;</span>) + attrName;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; resultArray.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(name == resultArray[k])</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//add the specified nodename.attrName to the specified layer</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomAnimLayers::addAttrToAnimLayer(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;attrName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;layerName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name = nodeName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;.&quot;</span>) + attrName;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;animLayer -edit -attribute &quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + name + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>)</div>\n\
<div class=\"line\">        + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + layerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\">    status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (status==<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//remove this attribute from all layers</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::removeLayersIfNeeded(<span class=\"keywordtype\">bool</span> replaceLayers, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;nodeName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;attrName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">//if we are replacing and we have layers in the scene</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(replaceLayers == <span class=\"keyword\">true</span> &amp;&amp; mOrderedAnimLayerNames.length() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> fullName = nodeName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;.&quot;</span>) + attrName;</div>\n\
<div class=\"line\">        std::string str(fullName.<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mAttrsRemovedFromAnimLayers.find(std::string(str)) == mAttrsRemovedFromAnimLayers.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mAttrsRemovedFromAnimLayers.insert(str); <span class=\"comment\">//don&#39;t remove it again</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//mOrderedAnimLayers was caclculated when we read in the animLayer names.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z = 0; z &lt; mOrderedAnimLayerNames.length(); ++z)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> layerName = mOrderedAnimLayerNames[z];</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(isAttrInAnimLayer(nodeName, attrName, layerName)) <span class=\"comment\">//if the attribute is in this layer remove it.</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;animLayer -edit -removeAttribute &quot;</span>) +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + fullName +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>) +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)+ </div>\n\
<div class=\"line\">                    layerName +  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>)+ <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;;&quot;</span>);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );    </div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span>(status == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">//removed that attribute so save the layer name out. later after loading we will delete these layers that have</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//no attributes left in them.</span></div>\n\
<div class=\"line\">                        std::string layerStr(layerName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span>(mLayersWithRemovedAttrs.find(std::string(layerStr)) == mLayersWithRemovedAttrs.end())</div>\n\
<div class=\"line\">                            mLayersWithRemovedAttrs.insert(layerStr);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::deleteEmptyLayers(<span class=\"keywordtype\">bool</span> replaceLayers)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(replaceLayers == <span class=\"keyword\">true</span> &amp;&amp; mLayersWithRemovedAttrs.size() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(std::set&lt;std::string&gt;::iterator iter = mLayersWithRemovedAttrs.begin(); iter !=</div>\n\
<div class=\"line\">                    mLayersWithRemovedAttrs.end(); ++iter)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            std::string str = *iter;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> layerName(str.c_str());</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> resultArray;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;animLayer -query -attribute &quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + layerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand, resultArray, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(resultArray.length() ==0) <span class=\"comment\">//it has no attributes so delete it..</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                melCommand = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;delete &quot;</span>) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>) + layerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\&quot;&quot;</span>);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(melCommand,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//this function creates missing animation layers and places it in the correct order</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::createMissingAnimLayers(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;animLayers)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k=0; k &lt; animLayers.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> list;</div>\n\
<div class=\"line\">        list.<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(animLayers[k]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(list.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a99dd6a54b909ede1d11702fe58977e2a\">length</a>()!=1) <span class=\"comment\">//if not in the list then not in the scene so create it, and the previous one WILL be in the scene so attach to it</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> prevLayerName;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(k&gt;0)</div>\n\
<div class=\"line\">                prevLayerName = animLayers[k-1];</div>\n\
<div class=\"line\">            <span class=\"comment\">//todo need a better way to handle the root layer</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//this fixes an issue where when you create an animation layer for the base it creates 2 layers the BaseAnimation</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//and a default animLayer1, where if you create the same thing in the UI the second one is named AnimLayer1, with</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//a cap A. So we are getting an extra animLayer1 created, which is a little messy. This stops that</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//but we need to revisit.  Also seems like you can&#39;t rename BaseAnimation, but not sure what it is in different</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//languages. It&#39;s a node so maybe it never changes?</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(k &gt; 0 || animLayers[k] != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;BaseAnimation&quot;</span>) || animLayers.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>()==0)  <span class=\"comment\">//we know we are creating more than 1 so the BaseAnimation will</span></div>\n\
<div class=\"line\">            {                                                                 <span class=\"comment\">//be created next time so dont create it unless only creating a BaseAnimation</span></div>\n\
<div class=\"line\">                createAnimLayer(animLayers[k],prevLayerName);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//find all animation layers in the scene and add them to the selection list</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::addAnimLayersToSelection()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    getOrderedAnimLayers();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z = 0; z &lt; mOrderedAnimLayerNames.length();++z)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a79ff0a65cba431ef7f9ce25a112c075a\">MGlobal::selectByName</a>( mOrderedAnimLayerNames[z], <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a5b77552a306fb2b916ef75e34e1298d4adc09789778e2bb82b1121c0aab78da12\">MGlobal::kAddToList</a> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//this function will pass in all anim layer objects found on a particular plug. since we want them to be</span></div>\n\
<div class=\"line\"><span class=\"comment\">//kept in order, but don&#39;t want ALL of the anim layers to be specified if they aren&#39;t used we</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomAnimLayers::addAnimLayers(<a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp;layers)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(mOrderedAnimLayerNames.length() &gt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//first time called set up the mAnimLayers object array.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(mAnimLayers.length() != mOrderedAnimLayerNames.length())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mAnimLayers.setLength(mOrderedAnimLayerNames.length());</div>\n\
<div class=\"line\">            <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> nullObject;</div>\n\
<div class=\"line\">            <span class=\"comment\">//initialize with nulls</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; mAnimLayers.length(); ++k)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mAnimLayers[k] = nullObject;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">//if here we have the ordered name list and the anim layer object list </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//now we just need to set the objects passed in correctly</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; layers.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(layers[k].hasFn (<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (layers[k]);</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> layerName = fnNode.name();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> z = 0; z &lt; mOrderedAnimLayerNames.length();++z)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(layerName == mOrderedAnimLayerNames[z])</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    mAnimLayers[z] = layers[k];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//this function adds the layer objects in mAnimLayers to the start of the selection list.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//this is used when exporting to make sure the animationlayers come first</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::addLayersToStartOfSelectionList(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> &amp;list)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(mAnimLayers.length() &gt; 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html\">MSelectionList</a> layers;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i =0; i&lt;mAnimLayers.length();++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            layers.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a23929aeafb29672f2652128eac9c4dec\">add</a>(mAnimLayers[i], <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        layers.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_list.html#a92c9d648de48c0e6535fc814d32bb72c\">merge</a>(list);</div>\n\
<div class=\"line\">        list = layers;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//for the nthArray that we hold(that corresponds to the nth item in the export list),</span></div>\n\
<div class=\"line\"><span class=\"comment\">//get the animation layer plugs for it&#39;s attributes, e.g. weight, mute</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::getPlugs(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nth, <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp;plugs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(nth &lt; mAnimLayers.length() &amp;&amp; mAnimLayers[nth].hasFn (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (mAnimLayers[nth]);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> attributes;</div>\n\
<div class=\"line\">        getRelevantAttributes(attributes);</div>\n\
<div class=\"line\">        collectAnimLayerPlugs(fnNode,attributes,plugs);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//get attribute names for an animationlayer, like mute,weight, solo</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::getRelevantAttributes(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;attributes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attr(<span class=\"stringliteral\">&quot;mute&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;lock&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;solo&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;override&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;passthrough&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;preferred&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;weight&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;rotationAccumulationMode&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">    attr = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;scaleAccumulationMode&quot;</span>);</div>\n\
<div class=\"line\">    attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(attr);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//get the attribute plugs for a specific layer</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::collectAnimLayerPlugs(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> &amp;layer, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;attributes, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp;plugs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i = 0; i &lt; attributes.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug = layer.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html#aac29b4a3b51c9d236175e955638f7153\">findPlug</a>(attributes[i],<span class=\"keyword\">false</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(status== <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            plugs.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a12338b7a1987007e931b031646c9b4be\">append</a>(plug);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//for each animation layer we have, write out the name of the layer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//we will later write out the layer like a depend node and write out</span></div>\n\
<div class=\"line\"><span class=\"comment\">//each attribute, but we do this seperately so that on import we</span></div>\n\
<div class=\"line\"><span class=\"comment\">//can quickly see what layers are in the ATOM file so that we can</span></div>\n\
<div class=\"line\"><span class=\"comment\">//create them if they are missing</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomAnimLayers::writeAnimLayers(ofstream &amp;animFile, atomWriter &amp;writer)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(mAnimLayers.length() &gt; 0) <span class=\"comment\">// at least one Layer</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        animFile &lt;&lt;kAnimLayers &lt;&lt; <span class=\"stringliteral\">&quot; { &quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> k = 0; k &lt; mAnimLayers.length(); ++k)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(mAnimLayers[k].hasFn (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (mAnimLayers[k]);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> layerName = fnNode.name();</div>\n\
<div class=\"line\">                    animFile &lt;&lt;<span class=\"stringliteral\">&quot;  &quot;</span> &lt;&lt; layerName;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        animFile &lt;&lt; <span class=\"stringliteral\">&quot; }\\n&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//read out the animation layers from the animReader</span></div>\n\
<div class=\"line\"><span class=\"comment\">//then create any missing layers and add them to the active selection</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomAnimLayers::readAnimLayers(ifstream &amp;readAnim, <span class=\"keywordtype\">char</span> *dataType,atomReader &amp;reader)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(dataType, kAnimLayers) == 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        dataType = reader.asWord(readAnim);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (strcmp(dataType, <span class=\"stringliteral\">&quot;{&quot;</span>) == 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> layerNames;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span>((dataType = reader.asWord(readAnim)))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(readAnim &amp;&amp; ! readAnim.eof() &amp;&amp; dataType &amp;&amp; strcmp(dataType, <span class=\"stringliteral\">&quot;}&quot;</span>) !=0)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> name(dataType);</div>\n\
<div class=\"line\">                    layerNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a18d06b3d0af1426e654ac2cc1dc86c60\">append</a>(name);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(layerNames.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt;0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                createMissingAnimLayers(layerNames);</div>\n\
<div class=\"line\">                addAnimLayersToSelection();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//for this attribute on this node add the following layer nodes and plugs it&#39;s associated with</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> atomNodeWithAnimLayers::addPlugWithLayer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;attrPlug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> &amp;layers, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> &amp;plugs)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(plugs.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() == layers.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrObj = attrPlug.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a18baf7e7504bc90d54dea49a7d2d924b\">attribute</a>();</div>\n\
<div class=\"line\">        <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html\">MFnAttribute</a> fnLeafAttr (attrObj);</div>\n\
<div class=\"line\">        std::string attrStd(std::string(fnLeafAttr.name().asChar()));</div>\n\
<div class=\"line\">        PlugsAndLayers plugsAndLayers;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i =0; i &lt; layers.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(plugs[i].isNull()==<span class=\"keyword\">false</span>) <span class=\"comment\">//it&#39;s possible to not have a plug for the specified layer</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span>(layers[i].hasFn (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a2feeef9d7a0ae8bba1f9da9ed24e819b\">MFn::kDependencyNode</a>))</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode (layers[i]);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> layerName = fnNode.name();</div>\n\
<div class=\"line\">                    plugsAndLayers.mLayerNames.append(layerName);</div>\n\
<div class=\"line\">                    plugsAndLayers.mPlugs.append(plugs[i]);</div>\n\
<div class=\"line\">                    fAttrLayers[attrStd] = plugsAndLayers;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//is the specified plug on this node animation layered</span></div>\n\
<div class=\"line\"><span class=\"comment\">//used when exporting</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomNodeWithAnimLayers::isPlugLayered(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;plugName, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp;layerNames)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    AttrLayersMap::iterator p;</div>\n\
<div class=\"line\">    std::string stdAttrName(plugName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    p = fAttrLayers.find(stdAttrName);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(p != fAttrLayers.end())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        PlugsAndLayers val = p-&gt;second;</div>\n\
<div class=\"line\">        layerNames = val.mLayerNames;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  atomLayerClipboard</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//get the clipboarditemarray for the specified layername</span></div>\n\
<div class=\"line\"><span class=\"comment\">//if the layer string is empty we return the default clipboard</span></div>\n\
<div class=\"line\"><a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard_item_array.html\">MAnimCurveClipboardItemArray</a>&amp; atomLayerClipboard::getCBItemArray(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;layerName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(layerName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() ==0)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> fEmptyLayerArray;</div>\n\
<div class=\"line\">    <span class=\"comment\">//here the layername is something</span></div>\n\
<div class=\"line\">    std::string name(layerName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">    ArrayMap::iterator p;</div>\n\
<div class=\"line\">    p = fArray.find(name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(p != fArray.end())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> *(p-&gt;second);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard_item_array.html\">MAnimCurveClipboardItemArray</a> *item = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard_item_array.html\">MAnimCurveClipboardItemArray</a>();</div>\n\
<div class=\"line\">    fArray[name] = item;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *item;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">atomLayerClipboard::~atomLayerClipboard()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ArrayMap::iterator p = fArray.begin(); p!= fArray.end(); ++p)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(p-&gt;second)</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> p-&gt;second;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//paste the specified clipboard, with the specified attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//if the animLayerName is empty we won&#39;t use the animLayer flag</span></div>\n\
<div class=\"line\"><span class=\"comment\">//when pasting.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomLayerClipboard::pasteClipboard(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard_item_array.html\">MAnimCurveClipboardItemArray</a> &amp;itemArray,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; startTime, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; endTime,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> startUnitless, <span class=\"keywordtype\">float</span> endUnitless,<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;pasteFlags,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;animLayerName)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> good = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MS::kFailure</a>;</div>\n\
<div class=\"line\">    <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard.html#af34c0cc340b8211738e45087a7d17672\">MAnimCurveClipboard::theAPIClipboard</a>().<a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard.html#ad5522f028dde0080b753279426415a4a\">clear</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard.html#af34c0cc340b8211738e45087a7d17672\">MAnimCurveClipboard::theAPIClipboard</a>().set( itemArray, </div>\n\
<div class=\"line\">                        startTime,endTime,startUnitless, endUnitless,<span class=\"keyword\">false</span>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        good = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_curve_clipboard.html#af34c0cc340b8211738e45087a7d17672\">MAnimCurveClipboard::theAPIClipboard</a>().isEmpty()== <span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> command(<span class=\"stringliteral\">&quot;pasteKey -cb api &quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"comment\">//we always match by name since we do use our own local algorithm</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//to match up hierarchies. So not matter what option we use</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//the name of the items in the clipboard will match up as we expect them too.</span></div>\n\
<div class=\"line\">        command += <span class=\"stringliteral\">&quot; -mn true &quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(animLayerName.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() &gt;0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> onThisLayer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; -al &quot;</span>) + animLayerName + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot; &quot;</span>);</div>\n\
<div class=\"line\">            command += onThisLayer;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        command += pasteFlags;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> result;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a> != (status =  </div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(command, result, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kPasteFailed, status);</div>\n\
<div class=\"line\">            <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> good;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//paste the keys we have in each stored clipboard using the specified parameters.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//will paste the default layer and each animlayer</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> atomLayerClipboard::pasteKeys(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; startTime, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html\">MTime</a>&amp; endTime,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> startUnitless, <span class=\"keywordtype\">float</span> endUnitless,<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;pasteFlags)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> animLayerName; <span class=\"comment\">//empty first time for the first default empty layer</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> oneWasGood = pasteClipboard(fEmptyLayerArray, startTime,endTime,</div>\n\
<div class=\"line\">                                    startUnitless, endUnitless,pasteFlags,animLayerName);</div>\n\
<div class=\"line\">    <span class=\"comment\">//now go through and do each one that&#39;s in an animation layer</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(ArrayMap::iterator p = fArray.begin(); p!= fArray.end(); ++p)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(p-&gt;second) <span class=\"comment\">//double check but should not be NULL</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            animLayerName= <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(p-&gt;first.c_str());</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> good = pasteClipboard(*(p-&gt;second), startTime,endTime,</div>\n\
<div class=\"line\">                                    startUnitless, endUnitless,pasteFlags,animLayerName);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(good == <span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">                oneWasGood = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//if not one was good then something failed.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(oneWasGood==<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> stringStat;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> msg = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_resource.html#a121315f443a9c4ea512738dc1d39414d\">MStringResource::getString</a>(kClipboardFailure,</div>\n\
<div class=\"line\">                                                 stringStat);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(msg);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MS::kSuccess</a>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//does this specified node have any layers, and if so return them</span></div>\n\
<div class=\"line\"><span class=\"comment\">//in a std::set of std::strings</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> atomNodeWithAnimLayers::isNodeLayered(std::set&lt;std::string&gt; &amp;layerNames)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    AttrLayersMap::iterator p;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isLayered = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(p = fAttrLayers.begin();p!= fAttrLayers.end(); ++p)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        PlugsAndLayers val = p-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i =0 ;i&lt; val.mLayerNames.length(); ++i)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span>(val.mLayerNames[i].length() &gt; 0)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                std::string str(val.mLayerNames[i].asChar());</div>\n\
<div class=\"line\">                layerNames.insert(str);</div>\n\
<div class=\"line\">                isLayered = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> isLayered;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";