var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2017\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2016-06-16\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>MPxGPUDeformer Class Reference</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'class_m_px_g_p_u_deformer.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>MPxGPUDeformer Class Reference</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li class=\"current\"><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
  <div id=\"navrow2\" class=\"tabs2\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Class&#160;List</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/classes.html\"><span>Class&#160;Index</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/hierarchy.html\"><span>Class&#160;Hierarchy</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/functions.html\"><span>Class&#160;Members</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  \n\
  <div class=\"headertitle\">\n\
<div class=\"title\">MPxGPUDeformer Class Reference<span class=\"mlabels\"><span class=\"mlabel\">abstract</span></span><div class=\"ingroups\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/group___open_maya_anim.html\">OpenMayaAnim - API module for animation</a> &#124; <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/group___m_px.html\">Proxy classes</a></div></div>  </div>\n\
<div id=\"OverviewLinksDiv\"><div id=\"dynsection-overview\" onclick=\"return toggleVisibility(this)\" class=\"dynheader closed\" style=\"cursor:pointer;\"><img id=\"dynsection-overview-trigger\" src=\"cpp_ref/closed.png\" alt=\"+\"> Related help topics: </div><div id=\"dynsection-overview-content\" class=\"dyncontent\" style=\"display:none;\"><ul class=\"overviewLinks\">\n\
<li class=\"overviewLink\"><a href=\"#!/url=./files/GUID-653104AC-D0E8-490F-AF00-71DEB76139A4.htm\">What\'s New / What\'s Changed? &gt; What\'s New in API in Maya 2016 Extension 2</a></li>\n\
<li class=\"overviewLink\"><a href=\"#!/url=./files/GUID-6644CF46-6648-45B8-A3D8-76EDD7712571.htm\">What\'s New / What\'s Changed? &gt; What\'s New in API in Maya 2016</a></li>\n\
<li class=\"overviewLink\"><a href=\"#!/url=./files/GUID-1BB599DB-D637-4D95-AD35-9F85AA5A35ED.htm\">What\'s New / What\'s Changed? &gt; What\'s New in API in Maya 2016 &gt; C++ API Changes in Maya 2016</a></li>\n\
</ul></div></div>\n\
<div class=\"summary\">\n\
<a href=\"class_m_px_g_p_u_deformer.html#pub-methods\">Public Member Functions</a> &#124;\n\
<a href=\"class_m_px_g_p_u_deformer.html#pub-static-methods\">Static Public Member Functions</a>  </div></div><!--header-->\n\
<div class=\"contents\">\n\
\n\
<p><code>#include &lt;MPxGPUDeformer.h&gt;</code></p>\n\
<a name=\"details\" id=\"details\"></a><h2 class=\"groupheader\">Class Description</h2>\n\
<div class=\"textblock\"><p>Base class for user defined GPU deformer override evaluators. </p>\n\
<p><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> lets you create user-defined GPU deformer overrides. A GPU deformer override replaces the CPU implementation of a deformer node when the evaluation manager is enabled and the deformerEvaluator plug-in is enabled. Use <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> to override the deformation for a Maya deformer or for a plug-in deformer implemented through <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html\" title=\"Base class for user defined deformers with per-vertex weights. \">MPxDeformerNode</a>. <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> must register which node type it overrides using <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html\" title=\"Registration class for MPxGPUDeformer. \">MGPUDeformerRegistry</a>.</p>\n\
<p><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> defines a deformer node as a node which has input geometry and output geometry. <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> assumes that the number of vertices in the input and output geometry of a deformer node are the same. This definition includes nodes which are traditionally thought of as deformer nodes, such as skinCluster or blendShape, but also includes nodes like groupParts, which may be part of deformation chains.</p>\n\
<p>To ensure optimal performance when you implement <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a>, keep the following in mind:</p><ul>\n\
<li>Calls to the ctor must be fast. Do not do heavy work in the ctor because the deformer evaluator may allocate GPU deformers which are never used. Save heavy work for the <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> method.</li>\n\
<li>Cache needed values on the graphics card during <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a>. Use the <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\" title=\"Provides access to Evaluation Manager node information. \">MEvaluationNode</a> interface to determine if input values are constant or change over time.</li>\n\
</ul>\n\
<p>If you use this interface, you must implement the virtual method <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> for <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> to function. See the <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> documentation for additional requirements on the <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> method. The <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a74a45d2648335936561898c390281a6a\" title=\"This method is called when the GPU deformer is being destroyed. \">terminate()</a> method is optional.</p>\n\
<p><b>About the deformer evaluator:</b></p>\n\
<p>The deformer evaluator identifies chains of supported nodes terminated by a mesh. The deformer evaluator then replaces CPU evaluation of these nodes with GPGPU kernels. The final deformed geometry is directly shared with Viewport 2.0, which avoids any GPU read back. When you implement an <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> for a given node type, you expand the list of deformer evaluator supported nodes, which then allows more deformer chains to execute on the GPU.</p>\n\
<p>A deformer chain is created by identifying an animated display mesh and then following then geometry connections upstream until a source plug, that meets any one of the following criteria, is reached: </p><ul>\n\
<li>On an unsupported node. </li>\n\
<li>On a node which does not depend on time. </li>\n\
<li>Contains fan out connections.</li>\n\
</ul>\n\
<p>When one of the preceding conditions is true for a source plug, that source plug is considered the <em>input</em> to the deformation chain, and the corresponding source plug node is not evaluated in the deformer evaluator.</p>\n\
<p>Example Chains: </p><ul>\n\
<li>HistoryNode: any node (supported or unsupported) which does not depend on time. </li>\n\
<li>origMesh: the original mesh shape: the ultimate source of the deformation chain. </li>\n\
<li>SupportedNode: a node that the deformer evaluator explicitly supports that also depends on time </li>\n\
<li>UnsupportedNode: any node that the deformer evaluator does not support that also depends on time</li>\n\
</ul>\n\
<p><b>Example 1:</b> </p><ul>\n\
<li>HistoryNode1 -&gt; origMesh -&gt; HistoryNode2 -&gt; SupportedNode1 -&gt; SupportedNode1 -&gt; displayMesh</li>\n\
</ul>\n\
<p>The first time that the deformer evaluator runs on example 1, the HistoryNode2 geometry output is copied to the GPU. SupportedNode1 and SupportedNode2 then run kernels to perform the deformations, and the final deformed result is then shared with VP2. Subsequent evaluations re-use the copy of HistoryNode2 output geometry already on the GPU, which avoids expensive data transfer.</p>\n\
<p><b>Example 2:</b> </p><ul>\n\
<li>HistoryNode1 -&gt; origMesh -&gt; HistoryNode2 -&gt; UnsupportedNode1 -&gt; SupportedNode1 -&gt; displayMesh</li>\n\
</ul>\n\
<p>In this scenario, UnsupportedNode1 runs on the CPU and generates an intermediate result. This intermediate result is copied to the GPU. Once copied, SupportedNode1 runs its kernel and displayMesh shares data with VP2.</p>\n\
<p><b>Example 3:</b> </p><ul>\n\
<li>HistoryNode1-&gt; origMesh -&gt; HistoryNode2 -&gt; SupportedNode1 -&gt; UnsupportedNode1 -&gt; displayMesh</li>\n\
</ul>\n\
<p>In this scenario, the deformer evaluator does nothing. If we performed SupportedNode1\'s deformation on the GPU, we would need to read back that data and use it as an input for UnsupportedNode1 on the CPU. Read back is not supported by the deformer evaluator.</p>\n\
<p><b>Example 4:</b> </p><ul>\n\
<li>origMesh1 -&gt; SupportedNode1.outMesh[0] -&gt; displayMesh1 </li>\n\
<li>origMesh2 -&gt; SupportedNode1.outMesh[1] -&gt; displayMesh2</li>\n\
</ul>\n\
<p>In this scenario, the deformer evaluator creates two chains, one for displayMesh1 and a second for displayMesh2. These chains both run on the GPU. Note that if SupportedNode1 is derived from <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html\" title=\"Base class for user defined deformers with per-vertex weights. \">MPxDeformerNode</a>, then there can be zero relationship between the mesh data used in displayMesh1 and displayMesh2. displayMesh1 could have 100 vertices, and displayMesh2 could have one million vertices.</p>\n\
<p><b>Example 5:</b> </p><ul>\n\
<li>origMesh1 -&gt; SupportedNode1.outMesh[0] -&gt; displayMesh1 </li>\n\
<li>origMesh2 -&gt; SupportedNode1.outMesh[1] -&gt; UnsupportedNode1 -&gt;displayMesh2</li>\n\
</ul>\n\
<p>In this scenario, the deformer evaluator does nothing. We do support the first chain for displayMesh1, but we do not support the chain for displayMesh2. The deformer evaluator does not support the partial override of a node. In this case, SupportedNode1 has only partial support because the deformer evaluator can override evaluation for outMesh[0] but not for outMesh[1]. This prevents deformer evaluator from doing any GPU work in this scenario.</p>\n\
<p>The deformer evaluator allocates a unique <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> object for each supported node in each supported chain. In Example 4, two <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a> objects are allocated for SupportedNode1, one for multi-element 0 and a second for multi-element 1.</p>\n\
<p>The deformer evaluator\'s emphasis on avoiding geometry read back from the GPU means that unsupported nodes that follow a deformation chain exclude that chain from GPU evaluation. </p>\n\
<dl class=\"section \"><div id=\"dynsection-example0\" class=\"dynheader closed\" onclick=\"return toggleVisibility(this)\" style=\"cursor:pointer;\"><dt><img id=\"dynsection-example0-trigger\" src=\"cpp_ref/closed.png\" alt=\"+\"> <b>Examples: </b></dt></div><div id=\"dynsection-example0-content\" class=\"dyncontent\" style=\"display:none;\"><dd><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/identity_node_2identity_node_8cpp-example.html#_a13\">identityNode/identityNode.cpp</a>, and <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/offset_node_2offset_node_8cpp-example.html#_a34\">offsetNode/offsetNode.cpp</a>.</dd></div>\n\
</dl></div><table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"pub-methods\"></a>\n\
Public Member Functions</h2></td></tr>\n\
<tr class=\"memitem:a47653e33ffb317701f79ea90d860d4c3\"><td class=\"memItemLeft\" translate=\"no\" align=\"right\" valign=\"top\"><a class=\"anchor\" id=\"a47653e33ffb317701f79ea90d860d4c3\"></a>\n\
&#160;</td><td class=\"memItemRight\" translate=\"no\" valign=\"bottom\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a47653e33ffb317701f79ea90d860d4c3\">MPxGPUDeformer</a> ()</td></tr>\n\
<tr class=\"memdesc:a47653e33ffb317701f79ea90d860d4c3\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Constructs an <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\" title=\"Base class for user defined GPU deformer override evaluators. \">MPxGPUDeformer</a>. <br></td></tr>\n\
<tr class=\"separator:a47653e33ffb317701f79ea90d860d4c3\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a0cc8b4a4be9364b5c2c17806eea85f63\"><td class=\"memItemLeft\" translate=\"no\" align=\"right\" valign=\"top\"><a class=\"anchor\" id=\"a0cc8b4a4be9364b5c2c17806eea85f63\"></a>\n\
virtual&#160;</td><td class=\"memItemRight\" translate=\"no\" valign=\"bottom\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a0cc8b4a4be9364b5c2c17806eea85f63\">~MPxGPUDeformer</a> ()</td></tr>\n\
<tr class=\"memdesc:a0cc8b4a4be9364b5c2c17806eea85f63\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">Destructor. <br></td></tr>\n\
<tr class=\"separator:a0cc8b4a4be9364b5c2c17806eea85f63\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:aeb97b4186f7b3334a902bf6c10c07710\"><td class=\"memItemLeft\" translate=\"no\" align=\"right\" valign=\"top\">virtual DeformerStatus&#160;</td><td class=\"memItemRight\" translate=\"no\" valign=\"bottom\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\">evaluate</a> (<a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp;block, const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> &amp;evaluationNode, const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;outputPlug, unsigned int numElements, const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a>, const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>, <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a>, <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> &amp;)=0</td></tr>\n\
<tr class=\"memdesc:aeb97b4186f7b3334a902bf6c10c07710\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">This method is called each time the deformation chain is evaluated.  <a href=\"class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\">More...</a><br></td></tr>\n\
<tr class=\"separator:aeb97b4186f7b3334a902bf6c10c07710\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
<tr class=\"memitem:a74a45d2648335936561898c390281a6a\"><td class=\"memItemLeft\" translate=\"no\" align=\"right\" valign=\"top\">virtual void&#160;</td><td class=\"memItemRight\" translate=\"no\" valign=\"bottom\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a74a45d2648335936561898c390281a6a\">terminate</a> ()</td></tr>\n\
<tr class=\"memdesc:a74a45d2648335936561898c390281a6a\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">This method is called when the GPU deformer is being destroyed.  <a href=\"class_m_px_g_p_u_deformer.html#a74a45d2648335936561898c390281a6a\">More...</a><br></td></tr>\n\
<tr class=\"separator:a74a45d2648335936561898c390281a6a\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table><table class=\"memberdecls\">\n\
<tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"pub-static-methods\"></a>\n\
Static Public Member Functions</h2></td></tr>\n\
<tr class=\"memitem:abb7238dc52214c1b33a9c4000c1f237e\"><td class=\"memItemLeft\" translate=\"no\" align=\"right\" valign=\"top\">static bool&#160;</td><td class=\"memItemRight\" translate=\"no\" valign=\"bottom\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#abb7238dc52214c1b33a9c4000c1f237e\">hasAttributeBeenModified</a> (const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> &amp;evaluationNode, const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;attribute)</td></tr>\n\
<tr class=\"memdesc:abb7238dc52214c1b33a9c4000c1f237e\"><td class=\"mdescLeft\">&#160;</td><td class=\"mdescRight\">This method returns true if the data for attribute on the overridden deformation node has been modified since the last call to <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">MPxGPUDeformer::evaluate()</a>.  <a href=\"class_m_px_g_p_u_deformer.html#abb7238dc52214c1b33a9c4000c1f237e\">More...</a><br></td></tr>\n\
<tr class=\"separator:abb7238dc52214c1b33a9c4000c1f237e\"><td class=\"memSeparator\" colspan=\"2\">&#160;</td></tr>\n\
</table>\n\
<h2 class=\"groupheader\">Member Function Documentation</h2>\n\
<a class=\"anchor\" id=\"aeb97b4186f7b3334a902bf6c10c07710\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\" translate=\"no\">MPxGPUDeformer::DeformerStatus evaluate </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>block</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>evaluationNode</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>outputPlug</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">unsigned int&#160;</td>\n\
          <td class=\"paramname\"><em>numElements</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a>&#160;</td>\n\
          <td class=\"paramname\"><em>inputPositionBuffer</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a>&#160;</td>\n\
          <td class=\"paramname\"><em>inputEvent</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a>&#160;</td>\n\
          <td class=\"paramname\"><em>outputPositionBuffer</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\"><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>outputEvent</em>&#160;</td>\n\
        </tr>\n\
        <tr>\n\
          <td></td>\n\
          <td>)</td>\n\
          <td></td><td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">pure virtual</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>This method is called each time the deformation chain is evaluated. </p>\n\
<p>This method is given an input position buffer, an input event, an output position buffer, and an output event. This method should enqueue kernels which: </p><ul>\n\
<li>wait for the input event. </li>\n\
<li>read the input position information from the position buffer. </li>\n\
<li>write the deformed position information info the output buffer. </li>\n\
<li>save an event into the output event, which indicates it is safe to read the positions from the output buffer when complete.</li>\n\
</ul>\n\
<p>It is safe to enqueue multiple kernels from <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a>. It is safe to read values from the data block and evaluation node passed into <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a>. It is safe to read values for the deformation node being overridden by creating <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_plug.html\" title=\"Create and Access dependency node plugs. \">MPlug</a> objects to read values. It is not safe to access data on any other node or data structure during <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a>. <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> may be invoked in parallel with other dependency graph evaluation or calls to <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> for other deformer nodes.</p>\n\
<p>inputPositionBuffer is a cl_mem object that stores the input mesh positions as float3 elements. inputPositionBuffer is readable but may or may not be writable. The vertices stored in inputPositionBuffer are stored in the same order that <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html\" title=\"Iterator class for geometry data. \">MItGeometry</a> visits the vertices.</p>\n\
<p>outputPositionBuffer is a cl_mem object that stores output mesh positions as float3 elements. outputPositionBuffer is writable but may or may not be readable. The vertices stored in outputPositionBuffer are stored in the same order that <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html\" title=\"Iterator class for geometry data. \">MItGeometry</a> visits the vertices. outputPositionBuffer is not initialized, so you must write position data into outputPositionBuffer for each vertex.</p>\n\
<p>inputPositionBuffer and outputPositionBuffer may or may not represent the same cl_mem object.</p>\n\
<p>If an implementation of <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> must be executed with access to the D3D/GL context because of some GPGPU to D3D/GL interop, then <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> returns kDeformerRetryMainThread. <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> is called a second time for that frame; this call is guaranteed to have safe access to the GPU context.</p>\n\
<p>If the GPU override does not need to modify the input buffer to produce the output buffer, then <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> returns kDeformerPassThrough. In this case, evaluate doesn\'t need to explicitly run a kernel to copy the values from inputPositionBuffer to outputPositionBuffer, Maya handles this automatically. Returning kDeformerPassThrough is faster than explicitly copying the data, we are often able to use the inputPositionBuffer for this GPU deformer in the next downstream GPU deformer. That way no additional heavy work is done at all.</p>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">block</td><td>The data block of the deformer node to be overridden. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">evaluationNode</td><td>The evaluation node of the deformer to be overridden. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">outputPlug</td><td>The output plug of the deformer to be overridden. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">numElements</td><td>The number of float3 elements in inputPositionBuffer and outputPositionBuffer. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">inputPositionBuffer</td><td>The handle to the input positions on the GPU. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">inputEvent</td><td>The event that must be completed before it is safe to read values in inputPositionBuffer. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">outputPositionBuffer</td><td>The handle of the output positions on the GPU. </td></tr>\n\
    <tr><td class=\"paramdir\">[out]</td><td class=\"paramname\">outputEvent</td><td>The event which must be completed before it is safe to read outputPositionBuffer.</td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd><ul>\n\
<li><b>MPxGPUDeformer::kDeformerSuccess</b> if a kernel was successfully created and enqueued. </li>\n\
<li><b>MPxGPUDeformer::kDeformerFailure</b> if no kernel can be created. </li>\n\
<li><b>MPxGPUDeformer::kDeformerRetryMainThread</b> if <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a> requires access to the d3d/gl context. </li>\n\
<li><b>MPxGPUDeformer::kDeformerPassThrough</b> if the inputPositionBuffer should be copied to the outputPositionBuffer by Maya. </li>\n\
</ul>\n\
</dd></dl>\n\
<dl class=\"section \"><div id=\"dynsection-example1\" class=\"dynheader closed\" onclick=\"return toggleVisibility(this)\" style=\"cursor:pointer;\"><dt><img id=\"dynsection-example1-trigger\" src=\"cpp_ref/closed.png\" alt=\"+\"> <b>Examples: </b></dt></div><div id=\"dynsection-example1-content\" class=\"dyncontent\" style=\"display:none;\"><dd><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/identity_node_2identity_node_8cpp-example.html#a18\">identityNode/identityNode.cpp</a>, and <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/offset_node_2offset_node_8cpp-example.html#a35\">offsetNode/offsetNode.cpp</a>.</dd></div>\n\
</dl>\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"a74a45d2648335936561898c390281a6a\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\" translate=\"no\">void terminate </td>\n\
          <td>(</td>\n\
          <td class=\"paramname\"></td><td>)</td>\n\
          <td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">virtual</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>This method is called when the GPU deformer is being destroyed. </p>\n\
<p>Any data stored on this object should be released. </p>\n\
<dl class=\"section \"><div id=\"dynsection-example2\" class=\"dynheader closed\" onclick=\"return toggleVisibility(this)\" style=\"cursor:pointer;\"><dt><img id=\"dynsection-example2-trigger\" src=\"cpp_ref/closed.png\" alt=\"+\"> <b>Examples: </b></dt></div><div id=\"dynsection-example2-content\" class=\"dyncontent\" style=\"display:none;\"><dd><a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/identity_node_2identity_node_8cpp-example.html#a21\">identityNode/identityNode.cpp</a>, and <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/offset_node_2offset_node_8cpp-example.html#a40\">offsetNode/offsetNode.cpp</a>.</dd></div>\n\
</dl>\n\
</div>\n\
</div>\n\
<a class=\"anchor\" id=\"abb7238dc52214c1b33a9c4000c1f237e\"></a>\n\
<div class=\"memitem\">\n\
<div class=\"memproto\">\n\
<table class=\"mlabels\">\n\
  <tr>\n\
  <td class=\"mlabels-left\">\n\
      <table class=\"memname\">\n\
        <tr>\n\
          <td class=\"memname\" translate=\"no\">bool hasAttributeBeenModified </td>\n\
          <td>(</td>\n\
          <td class=\"paramtype\">const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>evaluationNode</em>, </td>\n\
        </tr>\n\
        <tr>\n\
          <td class=\"paramkey\"></td>\n\
          <td></td>\n\
          <td class=\"paramtype\">const <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> &amp;&#160;</td>\n\
          <td class=\"paramname\"><em>attribute</em>&#160;</td>\n\
        </tr>\n\
        <tr>\n\
          <td></td>\n\
          <td>)</td>\n\
          <td></td><td></td>\n\
        </tr>\n\
      </table>\n\
  </td>\n\
  <td class=\"mlabels-right\">\n\
<span class=\"mlabels\"><span class=\"mlabel\">static</span></span>  </td>\n\
  </tr>\n\
</table>\n\
</div><div class=\"memdoc\">\n\
\n\
<p>This method returns true if the data for attribute on the overridden deformation node has been modified since the last call to <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">MPxGPUDeformer::evaluate()</a>. </p>\n\
<p>hasAttributeBeenModified returning true may indicate that the attribute is animated or that the attribute has been interactively changed.</p>\n\
<dl class=\"section note\"><dt>Note</dt><dd>hasAttributeBeenModified stores the top-most array/parent of the plug tree in which given attribute exists in exactly the same way <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#aad069e4fae5beaab80d421a1e18505aa\" title=\"Returns true if the specified attribute has a dirty plug. \">MEvaluationNode::dirtyPlugExists()</a> does.</dd></dl>\n\
<dl class=\"params\"><dt>Parameters</dt><dd>\n\
  <table class=\"params\">\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">evaluationNode</td><td>The evaluation node of the deformer which is overridden. </td></tr>\n\
    <tr><td class=\"paramdir\">[in]</td><td class=\"paramname\">attribute</td><td>The attribute to test. </td></tr>\n\
  </table>\n\
  </dd>\n\
</dl>\n\
<dl class=\"section return\"><dt>Returns</dt><dd>true if the attribute has changed since the last call to <a class=\"el\" translate=\"no\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#aeb97b4186f7b3334a902bf6c10c07710\" title=\"This method is called each time the deformation chain is evaluated. \">evaluate()</a>. </dd></dl>\n\
\n\
</div>\n\
</div>\n\
<hr>The documentation for this class was generated from the following files:<ul>\n\
<li>MPxGPUDeformer.h</li>\n\
<li>MPxGPUDeformer.cpp</li>\n\
</ul>\n\
</div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";