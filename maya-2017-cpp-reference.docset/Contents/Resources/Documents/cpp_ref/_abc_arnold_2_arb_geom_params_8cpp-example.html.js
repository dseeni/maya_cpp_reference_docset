var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2017\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2016-06-16\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>AbcArnold/ArbGeomParams.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_arnold_2_arb_geom_params_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>AbcArnold/ArbGeomParams.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcArnold/ArbGeomParams.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2011,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;ArbGeomParams.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::string GetArnoldTypeString( GeometryScope scope, <span class=\"keywordtype\">int</span> arnoldAPIType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::ostringstream buffer;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (scope)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kUniformScope:</div>\n\
<div class=\"line\">        buffer &lt;&lt; <span class=\"stringliteral\">&quot;uniform&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kVaryingScope:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kVertexScope:</div>\n\
<div class=\"line\">        buffer &lt;&lt; <span class=\"stringliteral\">&quot;varying&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kFacevaryingScope:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;&quot;</span>; <span class=\"comment\">//arnold doesn&#39;t support facevarying user-data</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> kConstantScope:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        buffer &lt;&lt; <span class=\"stringliteral\">&quot;constant&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    buffer &lt;&lt; <span class=\"stringliteral\">&quot; &quot;</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> ( arnoldAPIType )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_INT:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;INT&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_FLOAT:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;FLOAT&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_STRING:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;STRING&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_RGB:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;RGB&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_RGBA:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;RGBA&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_POINT:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;POINT&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_VECTOR:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;VECTOR&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_POINT2:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;POINT2&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> AI_TYPE_MATRIX:</div>\n\
<div class=\"line\">            buffer &lt;&lt; <span class=\"stringliteral\">&quot;MATRIX&quot;</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"comment\">// For now, only support the above types</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;&quot;</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> buffer.str();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AddArbitraryGeomParam( ICompoundProperty &amp; parent,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> PropertyHeader &amp;propHeader,</div>\n\
<div class=\"line\">                            ISampleSelector &amp;sampleSelector,</div>\n\
<div class=\"line\">                            AtNode * primNode,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">int</span> arnoldAPIType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    T param( parent, propHeader.getName() );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !param.valid() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//TODO error message?</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::string declStr = GetArnoldTypeString( param.getScope(),</div>\n\
<div class=\"line\">            arnoldAPIType );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( declStr.empty() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// TODO For now, don&#39;t support user-defined arrays.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// It&#39;s reasonable to support these for kConstantScope</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( param.getArrayExtent() &gt; 1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !AiNodeDeclare( primNode, param.getName().c_str(), declStr.c_str() ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//TODO, AiWarning</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( param.getScope() == kConstantScope ||</div>\n\
<div class=\"line\">            param.getScope() == kUnknownScope)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//Set scalars directly based on arnoldAPIType since we&#39;re</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//not yet support array types here</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> T::prop_type::sample_ptr_type valueSample =</div>\n\
<div class=\"line\">                param.getExpandedValue( sampleSelector ).getVals();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> ( arnoldAPIType )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_INT:</div>\n\
<div class=\"line\">                AiNodeSetInt( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>int32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() )[0] );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_FLOAT:</div>\n\
<div class=\"line\">                AiNodeSetFlt( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() )[0] );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_STRING:</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AiNodeSetStr( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>std::string *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() )[0].c_str() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_RGB:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> float32_t * data = </div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AiNodeSetRGB( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        data[0], data[1], data[2]);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_RGBA:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> float32_t * data = </div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AiNodeSetRGBA( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        data[0], data[1], data[2], data[3]);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_POINT:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> float32_t * data = </div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AiNodeSetPnt( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        data[0], data[1], data[2]);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_VECTOR:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> float32_t * data = </div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AiNodeSetVec( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        data[0], data[1], data[2] );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_POINT2:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> float32_t * data = </div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AiNodeSetPnt2( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        data[0], data[1] );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> AI_TYPE_MATRIX:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> float32_t * data = </div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>float32_t *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() );</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                AtMatrix m;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; 16; ++i )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    *((&amp;m[0][0])+i) = data[i];</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                AiNodeSetMatrix( primNode, param.getName().c_str(), m);</div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                </div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">                <span class=\"comment\">// For now, only support the above types</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Always set arrays for other scopes</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">typename</span> T::prop_type::sample_ptr_type valueSample =</div>\n\
<div class=\"line\">                param.getExpandedValue( sampleSelector ).getVals();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        AiNodeSetArray( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                ArrayConvert( valueSample-&gt;size(), 1, arnoldAPIType,</div>\n\
<div class=\"line\">                        (<span class=\"keywordtype\">void</span> *) valueSample-&gt;get() ) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AddArbitraryStringGeomParam( ICompoundProperty &amp; parent,</div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> PropertyHeader &amp;propHeader,</div>\n\
<div class=\"line\">                            ISampleSelector &amp;sampleSelector,</div>\n\
<div class=\"line\">                            AtNode * primNode)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    IStringGeomParam param( parent, propHeader.getName() );</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !param.valid() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//TODO error message?</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    std::string declStr = GetArnoldTypeString( param.getScope(),</div>\n\
<div class=\"line\">            AI_TYPE_STRING );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( declStr.empty() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// TODO, remove this restriction and support arrays for constant values</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( param.getArrayExtent() &gt; 1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !AiNodeDeclare( primNode, param.getName().c_str(), declStr.c_str() ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//TODO, AiWarning</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    IStringGeomParam::prop_type::sample_ptr_type valueSample =</div>\n\
<div class=\"line\">                param.getExpandedValue( sampleSelector ).getVals();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( param.getScope() == kConstantScope ||</div>\n\
<div class=\"line\">            param.getScope() == kUnknownScope)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AiNodeSetStr( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                        <span class=\"keyword\">reinterpret_cast&lt;</span><span class=\"keyword\">const </span>std::string *<span class=\"keyword\">&gt;</span>(</div>\n\
<div class=\"line\">                                valueSample-&gt;get() )[0].c_str() );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector&lt;const char *&gt; strPtrs;</div>\n\
<div class=\"line\">        strPtrs.reserve( valueSample-&gt;size() );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; valueSample-&gt;size(); ++i )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            strPtrs.push_back( valueSample-&gt;get()[i].c_str() );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        AiNodeSetArray( primNode, param.getName().c_str(),</div>\n\
<div class=\"line\">                ArrayConvert( valueSample-&gt;size(), 1, AI_TYPE_STRING,</div>\n\
<div class=\"line\">                        (<span class=\"keywordtype\">void</span> *) &amp;strPtrs[0] ) );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//UserDefDeclare(node, name.c_str(), userType.c_str())) continue;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//SetUserData(node, name.c_str(), dataSize, apiType, dataStart);  </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> AddArbitraryGeomParams( ICompoundProperty &amp;parent,</div>\n\
<div class=\"line\">                             ISampleSelector &amp;sampleSelector,</div>\n\
<div class=\"line\">                             AtNode * primNode,</div>\n\
<div class=\"line\">                             <span class=\"keyword\">const</span> std::set&lt;std::string&gt; * excludeNames</div>\n\
<div class=\"line\">                           )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( primNode == NULL || !parent.valid() )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">size_t</span> i = 0; i &lt; parent.getNumProperties(); ++i )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> PropertyHeader &amp;propHeader = parent.getPropertyHeader( i );</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::string &amp;propName = propHeader.getName();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (propName.empty()</div>\n\
<div class=\"line\">            || ( excludeNames</div>\n\
<div class=\"line\">                 &amp;&amp; excludeNames-&gt;find( propName ) != excludeNames-&gt;end() ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( IFloatGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IFloatGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_FLOAT);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IInt32GeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IInt32GeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_INT);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IStringGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryStringGeomParam(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IV2fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IV2fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_POINT2);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IV3fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IV3fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_VECTOR);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IP3fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IP3fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_POINT);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IN3fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IN3fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_VECTOR);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IC3fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IC3fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_RGB);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( IC4fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IC4fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_RGBA);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( IM44fGeomParam::matches( propHeader ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            AddArbitraryGeomParam&lt;IM44fGeomParam&gt;(</div>\n\
<div class=\"line\">                    parent,</div>\n\
<div class=\"line\">                    propHeader,</div>\n\
<div class=\"line\">                    sampleSelector,</div>\n\
<div class=\"line\">                    primNode,</div>\n\
<div class=\"line\">                    AI_TYPE_MATRIX);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div><br></div>\n\
   </div></body>\n\
</html>\n\
";