var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>footPrintNode_GeometryOverride/footPrintNode_GeometryOverride.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'foot_print_node__geometry_override_2foot_print_node__geometry_override_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>footPrintNode_GeometryOverride/footPrintNode_GeometryOverride.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">footPrintNode_GeometryOverride/footPrintNode_GeometryOverride.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license agreement</span></div>\n\
<div class=\"line\"><span class=\"comment\">// provided at the time of installation or download, or which otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\">// accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in demonstrates how to draw a simple mesh like foot Print in an efficient way.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This efficient way is supported in Viewport 2.0.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For comparison, you can also reference a Maya Developer Kit sample named footPrintNode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In that sample, we draw the footPrint using the MUIDrawManager primitives in footPrintDrawOverride::addUIDrawables()</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// For comparison, you can also reference another Maya Developer Kit sample named rawfootPrintNode.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In that sample, we draw the footPrint with OpenGL\\DX in method rawFootPrintDrawOverride::draw().</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plugin uses two different techniques to optimize the performance of the foot print draw</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in VP2.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Technique 1:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In order to know when the FootPrintGeometryOverride geometry needs to be updated the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// footPrint node taps into dirty propagation and the evaluation manager to track when</span></div>\n\
<div class=\"line\"><span class=\"comment\">// attributes which affect geometry change.  FootPrintGeometryOverride can then query</span></div>\n\
<div class=\"line\"><span class=\"comment\">// footPrint to find out if a geometry update is necessary.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Technique 2:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// In order to know when the FootPrintGeometryOverride render items need to be updated</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the factors affecting how render items are drawn are stored.  When updateRenderItems()</span></div>\n\
<div class=\"line\"><span class=\"comment\">// is called the current values can be compared against the previously used values,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// allowing the bulk of the updateRenderItems() work to only occur when necessary.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Evaluation Caching:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// footPrint is fully compatible with Evaluation Caching.  Supporting Evaluation Caching</span></div>\n\
<div class=\"line\"><span class=\"comment\">// does add some additional, subtle requirements on the plug-in node.  Evaluation Caching</span></div>\n\
<div class=\"line\"><span class=\"comment\">// automatically stores data for two types of attributes: output attributes and dynamic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// attributes, where output attributes are defined as any attribute which is affected by</span></div>\n\
<div class=\"line\"><span class=\"comment\">// another attribute on the node.  The affects relationship can be created either by</span></div>\n\
<div class=\"line\"><span class=\"comment\">// calling MPxNode::attributeAffects() or by returning affected attributes from</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MPxNode::setDependentsDirty().</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Using Evaluation Caching with Evaluation Manager Parallel Update has an additional issue</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to be aware of.  When using Evaluation Manager Parallel Update some MPxGeometryOverride</span></div>\n\
<div class=\"line\"><span class=\"comment\">// methods are called after the corresponding DAG node has been evaluated but before the </span></div>\n\
<div class=\"line\"><span class=\"comment\">// full evaluation graph has been evaluated.  When Evaluation Caching is enabled only</span></div>\n\
<div class=\"line\"><span class=\"comment\">// cached DG values may be read before the full evaluation graph has been evaluated.  Therefore,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// when using Evaluation Manager Parallel Update and Evaluation Caching only cached DG values </span></div>\n\
<div class=\"line\"><span class=\"comment\">// may be read.  Attempting to read an uncached value before evaluation finishes results in </span></div>\n\
<div class=\"line\"><span class=\"comment\">// undefined behavior (incorrect data or crashes).</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// VP2 Custom Caching:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// FootPrintGeometryOverride is fully compatible with VP2 Custom Caching.  When using VP2</span></div>\n\
<div class=\"line\"><span class=\"comment\">// custom caching the MPxGeometryOverride may be invoked in the normal context or in a </span></div>\n\
<div class=\"line\"><span class=\"comment\">// background thread using another context.  If playback and background evaluation occur</span></div>\n\
<div class=\"line\"><span class=\"comment\">// concurrently Maya guarantees that all of the MPxGeoemtryOverride methods called for a</span></div>\n\
<div class=\"line\"><span class=\"comment\">// context occur atomically without being interleaved with MPxGeometryOverride methods</span></div>\n\
<div class=\"line\"><span class=\"comment\">// for the same DAG object in a different context.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// However, Maya does not make any timing guarantee between the call(s) to evaluate</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or restore values to the MPxNode and calls to the MPxGeometryOverride.  For example,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// a postEvaluation call in the background evaluation thread may occur at the some time</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the foreground thread is using the MPxGeometryOverride.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// This means that any communication which occurs between the MPxNode during evaluation</span></div>\n\
<div class=\"line\"><span class=\"comment\">// and the MPxGeometryOverride must be context aware.  The communication channel must</span></div>\n\
<div class=\"line\"><span class=\"comment\">// use different storage for each context.  The easiest way to implement this is to use</span></div>\n\
<div class=\"line\"><span class=\"comment\">// internal attributes on the MPxNode which may be accessed by the MPxGeometryOverride.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Internal attributes are used as the communication channel between footPrint and</span></div>\n\
<div class=\"line\"><span class=\"comment\">// FootPrintGeometryOverride as a part of Technique 1.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// Example usage is to load the plug-in and create the node using</span></div>\n\
<div class=\"line\"><span class=\"comment\">// the createNode command:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// loadPlugin footPrintNode_GeometryOverride;</span></div>\n\
<div class=\"line\"><span class=\"comment\">// createNode footPrint_GeometryOverride;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxLocatorNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTypeId.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataBlock.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MColor.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDistance.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnUnitAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MEvaluationNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagMessage.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Viewport 2.0 includes</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxGeometryOverride.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUserData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MShaderManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometryUtilities.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPointArray.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;unordered_map&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Foot Data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> sole[][3] = { {  0.00f, 0.0f, -0.70f },</div>\n\
<div class=\"line\">                        {  0.04f, 0.0f, -0.69f },</div>\n\
<div class=\"line\">                        {  0.09f, 0.0f, -0.65f },</div>\n\
<div class=\"line\">                        {  0.13f, 0.0f, -0.61f },</div>\n\
<div class=\"line\">                        {  0.16f, 0.0f, -0.54f },</div>\n\
<div class=\"line\">                        {  0.17f, 0.0f, -0.46f },</div>\n\
<div class=\"line\">                        {  0.17f, 0.0f, -0.35f },</div>\n\
<div class=\"line\">                        {  0.16f, 0.0f, -0.25f },</div>\n\
<div class=\"line\">                        {  0.15f, 0.0f, -0.14f },</div>\n\
<div class=\"line\">                        {  0.13f, 0.0f,  0.00f },</div>\n\
<div class=\"line\">                        {  0.00f, 0.0f,  0.00f },</div>\n\
<div class=\"line\">                        { -0.13f, 0.0f,  0.00f },</div>\n\
<div class=\"line\">                        { -0.15f, 0.0f, -0.14f },</div>\n\
<div class=\"line\">                        { -0.16f, 0.0f, -0.25f },</div>\n\
<div class=\"line\">                        { -0.17f, 0.0f, -0.35f },</div>\n\
<div class=\"line\">                        { -0.17f, 0.0f, -0.46f },</div>\n\
<div class=\"line\">                        { -0.16f, 0.0f, -0.54f },</div>\n\
<div class=\"line\">                        { -0.13f, 0.0f, -0.61f },</div>\n\
<div class=\"line\">                        { -0.09f, 0.0f, -0.65f },</div>\n\
<div class=\"line\">                        { -0.04f, 0.0f, -0.69f },</div>\n\
<div class=\"line\">                        { -0.00f, 0.0f, -0.70f } };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> heel[][3] = { {  0.00f, 0.0f,  0.06f },</div>\n\
<div class=\"line\">                        {  0.13f, 0.0f,  0.06f },</div>\n\
<div class=\"line\">                        {  0.14f, 0.0f,  0.15f },</div>\n\
<div class=\"line\">                        {  0.14f, 0.0f,  0.21f },</div>\n\
<div class=\"line\">                        {  0.13f, 0.0f,  0.25f },</div>\n\
<div class=\"line\">                        {  0.11f, 0.0f,  0.28f },</div>\n\
<div class=\"line\">                        {  0.09f, 0.0f,  0.29f },</div>\n\
<div class=\"line\">                        {  0.04f, 0.0f,  0.30f },</div>\n\
<div class=\"line\">                        {  0.00f, 0.0f,  0.30f },</div>\n\
<div class=\"line\">                        { -0.04f, 0.0f,  0.30f },</div>\n\
<div class=\"line\">                        { -0.09f, 0.0f,  0.29f },</div>\n\
<div class=\"line\">                        { -0.11f, 0.0f,  0.28f },</div>\n\
<div class=\"line\">                        { -0.13f, 0.0f,  0.25f },</div>\n\
<div class=\"line\">                        { -0.14f, 0.0f,  0.21f },</div>\n\
<div class=\"line\">                        { -0.14f, 0.0f,  0.15f },</div>\n\
<div class=\"line\">                        { -0.13f, 0.0f,  0.06f },</div>\n\
<div class=\"line\">                        { -0.00f, 0.0f,  0.06f } };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> soleCount = 21;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> heelCount = 17;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Viewport 2.0 specific data</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> colorParameterName_ = <span class=\"stringliteral\">&quot;solidColor&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> wireframeItemName_  = <span class=\"stringliteral\">&quot;footPrintLocatorWires&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> shadedItemName_     = <span class=\"stringliteral\">&quot;footPrintLocatorTriangles&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maintain a mini cache for 3d solid shaders in order to reuse the shader</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// instance whenever possible. This can allow Viewport 2.0 optimization e.g.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the GPU instancing system and the consolidation system to be leveraged.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MColorHash</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::size_t operator()(<span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; color)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::size_t seed = 0;</div>\n\
<div class=\"line\">            CombineHashCode(seed, color.<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a>);</div>\n\
<div class=\"line\">            CombineHashCode(seed, color.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a>);</div>\n\
<div class=\"line\">            CombineHashCode(seed, color.<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a>);</div>\n\
<div class=\"line\">            CombineHashCode(seed, color.<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4aec1a5be9d9a4a394a2e49e9744286e\">a</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> seed;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> CombineHashCode(std::size_t&amp; seed, <span class=\"keywordtype\">float</span> v)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">            std::hash&lt;float&gt; hasher;</div>\n\
<div class=\"line\">            seed ^= hasher(v) + 0x9e3779b9 + (seed &lt;&lt; 6) + (seed &gt;&gt; 2);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::unordered_map&lt;MColor, MHWRender::MShaderInstance*, MColorHash&gt; the3dSolidShaders;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* get3dSolidShader(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; color)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Return the shader instance if exists.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">auto</span> it = the3dSolidShaders.find(color);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (it != the3dSolidShaders.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> it-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* shader = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shader = shaderMgr-&gt;<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a8e4ad27d691969622af2b05d8c6213d9\">getStockShader</a>(<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a1f7c5db8a3b5804c6ffce5f305bf51a8a7a0eb28b48e8f9ed6f666b52a27a45f5\">MHWRender::MShaderManager::k3dSolidShader</a>);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shader)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> solidColor[] = { color.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a4788d82c901b9367dd5c0daff8a7616b\">r</a>, color.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a8cf17d727651616de6f2b79ef32170cd\">g</a>, color.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html#a83fc1af92e29717b4513d121b0c72c7d\">b</a>, 1.0f };</div>\n\
<div class=\"line\">            shader-&gt;<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aa17e2c9a17b86064950103066fa307ef\">setParameter</a>(colorParameterName_, solidColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            the3dSolidShaders[color] = shader;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> shader;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> releaseShaders()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MHWRender::MRenderer</a>* renderer = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (renderer)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html\">MHWRender::MShaderManager</a>* shaderMgr = renderer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4603e18a1b89b798a2e4a4f36d9b5125\">getShaderManager</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (shaderMgr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keyword\">auto</span> it = the3dSolidShaders.begin(); it != the3dSolidShaders.end(); it++)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    shaderMgr-&gt;<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8\">releaseShader</a>(it-&gt;second);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                the3dSolidShaders.clear();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> MS::kFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: Store per-instance draw information (such as if a given instance is </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// selected).  Set up a data structure to hold this information.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// VP2 Custom Caching: This information does not need to be stored in context aware storage</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// because this information is only used in requiresUpdateRenderItems() and</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// updateRenderItems() and those methods are not invoked from the background thread</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// during for VP2 Custom Caching.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VP2InstanceDrawInfo</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        VP2InstanceDrawInfo() : mDisplayStatus(MHWRender::DisplayStatus::kNoStatus) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bca\">MHWRender::DisplayStatus</a> mDisplayStatus;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> mDisplayColor;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: Use a map to store the instance data rather than a vector because the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MDagPath::instanceNumber() is not necessarily monotonically increasing and starting</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// at 0.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::unordered_map&lt;unsigned int, VP2InstanceDrawInfo*&gt; VP2InstancesDrawInfo;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VP2DrawInfo</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        VP2DrawInfo() : mCallbackInitialized(<span class=\"keyword\">false</span>) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        VP2InstancesDrawInfo mInstanceInfo;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/_m_message_8h.html#a42e6e9d54a954c3e2d798a156091ca1d\">MCallbackId</a> mInstanceAddedCallbackId;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/_m_message_8h.html#a42e6e9d54a954c3e2d798a156091ca1d\">MCallbackId</a> mInstanceRemovedCallbackId;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> mCallbackInitialized;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">} <span class=\"comment\">// anonymous namespace</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Node implementation with standard viewport draw</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>footPrint : <span class=\"keyword\">public</span> <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_locator_node.html\">MPxLocatorNode</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    footPrint();</div>\n\
<div class=\"line\">    ~footPrint() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_locator_node.html#a4254418493ef1ab6847b9e5f395fa3de\">isBounded</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>    <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_locator_node.html#a762dab569a9d88aa731f3c7229803e1e\">boundingBox</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a> <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_locator_node.html#acedd5e97c21aacfc5f976499438c7fa8\">getShapeSelectionMask</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#abd7d1dad4e4f0b922bf5ac4fc9c0230a\">setDependentsDirty</a>(<span class=\"keyword\">const</span> <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; plugArray) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a93e355c11a2c9a0f19f8d7cfa887af2b\">postEvaluation</a>(<span class=\"keyword\">const</span> <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a>&amp; context, <span class=\"keyword\">const</span> <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, PostEvaluationType evalType) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"keywordtype\">void</span> *          creator();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>         initialize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         size;         <span class=\"comment\">// The size of the foot</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        Technique 1: Use an internal attribute to store if any attribute which affects</span></div>\n\
<div class=\"line\"><span class=\"comment\">        the geometry created by FootPrintGeometryOverride has changed since the last time</span></div>\n\
<div class=\"line\"><span class=\"comment\">        FootPrintGeometryOverride was executed.  Storing this information here is</span></div>\n\
<div class=\"line\"><span class=\"comment\">        breaking our abstraction.  footPrint has to know about details of how</span></div>\n\
<div class=\"line\"><span class=\"comment\">        FootPrintGeometryOverride works that it really shouldn&#39;t know.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        However, attributes are stored in the MDataBlock and the MDataBlock is context</span></div>\n\
<div class=\"line\"><span class=\"comment\">        aware storage, so internal attributes are a good way to communicate between the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        MPxNode and the MPxGeometryOverride which is safe to use with VP2 Custom Caching.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>         sizeChangedSinceVP2Update;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setSizeChangedSinceVP2Update(<span class=\"keywordtype\">bool</span> sizeChanged);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> getSizeChangedSinceVP2Update();</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>     id;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     drawDbClassification;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>     drawRegistrantId;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>FootPrintGeometryOverride : <span class=\"keyword\">public</span> <a name=\"_a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html\">MHWRender::MPxGeometryOverride</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html\">MHWRender::MPxGeometryOverride</a>* Creator(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> FootPrintGeometryOverride(obj);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~FootPrintGeometryOverride() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49\">MHWRender::DrawAPI</a> <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a9c43d7192e56c01d8dde77fabd843a0e\">supportedDrawAPIs</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a05c70618c28196399681a784a3686b50\">hasUIDrawables</a>()<span class=\"keyword\"> const override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a3179af16c4aaaf82031b60a5acb82e86\">requiresUpdateRenderItems</a>(<span class=\"keyword\">const</span> <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path) <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a04941a5d23a1f72a99e9a620a7f1bd73\">supportsEvaluationManagerParallelUpdate</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#aa5eb31a442fb3f0eeca9b941b10691f4\">supportsVP2CustomCaching</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a76b919d04fc3deb9262474e7e143733b\">requiresGeometryUpdate</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a66874f312bfb87c0159dfbfacafbc3fd\">updateDG</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a2bd5a3515d1cf5223d6b0851dec33aa2\">isIndexingDirty</a>(<span class=\"keyword\">const</span> <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a> &amp;item)<span class=\"keyword\"> override </span>{ <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a45aa4d75f1caf5b4783871b4996b38b6\">isStreamDirty</a>(<span class=\"keyword\">const</span> <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> &amp;desc)<span class=\"keyword\"> override </span>{ <span class=\"keywordflow\">return</span> mFootPrintNode-&gt;getSizeChangedSinceVP2Update(); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#abad8e8b1f0e06eea32e2be8f97200941\">updateRenderItems</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;path, <a name=\"_a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; list) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a37c7a59c1e34ed5e0528fe0ac351b519\">populateGeometry</a>(<span class=\"keyword\">const</span> <a name=\"_a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html\">MHWRender::MGeometryRequirements</a> &amp;requirements, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a> &amp;renderItems, <a name=\"_a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a> &amp;data) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#aa4c938a24a336e5ca1c28372bc6972d7\">cleanUp</a>()<span class=\"keyword\"> override </span>{};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Tracing will look something like the following when in shaded mode:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Geometry override DG update: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Start geometry override render item update: |transform1|footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: - Call API to update render items</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override render item update: |transform1|footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Start geometry override update stream and indexing data: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: - Update render item: soleLocatorTriangles</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: - Update render item: heelLocatorTriangles</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override stream and indexing data: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override clean up: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        at creation time.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Geometry override DG update: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Start geometry override render item update: |transform1|footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: - Call API to update render items</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override render item update: |transform1|footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override clean up: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        on selection change.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Geometry override DG update: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Start geometry override render item update: |transform1|footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: - Call API to update render items</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override render item update: |transform1|footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Geometry override dirty stream check: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: Start geometry override update stream and indexing data: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override stream and indexing data: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrintGeometryOverride: End geometry override clean up: footPrint1</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    for footprint size change.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    This is based on the existing stream and indexing dirty flags being used</span></div>\n\
<div class=\"line\"><span class=\"comment\">    which attempts to minimize the amount of render item, vertex buffer and indexing update.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a498335c9c0b0ff5dce6efc063769eb3b\">traceCallSequence</a>()<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// Return true if internal tracing is desired.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a4ff99ebf5c2ae4a67e7ea54547c2e10b\">handleTraceMessage</a>(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp;message)<span class=\"keyword\"> const override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a3d14e9f9ed022a80f664eac0136c2f7a\">MGlobal::displayInfo</a>(<span class=\"stringliteral\">&quot;footPrintGeometryOverride: &quot;</span> + message);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Some simple custom message formatting.</span></div>\n\
<div class=\"line\">        fputs(<span class=\"stringliteral\">&quot;footPrintGeometryOverride: &quot;</span>, stderr);</div>\n\
<div class=\"line\">        fputs(message.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>(), stderr);</div>\n\
<div class=\"line\">        fputs(<span class=\"stringliteral\">&quot;\\n&quot;</span>, stderr);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> instancingChangedCallback(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; child, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parent, <span class=\"keywordtype\">void</span>* clientData);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    FootPrintGeometryOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clearInstanceInfo();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>footPrint;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> mLocatorNode;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> mMultiplier;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 1: footPrint tracks when any attributes which affect the geometry change.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This information may be accessed at any time, so store a pointer to the associated</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// DAG node.</span></div>\n\
<div class=\"line\">    footPrint* mFootPrintNode;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: storage for last used values to track if render items need to update.</span></div>\n\
<div class=\"line\">    VP2DrawInfo mVP2DrawInfo;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> footPrint::size;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> footPrint::sizeChangedSinceVP2Update;</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> footPrint::id( 0x00080033 );</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> footPrint::drawDbClassification(<span class=\"stringliteral\">&quot;drawdb/geometry/light/footPrint_GeometryOverride&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> sMakeFootPrintDirLight = (getenv(<span class=\"stringliteral\">&quot;MAYA_FOOTPRINT_GEOMETRY_OVERRIDE_AS_DIRLIGHT&quot;</span>) != NULL);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> lightClassification(<span class=\"stringliteral\">&quot;light:drawdb/geometry/light/footPrint_GeometryOverride:drawdb/light/directionalLight&quot;</span>); </div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> footPrint::drawRegistrantId(<span class=\"stringliteral\">&quot;FootprintNode_GeometryOverridePlugin&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">footPrint::footPrint() {}</div>\n\
<div class=\"line\">footPrint::~footPrint() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Technique 1: Use setDependentsDirty to tap into Maya&#39;s dirty propagation to track when</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the size plug changes so that FootPrintGeometryOverride can find out if it needs to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    update geometry.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">    Warning: any time you implement setDependentsDirty you probably also need to implement</span></div>\n\
<div class=\"line\"><span class=\"comment\">    something similar in preEvaluation() or postEvaluation() so the code works correctly </span></div>\n\
<div class=\"line\"><span class=\"comment\">    with Evaluation Manager enabled.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> footPrint::setDependentsDirty(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a>&amp; plugArray)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug.<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#a3694e3dcc355fb7d654a0bb6a8a3ff1c\">partialName</a>() == <span class=\"stringliteral\">&quot;sz&quot;</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setSizeChangedSinceVP2Update(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> footPrint::isBounded()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> footPrint::boundingBox()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the size</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> thisNode = thisMObject();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug( thisNode, size );</div>\n\
<div class=\"line\">    <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a> sizeVal;</div>\n\
<div class=\"line\">    plug.<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>( sizeVal );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> multiplier = sizeVal.<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#ace39ab92685b0f5ab1a2925e748efb1f\">asCentimeters</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> corner1( -0.17, 0.0, -0.7 );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> corner2( 0.17, 0.0, 0.3 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    corner1 = corner1 * multiplier;</div>\n\
<div class=\"line\">    corner2 = corner2 * multiplier;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>( corner1, corner2 );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a> footPrint::getShapeSelectionMask()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html\">MSelectionMask</a>(<span class=\"stringliteral\">&quot;footPrintSelection&quot;</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">Technique 1: Use postEvaluation to tap into Evaluation Manager dirty information</span></div>\n\
<div class=\"line\"><span class=\"comment\">to track when the size plug changes so that FootPrintNodeGeometryOverride can </span></div>\n\
<div class=\"line\"><span class=\"comment\">find out if it needs to update geometry.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Evaluation Caching: It is critical for Evaluation Caching that the EM dirty information</span></div>\n\
<div class=\"line\"><span class=\"comment\">is accessed from postEvaluation rather than preEvaluation.  During Evaluation</span></div>\n\
<div class=\"line\"><span class=\"comment\">Caching restore (or VP2 Custom Caching restore) preEvaluation will not be called,</span></div>\n\
<div class=\"line\"><span class=\"comment\">causing the sizeChangedSinceVP2Update flag to be set incorrectly and preventing VP2</span></div>\n\
<div class=\"line\"><span class=\"comment\">from updating to use the new data restored from the cache.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">preEvaluation should be used to prepare for the drawing override calls</span></div>\n\
<div class=\"line\"><span class=\"comment\">postEvaluation should be used to notify consumers of the data (VP2) that new data is ready.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Warning: any time you implement preEvaluation or postEvaluation and use dirtyPlugExists</span></div>\n\
<div class=\"line\"><span class=\"comment\">you probably also need to implement something similar in setDependentsDirty() so</span></div>\n\
<div class=\"line\"><span class=\"comment\">the code works correctly without Evaluation Manager.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> footPrint::postEvaluation(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html\">MDGContext</a>&amp; context, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, PostEvaluationType evalType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (evaluationNode.<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html#abc632b073f3b3abeb4ca052f20573dd6\">dirtyPlugExists</a>(size, &amp;status) &amp;&amp; status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setSizeChangedSinceVP2Update(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> footPrint::setSizeChangedSinceVP2Update(<span class=\"keywordtype\">bool</span> sizeChanged)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        Calling forceCache here should be fast.  Possible calling sites are:</span></div>\n\
<div class=\"line\"><span class=\"comment\">         - setDependentsDirty() -&gt; the normal context is current.</span></div>\n\
<div class=\"line\"><span class=\"comment\">         - preparing the draw in VP2 -&gt; the normal context is current.</span></div>\n\
<div class=\"line\"><span class=\"comment\">         - background evaluation postEvaluation() -&gt; datablock for background context already exists.</span></div>\n\
<div class=\"line\"><span class=\"comment\">         - background evaluation for VP2 Custom Caching -&gt; datablock for background context already exists.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> block = forceCache();</div>\n\
<div class=\"line\">    <a name=\"_a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> sizeChangedSinceVP2UpdateHandle = block.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(sizeChangedSinceVP2Update);</div>\n\
<div class=\"line\">    sizeChangedSinceVP2UpdateHandle.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#ad1c723b684b73109b0918a3dd8984340\">setBool</a>(sizeChanged);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> footPrint::getSizeChangedSinceVP2Update()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> block = forceCache();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> sizeChangedSinceVP2UpdateHandle = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(sizeChangedSinceVP2Update);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sizeChangedSinceVP2UpdateHandle.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a69fdebf4dcdf33c1b313eb4a426e0d45\">asBool</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* footPrint::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> footPrint();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Viewport 2.0 override implementation</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\">FootPrintGeometryOverride::FootPrintGeometryOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">: <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>::MPxGeometryOverride(obj)</div>\n\
<div class=\"line\">, mLocatorNode(obj)</div>\n\
<div class=\"line\">, mMultiplier(0.0f)</div>\n\
<div class=\"line\">, mFootPrintNode(nullptr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> returnStatus;</div>\n\
<div class=\"line\">    <a name=\"_a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> dependNode(mLocatorNode, &amp;returnStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (returnStatus != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <a name=\"_a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html\">MPxNode</a>* footPrintNode = dependNode.userNode(&amp;returnStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (returnStatus != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) footPrintNode = <span class=\"keyword\">nullptr</span>;</div>\n\
<div class=\"line\">    mFootPrintNode = <span class=\"keyword\">dynamic_cast&lt;</span>footPrint*<span class=\"keyword\">&gt;</span>(footPrintNode);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">FootPrintGeometryOverride::~FootPrintGeometryOverride()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: Clean up the memory allocated to store the per instance information.</span></div>\n\
<div class=\"line\">    clearInstanceInfo();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: Remove the callbacks added to track instancing changed messages.</span></div>\n\
<div class=\"line\">    <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mVP2DrawInfo.mInstanceAddedCallbackId);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09\">MMessage::removeCallback</a>(mVP2DrawInfo.mInstanceRemovedCallbackId);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FootPrintGeometryOverride::clearInstanceInfo()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    VP2InstancesDrawInfo&amp; instanceInfo = mVP2DrawInfo.mInstanceInfo;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">auto</span> it = instanceInfo.begin(); it != instanceInfo.end(); it++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> it-&gt;second;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    instanceInfo.clear();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49\">MHWRender::DrawAPI</a> FootPrintGeometryOverride::supportedDrawAPIs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// this plugin supports both GL and DX</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49a72361be679c1aca1c1be5f9b500a3315\">MHWRender::kOpenGL</a> | <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49a90bc0a1678af7ac4d1e62e2e954be4e5\">MHWRender::kDirectX11</a> | <a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49aaebf48c70b63878eff38483392f19fb7\">MHWRender::kOpenGLCoreProfile</a>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FootPrintGeometryOverride::updateDG()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 1: Only update mMultiplier when the footPrint node has signaled that mMultiplier has</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// changed.  In this trivial example it is possible to get the current value and compare it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to what is stored in mMultiplier.  In a real use case the value may be a poly</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// mesh with a million vertices, which would make such a comparison terrible for performance.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mFootPrintNode-&gt;getSizeChangedSinceVP2Update())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> plug(mLocatorNode, footPrint::size);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!plug.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html\">MDistance</a> sizeVal;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab017c746e6e0c13bf994b2458d3b5eee\">getValue</a>(sizeVal))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mMultiplier = (float)sizeVal.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_distance.html#ace39ab92685b0f5ab1a2925e748efb1f\">asCentimeters</a>();</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FootPrintGeometryOverride::instancingChangedCallback(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; child, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; parent, <span class=\"keywordtype\">void</span>* clientData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    FootPrintGeometryOverride* geometryOverride = <span class=\"keyword\">reinterpret_cast&lt;</span>FootPrintGeometryOverride*<span class=\"keyword\">&gt;</span>(clientData);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: Understanding the relationship between the list of old instances and the new instances</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// is very challenging.  Rather than writing some complex code to handle it, destroy all our per-instance</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// information.  This means updateRenderItems must be expected for all instances which may be slow.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Typically instancing changes are interactive changes triggered by the user, so this won&#39;t impact </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// playback performance of the node.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If your plug-in is using a lot of DAG instancing and you need high performance you should consider using</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MPxSubSceneOverride instead of MPxGeometryOverride.  MPxSubSceneOverride gives you the flexibility to make</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the workflows which are important to you fast.</span></div>\n\
<div class=\"line\">    geometryOverride-&gt;clearInstanceInfo();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> FootPrintGeometryOverride::requiresUpdateRenderItems(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: If the display status and display color have not changed, then don&#39;t do any</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// render item updates.  The first time updateRenderItems() is called the items must be added.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize mDisplayStatus to kNoStatus to ensure this occurs.  The current display status</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// can never be kNoStatus.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> returnStatus;</div>\n\
<div class=\"line\">    <span class=\"keyword\">auto</span> instanceDrawInfoIter = mVP2DrawInfo.mInstanceInfo.find(path.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac908055bb978bce38fcb5f1af6620760\">instanceNumber</a>(&amp;returnStatus));    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (returnStatus == <a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a> || (mVP2DrawInfo.mInstanceInfo.end() == instanceDrawInfoIter)) <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> VP2InstanceDrawInfo* instanceDrawInfo = instanceDrawInfoIter-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bca\">MHWRender::DisplayStatus</a> currentDisplayStatus = <a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#aa2838b92c9f7db4a810690a986199134\">MHWRender::MGeometryUtilities::displayStatus</a>(path);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> currentDisplayColor = <a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#a6221bc7407b14246b14f79a751496276\">MHWRender::MGeometryUtilities::wireframeColor</a>(path);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (currentDisplayStatus == instanceDrawInfo-&gt;mDisplayStatus &amp;&amp; currentDisplayColor == instanceDrawInfo-&gt;mDisplayColor) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> FootPrintGeometryOverride::supportsEvaluationManagerParallelUpdate()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> FootPrintGeometryOverride::supportsVP2CustomCaching()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> FootPrintGeometryOverride::requiresGeometryUpdate()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> mFootPrintNode-&gt;getSizeChangedSinceVP2Update();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FootPrintGeometryOverride::updateRenderItems( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; path, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; list )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// There should always be an instanceDrawInfo for path, because requiresUpdateRenderItems()</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// was called immediately before updateRenderItems() and requiresUpdateRenderItems() adds it.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> returnStatus;</div>\n\
<div class=\"line\">    VP2InstanceDrawInfo* instanceDrawInfo = mVP2DrawInfo.mInstanceInfo[path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac908055bb978bce38fcb5f1af6620760\">instanceNumber</a>(&amp;returnStatus)];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (returnStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!instanceDrawInfo)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        instanceDrawInfo = <span class=\"keyword\">new</span> VP2InstanceDrawInfo;</div>\n\
<div class=\"line\">        mVP2DrawInfo.mInstanceInfo[path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac908055bb978bce38fcb5f1af6620760\">instanceNumber</a>(&amp;returnStatus)] = instanceDrawInfo;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (returnStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Technique 2: Store information about each instance of the footPrint node.  If </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// instances are added or removed then update our per-instance information.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!mVP2DrawInfo.mCallbackInitialized)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            mVP2DrawInfo.mCallbackInitialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; nonConstPath = <span class=\"keyword\">const_cast&lt;</span><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp;<span class=\"keyword\">&gt;</span>(path);</div>\n\
<div class=\"line\">            mVP2DrawInfo.mInstanceAddedCallbackId = <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_message.html#a9c301d5a30d9424eea522166b283a98d\">MDagMessage::addInstanceAddedDagPathCallback</a>(nonConstPath, &amp;FootPrintGeometryOverride::instancingChangedCallback, <span class=\"keyword\">this</span>, &amp;returnStatus);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (returnStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            mVP2DrawInfo.mInstanceRemovedCallbackId = <a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_message.html#aafe921878a14c3ae07f6a453773c59e2\">MDagMessage::addInstanceRemovedDagPathCallback</a>(nonConstPath, &amp;FootPrintGeometryOverride::instancingChangedCallback, <span class=\"keyword\">this</span>, &amp;returnStatus);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (returnStatus == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bca\">MHWRender::DisplayStatus</a> displayStatus = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#aa2838b92c9f7db4a810690a986199134\">MHWRender::MGeometryUtilities::displayStatus</a>(path);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> displayColor = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#a6221bc7407b14246b14f79a751496276\">MHWRender::MGeometryUtilities::wireframeColor</a>(path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 2: updateRenderItems() is going to be called so record the values that </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// affect which render items are drawn to avoid extracting the values from Maya twice.</span></div>\n\
<div class=\"line\">    instanceDrawInfo-&gt;mDisplayStatus = displayStatus;</div>\n\
<div class=\"line\">    instanceDrawInfo-&gt;mDisplayColor = displayColor;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html\">MHWRender::MShaderInstance</a>* shader = get3dSolidShader(displayColor);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!shader) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> depthPriority;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (displayStatus)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaa1606a62e097fcfa55af6251a83b44243\">MHWRender::kLead</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaab6a8784b4cf96692e0d71d19c44ce732\">MHWRender::kActive</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaa88694d85749c9c85738c56c4912c385a\">MHWRender::kHilite</a>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> <a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaa1d8e358d420ca7c9f6888faf51f4ec75\">MHWRender::kActiveComponent</a>:</div>\n\
<div class=\"line\">        depthPriority = <a name=\"a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#adb484c507442ebce56eac38bd07cac07\">MHWRender::MRenderItem::sActiveWireDepthPriority</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        depthPriority = <a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ae591b9bc3a27641c854ab0703a90cab1\">MHWRender::MRenderItem::sDormantFilledDepthPriority</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* wireframeItem = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> index = list.<a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a4cfe9fc51a24bca06d2619a55542f689\">indexOf</a>(wireframeItemName_);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (index &lt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        wireframeItem = <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ac74a014f3346d8ddac693b7f034fa228\">MHWRender::MRenderItem::Create</a>(</div>\n\
<div class=\"line\">            wireframeItemName_,</div>\n\
<div class=\"line\">            <a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a688a4360e982358b90610f58d4eef49eab87ea4b9433d4e99398728f2cf29b881\">MHWRender::MRenderItem::DecorationItem</a>,</div>\n\
<div class=\"line\">            <a name=\"a87\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1ea9808e481c6346dfc333afb4c52890ac9\">MHWRender::MGeometry::kLines</a>);</div>\n\
<div class=\"line\">        wireframeItem-&gt;<a name=\"a88\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a8e28487092f00765128c2ffdd43d0fe4\">setDrawMode</a>(<a name=\"a89\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a9a325db332d24e6105fe3b48a94604c3a62a997a862929eb62b0273d1db9e8e0d\">MHWRender::MGeometry::kWireframe</a>);</div>\n\
<div class=\"line\">        list.<a name=\"a90\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a238f55e85f694b4f74535aaedc6ebe01\">append</a>(wireframeItem);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        wireframeItem = list.<a name=\"a91\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(index);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(wireframeItem)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        wireframeItem-&gt;<a name=\"a92\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ad283b157fa4f6c40bceb9d398c53a72a\">setShader</a>(shader);</div>\n\
<div class=\"line\">        wireframeItem-&gt;<a name=\"a93\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a6e865e2cf5c9d818b1cbb99af2360c47\">depthPriority</a>(depthPriority);</div>\n\
<div class=\"line\">        wireframeItem-&gt;<a name=\"a94\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a1e9d2a5708b2231a8e72d22dc3be53fe\">enable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* shadedItem = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    index = list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a4cfe9fc51a24bca06d2619a55542f689\">indexOf</a>(shadedItemName_);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (index &lt; 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        shadedItem = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ac74a014f3346d8ddac693b7f034fa228\">MHWRender::MRenderItem::Create</a>(</div>\n\
<div class=\"line\">            shadedItemName_,</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a688a4360e982358b90610f58d4eef49eab87ea4b9433d4e99398728f2cf29b881\">MHWRender::MRenderItem::DecorationItem</a>,</div>\n\
<div class=\"line\">            <a name=\"a95\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a08260379b97fd733e30ea92e891ede1eaa2c70dd76c8172a9298334473c914304\">MHWRender::MGeometry::kTriangles</a>);</div>\n\
<div class=\"line\">        shadedItem-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a8e28487092f00765128c2ffdd43d0fe4\">setDrawMode</a>((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a9a325db332d24e6105fe3b48a94604c3\">MHWRender::MGeometry::DrawMode</a>)(<a name=\"a96\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a9a325db332d24e6105fe3b48a94604c3a3ba47eb2caff6eea24d37de5f572f769\">MHWRender::MGeometry::kShaded</a> | <a name=\"a97\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a9a325db332d24e6105fe3b48a94604c3a17e882561d8db0dedc215d0d4978e887\">MHWRender::MGeometry::kTextured</a>));</div>\n\
<div class=\"line\">        list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a238f55e85f694b4f74535aaedc6ebe01\">append</a>(shadedItem);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        shadedItem = list.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(index);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(shadedItem)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        shadedItem-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ad283b157fa4f6c40bceb9d398c53a72a\">setShader</a>(shader);</div>\n\
<div class=\"line\">        shadedItem-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a6e865e2cf5c9d818b1cbb99af2360c47\">depthPriority</a>(depthPriority);</div>\n\
<div class=\"line\">        shadedItem-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a1e9d2a5708b2231a8e72d22dc3be53fe\">enable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> FootPrintGeometryOverride::populateGeometry(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html\">MHWRender::MGeometryRequirements</a>&amp; requirements,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html\">MHWRender::MRenderItemList</a>&amp; renderItems,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html\">MHWRender::MGeometry</a>&amp; data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a98\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html\">MHWRender::MVertexBuffer</a>* verticesBuffer       = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* vertices                     = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a99\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor_list.html\">MHWRender::MVertexBufferDescriptorList</a>&amp; vertexBufferDescriptorList = requirements.<a name=\"a100\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html#a960f411f65fde2d97da465a6b276d774\">vertexRequirements</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numberOfVertexRequirments = vertexBufferDescriptorList.<a name=\"a101\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html\">MHWRender::MVertexBufferDescriptor</a> vertexBufferDescriptor;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> requirmentNumber = 0; requirmentNumber &lt; numberOfVertexRequirments; ++requirmentNumber)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!vertexBufferDescriptorList.<a name=\"a102\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor_list.html#ab5970217cd80acac6aa900cc1daec6b8\">getDescriptor</a>(requirmentNumber, vertexBufferDescriptor))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (vertexBufferDescriptor.<a name=\"a103\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html#abc8db8e8585a67a40d57c26811aaf8e2\">semantic</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a104\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a5a5b1d8320f94d3c3d142753f5527fc4aa20581584e5f9447cb96afb4f2e10703\">MHWRender::MGeometry::kPosition</a>:</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!verticesBuffer)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    verticesBuffer = data.<a name=\"a105\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#acf6369e390e9831c0e180cc60c7db618\">createVertexBuffer</a>(vertexBufferDescriptor);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (verticesBuffer)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        vertices = (<span class=\"keywordtype\">float</span>*)verticesBuffer-&gt;<a name=\"a106\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(soleCount+heelCount, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <span class=\"comment\">// do nothing for stuff we don&#39;t understand</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> verticesPointerOffset = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// We concatenate the heel and sole positions into a single vertex buffer.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The index buffers will decide which positions will be selected for each render items.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> currentVertex = 0 ; currentVertex &lt; soleCount+heelCount; ++currentVertex)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>(vertices)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (currentVertex &lt; heelCount)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> heelVtx = currentVertex;</div>\n\
<div class=\"line\">                vertices[verticesPointerOffset++] = heel[heelVtx][0] * mMultiplier;</div>\n\
<div class=\"line\">                vertices[verticesPointerOffset++] = heel[heelVtx][1] * mMultiplier;</div>\n\
<div class=\"line\">                vertices[verticesPointerOffset++] = heel[heelVtx][2] * mMultiplier;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> soleVtx = currentVertex - heelCount;</div>\n\
<div class=\"line\">                vertices[verticesPointerOffset++] = sole[soleVtx][0] * mMultiplier;</div>\n\
<div class=\"line\">                vertices[verticesPointerOffset++] = sole[soleVtx][1] * mMultiplier;</div>\n\
<div class=\"line\">                vertices[verticesPointerOffset++] = sole[soleVtx][2] * mMultiplier;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>(verticesBuffer &amp;&amp; vertices)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        verticesBuffer-&gt;<a name=\"a107\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(vertices);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i=0; i &lt; renderItems.<a name=\"a108\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a57b988236ee6a3a5e572d126d3fbccc1\">length</a>(); ++i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html\">MHWRender::MRenderItem</a>* item = renderItems.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html#a82ed5d7ae96a2890f5f54f697bb0bab0\">itemAt</a>(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!item)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a109\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html\">MHWRender::MIndexBuffer</a>* indexBuffer = data.<a name=\"a110\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#a649d0f008cdfbd368a4157dcd47ede67\">createIndexBuffer</a>(<a name=\"a111\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry.html#ad8ed01ff3ff33333d8e19db4d2818bb6aa93f90f58b3077bdbedeb9506e0143fd\">MHWRender::MGeometry::kUnsignedInt32</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (item-&gt;<a name=\"a112\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aca2cba4630391c78dcf1a828986160da\">name</a>() == wireframeItemName_ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> primitiveIndex = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> startIndex = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numPrimitive = heelCount + soleCount - 2;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numIndex = numPrimitive * 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* indices = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexBuffer-&gt;<a name=\"a113\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(numIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numIndex; )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i &lt; (heelCount - 1) * 2)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    startIndex = 0;</div>\n\
<div class=\"line\">                    primitiveIndex = i / 2;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    startIndex = heelCount;</div>\n\
<div class=\"line\">                    primitiveIndex = i / 2 - heelCount + 1;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                indices[i++] = startIndex + primitiveIndex;</div>\n\
<div class=\"line\">                indices[i++] = startIndex + primitiveIndex + 1;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            indexBuffer-&gt;<a name=\"a114\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(indices);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (item-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aca2cba4630391c78dcf1a828986160da\">name</a>() == shadedItemName_ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> primitiveIndex = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> startIndex = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numPrimitive = heelCount + soleCount - 4;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> numIndex = numPrimitive * 3;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>* indices = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>*)indexBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aff9e3c2ed40ad0c0f0fe55668670d071\">acquire</a>(numIndex);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numIndex; )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (i &lt; (heelCount - 2) * 3)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    startIndex = 0;</div>\n\
<div class=\"line\">                    primitiveIndex = i / 3;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    startIndex = heelCount;</div>\n\
<div class=\"line\">                    primitiveIndex = i / 3 - heelCount + 2;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                indices[i++] = startIndex;</div>\n\
<div class=\"line\">                indices[i++] = startIndex + primitiveIndex + 1;</div>\n\
<div class=\"line\">                indices[i++] = startIndex + primitiveIndex + 2;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            indexBuffer-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#aafb3736206f8a73c0fc74757919cfb83\">commit</a>(indices);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        item-&gt;<a name=\"a115\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a7d0f067f76206a54f4f716f63bcb6b19\">associateWithIndexBuffer</a>(indexBuffer);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Technique 1: Now that the current geometry reflects the current value of the size</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attribute, clear the signal flag.</span></div>\n\
<div class=\"line\">    mFootPrintNode-&gt;setSizeChangedSinceVP2Update(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Plugin Registration</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//---------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> footPrint::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a116\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html\">MFnUnitAttribute</a> unitFn;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>          stat;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    size = unitFn.<a name=\"a117\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a31f804de81a968aa11b510a6231e7874\">create</a>( <span class=\"stringliteral\">&quot;size&quot;</span>, <span class=\"stringliteral\">&quot;sz&quot;</span>, <a name=\"a118\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a1d1cfd8ffb84e947f82999c682b666a7a1925172d8d6f77cdb98f7f486f706024\">MFnUnitAttribute::kDistance</a> );</div>\n\
<div class=\"line\">    unitFn.<a name=\"a119\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_unit_attribute.html#a02a46e1b4ae48c38d85678a8611e3e77\">setDefault</a>( 1.0 );</div>\n\
<div class=\"line\">    stat = addAttribute(size);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat) {</div>\n\
<div class=\"line\">        stat.<a name=\"a120\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;addAttribute&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">        VP2 Custom Caching: When using VP2 custom caching the MPxGeometryOverride associated</span></div>\n\
<div class=\"line\"><span class=\"comment\">        with the footPrint node might be invoked in the normal context or in the background</span></div>\n\
<div class=\"line\"><span class=\"comment\">        context.  If playback and background evaluation occur concurrently Maya guarantees</span></div>\n\
<div class=\"line\"><span class=\"comment\">        that all of the MPxGeometryOverride methods called for a context occur atomically</span></div>\n\
<div class=\"line\"><span class=\"comment\">        without being interleaved with MPxGeometryOverride methods for the same object in</span></div>\n\
<div class=\"line\"><span class=\"comment\">        a different context.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        However, Maya does not make any timing guarantee between the call(s) to evaluate the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        MPxNode and calls to the MPxGeometryOverride.  For example, a postEvaluation call </span></div>\n\
<div class=\"line\"><span class=\"comment\">        in the background evaluation thread may occur at the same time that the foreground</span></div>\n\
<div class=\"line\"><span class=\"comment\">        thread is using the MPxGeometryOverride.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        This means that any communication which occurs between the MPxNode during evaluation</span></div>\n\
<div class=\"line\"><span class=\"comment\">        and the MPxGeometryOverride must be context aware.  The communication channel must</span></div>\n\
<div class=\"line\"><span class=\"comment\">        use different storage for each context.  The easiest way to implement this to use </span></div>\n\
<div class=\"line\"><span class=\"comment\">        internal attributes on the MPxNode that the MPxGeometryOverride has access to.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">        footPrint uses this technique here.  Don&#39;t create any affects relationships because</span></div>\n\
<div class=\"line\"><span class=\"comment\">        sizeChangedSinceVP2Update doesn&#39;t use any Maya dirty management or evaluation.  Only</span></div>\n\
<div class=\"line\"><span class=\"comment\">        access sizeChangedSinceVP2Update by getting the MDataHandle directly from the</span></div>\n\
<div class=\"line\"><span class=\"comment\">        MDataBlock using outputValue().</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    <a name=\"_a121\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html\">MFnNumericAttribute</a> attrFn;</div>\n\
<div class=\"line\">    sizeChangedSinceVP2Update = attrFn.<a name=\"a122\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_attribute.html#a5c08a5ce5e7123cc444c95a0e4a50f29\">create</a>(<span class=\"stringliteral\">&quot;sizeChangedSinceVP2Update&quot;</span>, <span class=\"stringliteral\">&quot;sd&quot;</span>, <a name=\"a123\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_numeric_data.html#a1d1cfd8ffb84e947f82999c682b666a7a8cfc0ab572a96edfc9db7c02f0d025d7\">MFnNumericData::kBoolean</a>, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    attrFn.<a name=\"a124\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    attrFn.<a name=\"a125\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab8e48be1f1009a30d0e40dfcaf9e649d\">setHidden</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    attrFn.<a name=\"a126\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    stat = addAttribute(sizeChangedSinceVP2Update);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stat) {</div>\n\
<div class=\"line\">        stat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;addAttribute&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> stat;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MS::kSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a name=\"_a127\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.registerNode(</div>\n\
<div class=\"line\">                <span class=\"stringliteral\">&quot;footPrint_GeometryOverride&quot;</span>,</div>\n\
<div class=\"line\">                footPrint::id,</div>\n\
<div class=\"line\">                &amp;footPrint::creator,</div>\n\
<div class=\"line\">                &amp;footPrint::initialize,</div>\n\
<div class=\"line\">                <a name=\"a128\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7aee1b06f2f9885d7d4fd4fda48926f94b\">MPxNode::kLocatorNode</a>,</div>\n\
<div class=\"line\">                (sMakeFootPrintDirLight ? &amp;lightClassification : &amp;footPrint::drawDbClassification)); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = <a name=\"a129\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a36f6ac92077e5064d897187608c9e548\">MHWRender::MDrawRegistry::registerGeometryOverrideCreator</a>(</div>\n\
<div class=\"line\">        footPrint::drawDbClassification,</div>\n\
<div class=\"line\">        footPrint::drawRegistrantId,</div>\n\
<div class=\"line\">        FootPrintGeometryOverride::Creator);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;registerDrawOverrideCreator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Register a custom selection mask with priority 2 (same as locators</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// by default).</span></div>\n\
<div class=\"line\">    <a name=\"a130\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#ab4cc6ba8300a9924dd443bb64b736744\">MSelectionMask::registerSelectionType</a>(<span class=\"stringliteral\">&quot;footPrintSelection&quot;</span>, 2);</div>\n\
<div class=\"line\">    status = <a name=\"a131\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a09e405631e7cf680f8ac9d934ad73434\">MGlobal::executeCommand</a>(<span class=\"stringliteral\">&quot;selectType -byName \\&quot;footPrintSelection\\&quot; 1&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>   status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = <a name=\"a132\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html#a24f600902d1e1a22ccd8985f9eee39a1\">MHWRender::MDrawRegistry::deregisterGeometryOverrideCreator</a>(</div>\n\
<div class=\"line\">        footPrint::drawDbClassification,</div>\n\
<div class=\"line\">        footPrint::drawRegistrantId);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterDrawOverrideCreator&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = releaseShaders();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;releaseShaders&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    status = plugin.deregisterNode( footPrint::id );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) {</div>\n\
<div class=\"line\">        status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;deregisterNode&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Deregister custom selection mask</span></div>\n\
<div class=\"line\">    <a name=\"a133\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_selection_mask.html#ae82a6cf818deb6b6310ad06e60b269ed\">MSelectionMask::deregisterSelectionType</a>(<span class=\"stringliteral\">&quot;footPrintSelection&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";