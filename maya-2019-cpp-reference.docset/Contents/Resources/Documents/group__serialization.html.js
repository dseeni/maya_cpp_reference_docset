var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Defining serialization formats</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'group__serialization.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Defining serialization formats</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">Defining serialization formats</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<p>Really should have been implemented completely as templates, it would have been much cleaner, but support is not good enough on all platforms. </p>\n\
<p>Here are the steps for creating a set of serialization formats.</p>\n\
<p>Create a base class for each type of serialization format which uses the first set of macros to set up its interface and then create your derived classes which implement specific formats.</p>\n\
<p>Here\'s a full example with a class \"MyClass\" to be serialized in XML and JSON format. For simplicity they can be assumed to be in a single header and source file but it\'s not necessary.</p>\n\
<p>Class declarations look like this:</p>\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"keyword\">class </span>MyClassSerializer</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DeclareSerializerFormatType( MyClassSerializer );</div>\n\
<div class=\"line\">...</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyClassSerializerXML : <span class=\"keyword\">public</span> MyClassSerializer</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DeclareSerializerFormat( MyClassSerializerXML, MyClassSerializer );</div>\n\
<div class=\"line\">...</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>MyClassSerializerJSON : <span class=\"keyword\">public</span> MyClassSerializer</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    DeclareSerializerFormat( MyClassSerializerJSON, MyClassSerializer );</div>\n\
<div class=\"line\">...</div>\n\
<div class=\"line\">};</div>\n\
</div><!-- fragment --><p>The implementation source file starts with this:</p>\n\
<div class=\"fragment\"><div class=\"line\">ImplementSerializerFormatType( MyClassSerializer );</div>\n\
<div class=\"line\">ImplementSerializerFormat( MyClassSerializerXML, MyClassSerializer, <span class=\"stringliteral\">&quot;XML&quot;</span> );</div>\n\
<div class=\"line\">ImplementSerializerFormat( MyClassSerializerJSON, MyClassSerializer, <span class=\"stringliteral\">&quot;JSON&quot;</span> );</div>\n\
<div class=\"line\">...</div>\n\
</div><!-- fragment --><p>If you wish automatic registration/deregistration include the lines below, otherwise allocate and destroy an object of these class types when you wish the registration/deregistration to happen.</p>\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"keyword\">static</span> SerializerInitializer&lt;MyClassSerializerXML&gt; _initializerXML( MyClassSerializerXML::theFormat() );</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> SerializerInitializer&lt;MyClassSerializerJSON&gt; _initializerJSON( MyClassSerializerJSON::theFormat() );</div>\n\
<div class=\"line\">...</div>\n\
</div><!-- fragment --><p>This provides a common static interface to the class types. The most common examples are to access the implementation of a particular format by name:</p>\n\
<div class=\"fragment\"><div class=\"line\">MyClassSerializer* xmlFormat = MyClassSerializer::formatByName( <span class=\"stringliteral\">&quot;XML&quot;</span> );</div>\n\
</div><!-- fragment --><p>And to iterate over all available formats of a given type:</p>\n\
<div class=\"fragment\"><div class=\"line\">MyClassSerializer::FormatSet::iterator serIt;</div>\n\
<div class=\"line\"><span class=\"keywordflow\">for</span>( serIt = MyClassSerializer::allFormats().begin();</div>\n\
<div class=\"line\">     serIt != MyClassSerializer::allFormats().end(); ++serIt )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    MyClassSerializer* currentFormat = (*serIt);</div>\n\
<div class=\"line\">    ...</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --><p>Note that in the case of dynamically loaded code (e.g. plug-ins) you may not get the static object destructor called in the individual formats so instead you will have to dynamically allocate and destroy your SerializerInitializer&lt;&gt; objects on load and unload of your code. </p>\n\
</div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";