var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>gpuCache/gpuCacheDrawOverride.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'gpu_cache_2gpu_cache_draw_override_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>gpuCache/gpuCacheDrawOverride.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">gpuCache/gpuCacheDrawOverride.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheDrawOverride.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheConfig.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheShapeNode.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheDrawTraversal.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheFrustum.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;gpuCacheGLFT.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAnimControl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawContext.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MHWGeometryUtilities.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStateManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MUserData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>GPUCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL TYPES</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> DepthOffsetType {</div>\n\
<div class=\"line\">    kNoDepthOffset,</div>\n\
<div class=\"line\">    kApplyDepthOffset,</div>\n\
<div class=\"line\">    kNbDepthOffsetType</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> ColorType {</div>\n\
<div class=\"line\">    kSubNodeColor,</div>\n\
<div class=\"line\">    kDefaultColor,</div>\n\
<div class=\"line\">    kBlackColor,</div>\n\
<div class=\"line\">    kXrayColor,</div>\n\
<div class=\"line\">    kXrayBlackColor,</div>\n\
<div class=\"line\">    kNbColorType</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> NormalsType {</div>\n\
<div class=\"line\">    kFrontNormals,</div>\n\
<div class=\"line\">    kBackNormals,</div>\n\
<div class=\"line\">    kNbNormalsType</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> FrontFaceType {</div>\n\
<div class=\"line\">    kFrontClockwise,</div>\n\
<div class=\"line\">    kFrontCounterClockwise,</div>\n\
<div class=\"line\">    kNbFrontFaceType</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">enum</span> TwoSidedLightingType {</div>\n\
<div class=\"line\">    kTwoSidedLighting,</div>\n\
<div class=\"line\">    kOneSidedLighting,</div>\n\
<div class=\"line\">    kNbTwoSidedLightingType</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL FUNCTIONS</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> setShadedBlendState(<a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html\">MBlendState</a>* blendState = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!blendState) {</div>\n\
<div class=\"line\">        <a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state_desc.html\">MBlendStateDesc</a> desc;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        desc.<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state_desc.html#ab6054509e76bc88d697a365e82c504c8\">targetBlends</a>[0].<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_target_blend_desc.html#af69e3282d64f8cfe88a2759960788417\">blendEnable</a> = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state_desc.html#ab6054509e76bc88d697a365e82c504c8\">targetBlends</a>[0].<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_target_blend_desc.html#adadc1ea4b5fca51312ae451f346434e3\">destinationBlend</a> = MBlendState::kInvSourceAlpha;</div>\n\
<div class=\"line\">        desc.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state_desc.html#ab6054509e76bc88d697a365e82c504c8\">targetBlends</a>[0].<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_target_blend_desc.html#aa0f38fbd90e3171cc6c092e80ff25c7c\">alphaDestinationBlend</a> = MBlendState::kInvSourceAlpha;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        blendState = stateMgr-&gt;<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#aeb560f7829270f34ab413ad314314c8f\">acquireBlendState</a>(desc);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    stateMgr-&gt;<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a27dbc083002d85108ed30ee1131f68c1\">setBlendState</a>(blendState);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MHWRender::MRasterizerState</a>* createShadedRasterState(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a> cullMode,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> DepthOffsetType                       depthOffsetType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html\">MRasterizerStateDesc</a> desc;</div>\n\
<div class=\"line\">    desc.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a5a9f0fe3d49830803b7a25440b2d19a6\">cullMode</a> = cullMode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (depthOffsetType == kApplyDepthOffset) {</div>\n\
<div class=\"line\">        desc.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a0c22bd503abc493c0b54ba8a7593a6d8\">depthBiasIsFloat</a>       = true ;</div>\n\
<div class=\"line\">        desc.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a2894fe1122185e1e681e79ab7cfeb8d6\">depthBias</a>              = 0.0000002384f;</div>\n\
<div class=\"line\">        desc.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a7d6c8cc49b0374cb87605d24acacd4e2\">slopeScaledDepthBias</a>   = 0.95f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stateMgr-&gt;<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1f43e6ab99a6e2e5817df7bb1a0c69e6\">acquireRasterizerState</a>(desc);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> setShadedRasterState(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a> cullMode,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> DepthOffsetType                       depthOffsetType,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FrontFaceType                         frontFaceType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MRasterizerState</a>* cullNoneRasterizerState[kNbDepthOffsetType]  =</div>\n\
<div class=\"line\">        {NULL, NULL};</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MRasterizerState</a>* cullFrontRasterizerState[kNbDepthOffsetType] =</div>\n\
<div class=\"line\">        {NULL, NULL};</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MRasterizerState</a>* cullBackRasterizerState[kNbDepthOffsetType]  =</div>\n\
<div class=\"line\">        {NULL, NULL};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!cullNoneRasterizerState[kNoDepthOffset]) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> dot = 0; dot &lt; kNbDepthOffsetType; ++dot) {</div>\n\
<div class=\"line\">            cullNoneRasterizerState[dot] = createShadedRasterState(</div>\n\
<div class=\"line\">                stateMgr, MRasterizerState::kCullNone, DepthOffsetType(dot));</div>\n\
<div class=\"line\">            cullFrontRasterizerState[dot] = createShadedRasterState(</div>\n\
<div class=\"line\">                stateMgr, MRasterizerState::kCullFront, DepthOffsetType(dot));</div>\n\
<div class=\"line\">            cullBackRasterizerState[dot] = createShadedRasterState(</div>\n\
<div class=\"line\">                stateMgr, MRasterizerState::kCullBack, DepthOffsetType(dot));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (cullMode) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MRasterizerState::kCullNone:</div>\n\
<div class=\"line\">            stateMgr-&gt;<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(</div>\n\
<div class=\"line\">                cullNoneRasterizerState[depthOffsetType]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MRasterizerState::kCullFront:</div>\n\
<div class=\"line\">            stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(</div>\n\
<div class=\"line\">                cullFrontRasterizerState[depthOffsetType]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> MRasterizerState::kCullBack:</div>\n\
<div class=\"line\">            stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(</div>\n\
<div class=\"line\">                cullBackRasterizerState[depthOffsetType]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>: assert(0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Must use OpenGL directly here since the MStateManager does not</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// allow us to control this OpenGL state. The</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// MRasterizerState::frontCounterClockwise parameter only controls</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the winding order used for culling purposes, not for lighting</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// purposes.</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glFrontFace(frontFaceType == kFrontClockwise ? MGL_CW : MGL_CCW);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> setShadedSolidDepthState(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state.html\">MDepthStencilState</a>* depthState = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!depthState) {</div>\n\
<div class=\"line\">        <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html\">MDepthStencilStateDesc</a> desc;</div>\n\
<div class=\"line\">        depthState = stateMgr-&gt;<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a4fae5c76bc6698abb77b9ffec01bc21a\">acquireDepthStencilState</a>(desc);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stateMgr-&gt;<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5a6b8e76300df4a0c9f6a38b236118f7\">setDepthStencilState</a>(depthState);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> setShadedTwoSidedLightingState(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> TwoSidedLightingType twoSidedLightingType)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// MStateManager does not allow us to set two-sided lighting state.</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glLightModeli(MGL_LIGHT_MODEL_TWO_SIDE,</div>\n\
<div class=\"line\">        twoSidedLightingType == kTwoSidedLighting ? 1 : 0);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> setShadedAlphaDepthState(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state.html\">MDepthStencilState</a>* depthState = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!depthState) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html\">MDepthStencilStateDesc</a> desc;</div>\n\
<div class=\"line\">        desc.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html#a1944b0918378af218375dd45c1f191d1\">depthWriteEnable</a> = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        depthState = stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a4fae5c76bc6698abb77b9ffec01bc21a\">acquireDepthStencilState</a>(desc);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5a6b8e76300df4a0c9f6a38b236118f7\">setDepthStencilState</a>(depthState);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> setWireframeState(</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateMgr)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html\">MBlendState</a>* blendState = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!blendState) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state_desc.html\">MBlendStateDesc</a> desc;</div>\n\
<div class=\"line\">            blendState = stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#aeb560f7829270f34ab413ad314314c8f\">acquireBlendState</a>(desc);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a27dbc083002d85108ed30ee1131f68c1\">setBlendState</a>(blendState);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MRasterizerState</a>* rasterizerState = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!rasterizerState) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html\">MRasterizerStateDesc</a> desc;</div>\n\
<div class=\"line\">            rasterizerState = stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1f43e6ab99a6e2e5817df7bb1a0c69e6\">acquireRasterizerState</a>(desc);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(rasterizerState);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state.html\">MDepthStencilState</a>* depthState = NULL;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!depthState) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state_desc.html\">MDepthStencilStateDesc</a> desc;</div>\n\
<div class=\"line\">            depthState = stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a4fae5c76bc6698abb77b9ffec01bc21a\">acquireDepthStencilState</a>(desc);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5a6b8e76300df4a0c9f6a38b236118f7\">setDepthStencilState</a>(depthState);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LOCAL CLASSES</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS TopLevelCullVisitor</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>TopLevelCullVisitor : <span class=\"keyword\">public</span> SubNodeVisitor</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TopLevelCullVisitor(<span class=\"keyword\">const</span> Frustum&amp; frustrum, <span class=\"keywordtype\">double</span> seconds)</div>\n\
<div class=\"line\">        : fFrustum(frustrum),</div>\n\
<div class=\"line\">          fSeconds(seconds),</div>\n\
<div class=\"line\">          fIsCulled(<span class=\"keyword\">true</span>)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isCulled()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fIsCulled; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> XformData&amp;   xform,</div>\n\
<div class=\"line\">                       <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp; sample =</div>\n\
<div class=\"line\">            xform.getSample(fSeconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!sample) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fIsCulled =</div>\n\
<div class=\"line\">            fFrustum.test(sample-&gt;boundingBox()) == Frustum::kOutside;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> visit(<span class=\"keyword\">const</span> ShapeData&amp;   shape,</div>\n\
<div class=\"line\">                       <span class=\"keyword\">const</span> SubNode&amp;     subNode)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">            shape.getSample(fSeconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!sample) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fIsCulled =</div>\n\
<div class=\"line\">            fFrustum.test(sample-&gt;boundingBox()) == Frustum::kOutside;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Frustum&amp;  fFrustum;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>    fSeconds;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>            fIsCulled;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS DrawShadedTraversal</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>DrawShadedState : <span class=\"keyword\">public</span> DrawTraversalState</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    DrawShadedState(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Frustum&amp;                          frustrum,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>                            seconds,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> TransparentPruneType              transparentPrune,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>*               stateMgr,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a>   cullMode,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> DepthOffsetType                   depthOffsetType,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ColorType                         colorType,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;                           defaultDiffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> NormalsType                       normalsType)</div>\n\
<div class=\"line\">        : DrawTraversalState(frustrum, seconds, transparentPrune),</div>\n\
<div class=\"line\">          fStateMgr(stateMgr),</div>\n\
<div class=\"line\">          fCullMode(cullMode),</div>\n\
<div class=\"line\">          fDepthOffsetType(depthOffsetType),</div>\n\
<div class=\"line\">          fColorType(colorType),</div>\n\
<div class=\"line\">          fDefaultDiffuseColor(defaultDiffuseColor),</div>\n\
<div class=\"line\">          fNormalsType(normalsType)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* stateManager()<span class=\"keyword\"> const         </span>{ <span class=\"keywordflow\">return</span> fStateMgr; }</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a> cullMode()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fCullMode; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    DepthOffsetType depthOffsetType()<span class=\"keyword\"> const     </span>{ <span class=\"keywordflow\">return</span> fDepthOffsetType; }</div>\n\
<div class=\"line\">    ColorType       colorType()<span class=\"keyword\"> const           </span>{ <span class=\"keywordflow\">return</span> fColorType; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;   defaultDiffuseColor()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> fDefaultDiffuseColor; }</div>\n\
<div class=\"line\">    NormalsType     normalsType()<span class=\"keyword\"> const         </span>{ <span class=\"keywordflow\">return</span> fNormalsType; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>* <span class=\"keyword\">const</span>         fStateMgr;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a>   fCullMode;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> DepthOffsetType                   fDepthOffsetType;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ColorType                         fColorType;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>                            fDefaultDiffuseColor;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NormalsType                       fNormalsType;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>DrawShadedTraversal</div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> DrawTraversal&lt;DrawShadedTraversal, DrawShadedState&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> DrawTraversal&lt;DrawShadedTraversal, DrawShadedState&gt; BaseClass;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    DrawShadedTraversal(</div>\n\
<div class=\"line\">        DrawShadedState&amp;        state,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;          xform,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                    isReflection,</div>\n\
<div class=\"line\">        Frustum::ClippingResult parentClippingResult)</div>\n\
<div class=\"line\">        : BaseClass(state, xform, isReflection, parentClippingResult)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> draw(<span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!sample-&gt;visibility()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        gGLFT-&gt;glLoadMatrixd(xform().matrix[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sample-&gt;isBoundingBoxPlaceHolder()) {</div>\n\
<div class=\"line\">            state().vboProxy().drawBoundingBox(sample, <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">            GlobalReaderCache::theCache().hintShapeReadOrder(subNode());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        assert(sample-&gt;positions());</div>\n\
<div class=\"line\">        assert(sample-&gt;normals());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> diffuseColor;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (state().colorType()) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kSubNodeColor:</div>\n\
<div class=\"line\">            diffuseColor = sample-&gt;diffuseColor();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kDefaultColor:</div>\n\
<div class=\"line\">            <span class=\"comment\">// Use default material</span></div>\n\
<div class=\"line\">            diffuseColor = state().defaultDiffuseColor();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kBlackColor:</div>\n\
<div class=\"line\">            <span class=\"comment\">// No light -&gt; draw black!</span></div>\n\
<div class=\"line\">            diffuseColor = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.0f, 0.0f, 0.0f, sample-&gt;diffuseColor()[3]);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kXrayColor:</div>\n\
<div class=\"line\">            <span class=\"comment\">// X-Ray mode -&gt; alpha *= 0.3f (extraOpacity)</span></div>\n\
<div class=\"line\">            diffuseColor = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(sample-&gt;diffuseColor()[0],</div>\n\
<div class=\"line\">                                  sample-&gt;diffuseColor()[1],</div>\n\
<div class=\"line\">                                  sample-&gt;diffuseColor()[2],</div>\n\
<div class=\"line\">                                  sample-&gt;diffuseColor()[3] * 0.3f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> kXrayBlackColor:</div>\n\
<div class=\"line\">            <span class=\"comment\">// X-ray mode + No light</span></div>\n\
<div class=\"line\">            diffuseColor = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>(0.0f, 0.0f, 0.0f, sample-&gt;diffuseColor()[3] * 0.3f);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            assert(0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (diffuseColor[3] &lt;= 0.0 ||</div>\n\
<div class=\"line\">            (diffuseColor[3] &gt;= 1.0 &amp;&amp;</div>\n\
<div class=\"line\">                state().transparentPrune() == DrawShadedState::kPruneOpaque) ||</div>\n\
<div class=\"line\">            (diffuseColor[3] &lt;  1.0 &amp;&amp;</div>\n\
<div class=\"line\">                state().transparentPrune() == DrawShadedState::kPruneTransparent)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// set colour</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glColor4f(diffuseColor[0]*diffuseColor[3],</div>\n\
<div class=\"line\">                         diffuseColor[1]*diffuseColor[3],</div>\n\
<div class=\"line\">                         diffuseColor[2]*diffuseColor[3],</div>\n\
<div class=\"line\">                         diffuseColor[3]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        setShadedRasterState(state().stateManager(),</div>\n\
<div class=\"line\">                             state().cullMode(),</div>\n\
<div class=\"line\">                             state().depthOffsetType(),</div>\n\
<div class=\"line\">                             isReflection() ?</div>\n\
<div class=\"line\">                             kFrontClockwise : kFrontCounterClockwise);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Draw the triangle mesh for all components.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> groupId = 0; groupId &lt; sample-&gt;numIndexGroups(); ++groupId ) {</div>\n\
<div class=\"line\">            state().vboProxy().drawTriangles(</div>\n\
<div class=\"line\">                sample, groupId,</div>\n\
<div class=\"line\">                state().normalsType() == kFrontNormals ?</div>\n\
<div class=\"line\">                VBOProxy::kFrontNormals : VBOProxy::kBackNormals,</div>\n\
<div class=\"line\">                VBOProxy::kNoUVs);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS DrawWireframeTraversal</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>DrawWireframeState : <span class=\"keyword\">public</span> DrawTraversalState</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    DrawWireframeState(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Frustum&amp;  frustrum,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>    seconds)</div>\n\
<div class=\"line\">        : DrawTraversalState(frustrum, seconds, kPruneNone)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>DrawWireframeTraversal</div>\n\
<div class=\"line\">    : <span class=\"keyword\">public</span> DrawTraversal&lt;DrawWireframeTraversal, DrawWireframeState&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> DrawTraversal&lt;DrawWireframeTraversal, DrawWireframeState&gt; BaseClass;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    DrawWireframeTraversal(</div>\n\
<div class=\"line\">        DrawWireframeState&amp;     state,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;          xform,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span>                    isReflection,</div>\n\
<div class=\"line\">        Frustum::ClippingResult parentClippingResult)</div>\n\
<div class=\"line\">        : BaseClass(state, xform, isReflection, parentClippingResult)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> draw(<span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!sample-&gt;visibility()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        gGLFT-&gt;glLoadMatrixd(xform().matrix[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sample-&gt;isBoundingBoxPlaceHolder()) {</div>\n\
<div class=\"line\">            state().vboProxy().drawBoundingBox(sample);</div>\n\
<div class=\"line\">            GlobalReaderCache::theCache().hintShapeReadOrder(subNode());</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        assert(sample-&gt;positions());</div>\n\
<div class=\"line\">        assert(sample-&gt;normals());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        state().vboProxy().drawWireframe(sample);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>GPUCache {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS DrawOverride::UserData</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>DrawOverride::UserData : <span class=\"keyword\">public</span> <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_user_data.html\">MUserData</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    UserData(<span class=\"keyword\">const</span> ShapeNode* node)</div>\n\
<div class=\"line\">        : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_user_data.html\">MUserData</a>(false),</div>\n\
<div class=\"line\">          fShapeNode(node),</div>\n\
<div class=\"line\">          fSeconds(0.0),</div>\n\
<div class=\"line\">          fIsSelected(false)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fWireframeColor[0] = 1.0f;</div>\n\
<div class=\"line\">        fWireframeColor[1] = 1.0f;</div>\n\
<div class=\"line\">        fWireframeColor[2] = 1.0f;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> set(<span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>&amp; seconds,</div>\n\
<div class=\"line\">             <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp; wireframeColor,</div>\n\
<div class=\"line\">             <span class=\"keywordtype\">bool</span>          isSelected)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fSeconds = seconds;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fWireframeColor[0] = wireframeColor[0];</div>\n\
<div class=\"line\">        fWireframeColor[1] = wireframeColor[1];</div>\n\
<div class=\"line\">        fWireframeColor[2] = wireframeColor[2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        fIsSelected = isSelected;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> draw(<span class=\"keyword\">const</span> <a name=\"_a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- member functions -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> drawShadedSampleGL(</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Frustum&amp;                              frustum,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>*                   stateMgr,</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a>       cullMode,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> DepthOffsetType                       depthOffsetType,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ColorType                             colorType,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;                               defaultDiffuseColor,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> NormalsType                           normalsType,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> DrawShadedState::TransparentPruneType transparentPrune,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;                              xform,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> SubNode::Ptr&amp;                         rootNode) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> drawWireframeSampleGL(<span class=\"keyword\">const</span> Frustum&amp;  frustum,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;  xform,</div>\n\
<div class=\"line\">                               <span class=\"keyword\">const</span> SubNode::Ptr&amp; rootNode) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> drawBoundingBoxSampleGL(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;      xform,</div>\n\
<div class=\"line\">                                 <span class=\"keyword\">const</span> SubNode::Ptr&amp; rootNode) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Returns true if any lights exists and false otherwise.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> setupLightingGL(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> unsetLightingGL(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~UserData()<span class=\"keyword\"> override    </span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/*----- data members -----*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ShapeNode* fShapeNode;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>           fSeconds;</div>\n\
<div class=\"line\">    GLfloat          fWireframeColor[3];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span>             fIsSelected;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DrawOverride::UserData::drawShadedSampleGL(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Frustum&amp;                              frustum,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MHWRender::MStateManager</a>*                   stateMgr,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a9602dcbc7b9991767e322a6f55541e8a\">MHWRender::MRasterizerState::CullMode</a>       cullMode,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> DepthOffsetType                       depthOffsetType,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ColorType                             colorType,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>&amp;                               defaultDiffuseColor,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> NormalsType                           normalsType,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> DrawShadedState::TransparentPruneType transparentPrune,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;                              xform,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr&amp;                         rootNode)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    DrawShadedState state(</div>\n\
<div class=\"line\">        frustum, fSeconds, transparentPrune, stateMgr,</div>\n\
<div class=\"line\">        cullMode, depthOffsetType, colorType,</div>\n\
<div class=\"line\">        defaultDiffuseColor, normalsType);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    DrawShadedTraversal visitor(</div>\n\
<div class=\"line\">        state, xform, xform.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#adcbd22bb9bbae2691f231c12c4c8cca1\">det3x3</a>() &lt; 0.0, Frustum::kUnknown);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    rootNode-&gt;accept(visitor);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DrawOverride::UserData::drawWireframeSampleGL(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Frustum&amp;  frustum,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;  xform,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr&amp; rootNode)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    DrawWireframeState state(frustum, fSeconds);</div>\n\
<div class=\"line\">    DrawWireframeTraversal visitor(state, xform, <span class=\"keyword\">false</span>, Frustum::kUnknown);</div>\n\
<div class=\"line\">    rootNode-&gt;accept(visitor);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DrawOverride::UserData::drawBoundingBoxSampleGL(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;      xform,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr&amp; rootNode)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the bounding box.</span></div>\n\
<div class=\"line\">    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> boundingBox;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNodeData::Ptr subNodeData = rootNode-&gt;getData();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!subNodeData) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> XformData::Ptr xformData =</div>\n\
<div class=\"line\">        std::dynamic_pointer_cast&lt;<span class=\"keyword\">const</span> XformData&gt;(subNodeData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xformData) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp; sample =</div>\n\
<div class=\"line\">            xformData-&gt;getSample(fSeconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!sample || !sample-&gt;visibility()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        boundingBox = sample-&gt;boundingBox();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> ShapeData::Ptr shapeData =</div>\n\
<div class=\"line\">            std::dynamic_pointer_cast&lt;<span class=\"keyword\">const</span> ShapeData&gt;(subNodeData);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (shapeData) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">                shapeData-&gt;getSample(fSeconds);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!sample || !sample-&gt;visibility()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">            boundingBox = sample-&gt;boundingBox();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Draw the bounding box.</span></div>\n\
<div class=\"line\">    gGLFT-&gt;glLoadMatrixd(xform.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    VBOProxy vboProxy;</div>\n\
<div class=\"line\">    vboProxy.drawBoundingBox(boundingBox);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DrawOverride::UserData::setupLightingGL(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Take into account only the 8 lights supported by the basic</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// OpenGL profile.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbLights =</div>\n\
<div class=\"line\">        std::min(context.<a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a245ec3740263f7f3c076dd9c723141b7\">numberOfActiveLights</a>(MDrawContext::LightFilter::kFilteredToLightLimit, &amp;status), 8u);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != <a name=\"a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nbLights &gt; 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Lights are specified in world space and needs to be</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// converted to view space.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> worldToView =</div>\n\
<div class=\"line\">            context.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a71cbe2a3f2dfa967ebc43b5e97456ccb\">getMatrix</a>(<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acc6ad8472c2abfd2f63e100474b977f9a1628397f32d381a2b05a9902af452c8a\">MHWRender::MFrameContext::kViewMtx</a>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        gGLFT-&gt;glLoadMatrixd(worldToView.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        gGLFT-&gt;glEnable(MGL_LIGHTING);</div>\n\
<div class=\"line\">        gGLFT-&gt;glColorMaterial(MGL_FRONT_AND_BACK, MGL_AMBIENT_AND_DIFFUSE);</div>\n\
<div class=\"line\">        gGLFT-&gt;glEnable(MGL_COLOR_MATERIAL) ;</div>\n\
<div class=\"line\">        gGLFT-&gt;glEnable(MGL_NORMALIZE) ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MGLfloat ambient[4]  = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MGLfloat specular[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glMaterialfv(MGL_FRONT_AND_BACK, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\">            gGLFT-&gt;glMaterialfv(MGL_FRONT_AND_BACK, MGL_SPECULAR, specular);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glLightModelfv(MGL_LIGHT_MODEL_AMBIENT, ambient);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Two sided-lighting seems is always enabled in VP2.0.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (Config::emulateTwoSidedLighting()) {</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightModeli(MGL_LIGHT_MODEL_TWO_SIDE, 0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightModeli(MGL_LIGHT_MODEL_TWO_SIDE, 1);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;nbLights; ++i) {</div>\n\
<div class=\"line\">            <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point_array.html\">MFloatPointArray</a> positions;</div>\n\
<div class=\"line\">            <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_vector.html\">MFloatVector</a> direction;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">float</span> intensity;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> color;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasDirection;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> hasPosition;</div>\n\
<div class=\"line\">            status = context.<a name=\"a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad76985f8ee279b7ffd948dc492a748a3\">getLightInformation</a>(</div>\n\
<div class=\"line\">                i, positions, direction, intensity, color,</div>\n\
<div class=\"line\">                hasDirection, hasPosition);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// if (hasPosition)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//     fprintf(stderr, &quot;   -&gt; Light%d position  = (%lf, %lf, %lf, %lf)\\n&quot;,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//             i, position[0], position[1], position[2], position[3]);</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if (hasDirection)</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//     fprintf(stderr, &quot;   -&gt; Light%d direction = (%lf, %lf, %lf) - %lf\\n&quot;,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//             i, direction[0], direction[1], direction[2], direction.length());</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// fprintf(stderr, &quot;   -&gt; Light%d color = %lf x (%lf, %lf, %lf, %lf)\\n&quot;,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//         i, intensity, color[0], color[1], color[2], color[3]);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (hasDirection) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (hasPosition) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Assumes a Maya Spot Light!</span></div>\n\
<div class=\"line\">                    <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> position;</div>\n\
<div class=\"line\">                    position[0] = positions[0][0];</div>\n\
<div class=\"line\">                    position[1] = positions[0][1];</div>\n\
<div class=\"line\">                    position[2] = positions[0][2];</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat ambient[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat diffuse[4] = { intensity * color[0],</div>\n\
<div class=\"line\">                                                  intensity * color[1],</div>\n\
<div class=\"line\">                                                  intensity * color[2],</div>\n\
<div class=\"line\">                                                  1.0f };</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat pos[4] = { position[0],</div>\n\
<div class=\"line\">                                              position[1],</div>\n\
<div class=\"line\">                                              position[2],</div>\n\
<div class=\"line\">                                              1.0f };</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat dir[3] = { direction[0],</div>\n\
<div class=\"line\">                                              direction[1],</div>\n\
<div class=\"line\">                                              direction[2]};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_DIFFUSE,  diffuse);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_POSITION, pos);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_SPOT_DIRECTION, dir);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Maya&#39;s default value&#39;s for spot lights.</span></div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightf(MGL_LIGHT0+i,  MGL_SPOT_EXPONENT, 0.0);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightf(MGL_LIGHT0+i,  MGL_SPOT_CUTOFF,  20.0);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Assumes a Maya Directional Light!</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat ambient[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat diffuse[4] = { intensity * color[0],</div>\n\
<div class=\"line\">                                                  intensity * color[1],</div>\n\
<div class=\"line\">                                                  intensity * color[2],</div>\n\
<div class=\"line\">                                                  1.0f };</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> MGLfloat pos[4] = { -direction[0],</div>\n\
<div class=\"line\">                                              -direction[1],</div>\n\
<div class=\"line\">                                              -direction[2],</div>\n\
<div class=\"line\">                                              0.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_DIFFUSE,  diffuse);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_POSITION, pos);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLightf(MGL_LIGHT0+i, MGL_SPOT_CUTOFF, 180.0);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (hasPosition) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Assumes a Maya Point Light!</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_float_point.html\">MFloatPoint</a> position;</div>\n\
<div class=\"line\">                position[0] = positions[0][0];</div>\n\
<div class=\"line\">                position[1] = positions[0][1];</div>\n\
<div class=\"line\">                position[2] = positions[0][2];</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat ambient[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat diffuse[4] = { intensity * color[0],</div>\n\
<div class=\"line\">                                              intensity * color[1],</div>\n\
<div class=\"line\">                                              intensity * color[2],</div>\n\
<div class=\"line\">                                              1.0f };</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat pos[4] = { position[0],</div>\n\
<div class=\"line\">                                          position[1],</div>\n\
<div class=\"line\">                                          position[2],</div>\n\
<div class=\"line\">                                          1.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_DIFFUSE,  diffuse);</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_POSITION, pos);</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightf(MGL_LIGHT0+i, MGL_SPOT_CUTOFF, 180.0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Assumes a Maya Ambient Light!</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat ambient[4] = { intensity * color[0],</div>\n\
<div class=\"line\">                                              intensity * color[1],</div>\n\
<div class=\"line\">                                              intensity * color[2],</div>\n\
<div class=\"line\">                                              1.0f };</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat diffuse[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat pos[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_DIFFUSE,  diffuse);</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_POSITION, pos);</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightf(MGL_LIGHT0+i, MGL_SPOT_CUTOFF, 180.0);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glEnable(MGL_LIGHT0+i);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> nbLights &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DrawOverride::UserData::unsetLightingGL(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Take into account only the 8 lights supported by the basic</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// OpenGL profile.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nbLights =</div>\n\
<div class=\"line\">        std::min(context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a245ec3740263f7f3c076dd9c723141b7\">numberOfActiveLights</a>(MDrawContext::LightFilter::kFilteredToLightLimit, &amp;status), 8u);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Restore OpenGL default values for anything that we have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// modified.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nbLights &gt; 0) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;nbLights; ++i) {</div>\n\
<div class=\"line\">            gGLFT-&gt;glDisable(MGL_LIGHT0+i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MGLfloat ambient[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">            gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (i==0) {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat diffuse[4] = { 1.0f, 1.0f, 1.0f, 1.0f };</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_DIFFUSE,  diffuse);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat spec[4]    = { 1.0f, 1.0f, 1.0f, 1.0f };</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_SPECULAR, spec);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat diffuse[4] = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_DIFFUSE,  diffuse);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> MGLfloat spec[4]    = { 0.0f, 0.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\">                gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_SPECULAR, spec);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MGLfloat pos[4]     = { 0.0f, 0.0f, 1.0f, 0.0f };</div>\n\
<div class=\"line\">            gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_POSITION, pos);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> MGLfloat dir[3]     = { 0.0f, 0.0f, -1.0f };</div>\n\
<div class=\"line\">            gGLFT-&gt;glLightfv(MGL_LIGHT0+i, MGL_SPOT_DIRECTION, dir);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glLightf(MGL_LIGHT0+i,  MGL_SPOT_EXPONENT,  0.0);</div>\n\
<div class=\"line\">            gGLFT-&gt;glLightf(MGL_LIGHT0+i,  MGL_SPOT_CUTOFF,  180.0);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        gGLFT-&gt;glDisable(MGL_LIGHTING);</div>\n\
<div class=\"line\">        gGLFT-&gt;glDisable(MGL_COLOR_MATERIAL) ;</div>\n\
<div class=\"line\">        gGLFT-&gt;glDisable(MGL_NORMALIZE) ;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MGLfloat ambient[4]  = { 0.2f, 0.2f, 0.2f, 1.0f };</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MGLfloat specular[4] = { 0.8f, 0.8f, 0.8f, 1.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        gGLFT-&gt;glMaterialfv(MGL_FRONT_AND_BACK, MGL_AMBIENT,  ambient);</div>\n\
<div class=\"line\">        gGLFT-&gt;glMaterialfv(MGL_FRONT_AND_BACK, MGL_SPECULAR, specular);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        gGLFT-&gt;glLightModelfv(MGL_LIGHT_MODEL_AMBIENT, ambient);</div>\n\
<div class=\"line\">        gGLFT-&gt;glLightModeli(MGL_LIGHT_MODEL_TWO_SIDE, 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DrawOverride::UserData::draw(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Extract the cached geometry.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr&amp; rootNode =</div>\n\
<div class=\"line\">        fShapeNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!rootNode) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get renderer</span></div>\n\
<div class=\"line\">    <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html\">MRenderer</a>* theRenderer = MRenderer::theRenderer();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!theRenderer) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html\">MStateManager</a>* stateMgr = context.<a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a9eed5300933693e76ad77822b4feb37f\">getStateManager</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!stateMgr) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> displayStyle = context.<a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html#acd5ce60bbd3d03181b1ad681023ff44d\">getDisplayStyle</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (displayStyle == 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Sample code to debug pass information</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> debugPassInformation = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (debugPassInformation)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html\">MHWRender::MPassContext</a> &amp; passCtx = context.<a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea\">getPassContext</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> &amp; passId = passCtx.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#ae90d4b4c8175e81800d8eb16ee126e1f\">passIdentifier</a>();</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a name=\"_a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a> &amp; passSem = passCtx.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_pass_context.html#a9737189d5cfffd795336d711a678d627\">passSemantics</a>();</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;gpuCache override in pass[%s], semantic[&quot;</span>, passId.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#aa9ab612f356c53479afc4c648c9ef94d\">asChar</a>());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;passSem.<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++)</div>\n\
<div class=\"line\">            printf(<span class=\"stringliteral\">&quot; %s&quot;</span>, passSem[i].asChar());</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kXray) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Viewport 2.0 will call draw() twice when drawing transparent objects</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (X-Ray mode). We skip the first draw() call.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MRasterizerState</a>* rasterState = stateMgr-&gt;<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a381d58fef9908f00a0e04bcf38b67838\">getRasterizerState</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (rasterState &amp;&amp; rasterState-&gt;<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html#a40659f03655c48c6f0060634b295067d\">desc</a>().<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state_desc.html#a5a9f0fe3d49830803b7a25440b2d19a6\">cullMode</a> == MRasterizerState::kCullFront) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// View frustum culling.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> worldViewProjInvMatrix =</div>\n\
<div class=\"line\">        context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a71cbe2a3f2dfa967ebc43b5e97456ccb\">getMatrix</a>(MFrameContext::kWorldViewProjInverseMtx, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Frustum frustum( worldViewProjInvMatrix);</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        TopLevelCullVisitor visitor(frustum, fSeconds);</div>\n\
<div class=\"line\">        rootNode-&gt;accept(visitor);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (visitor.isCulled()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get state data</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> xform =</div>\n\
<div class=\"line\">        context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a71cbe2a3f2dfa967ebc43b5e97456ccb\">getMatrix</a>(MFrameContext::kWorldViewMtx, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> projection =</div>\n\
<div class=\"line\">        context.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#a71cbe2a3f2dfa967ebc43b5e97456ccb\">getMatrix</a>(MFrameContext::kProjectionMtx, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Save the current gfx state so that we can restore it later on!</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_blend_state.html\">MBlendState</a>* savedBlendState           = stateMgr-&gt;<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a4dbf5ff33e99eba611b73273d868182f\">getBlendState</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_rasterizer_state.html\">MRasterizerState</a>* savedRasterizerState = stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a381d58fef9908f00a0e04bcf38b67838\">getRasterizerState</a>();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_depth_stencil_state.html\">MDepthStencilState</a>* savedDepthState    = stateMgr-&gt;<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a401853f47989ca1cd4df01ca1976feb4\">getDepthStencilState</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// GL Draw</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (theRenderer-&gt;<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aac2a5827e6a0ce3333e62ffa7751ba5e\">drawAPIIsOpenGL</a>())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// set projection matrix</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glMatrixMode(MGL_PROJECTION);</div>\n\
<div class=\"line\">        gGLFT-&gt;glPushMatrix();</div>\n\
<div class=\"line\">        gGLFT-&gt;glLoadMatrixd(projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// set world matrix</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glMatrixMode(MGL_MODELVIEW);</div>\n\
<div class=\"line\">        gGLFT-&gt;glPushMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Bounding Box</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kBoundingBox)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setWireframeState(stateMgr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// set colour</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glColor3fv(fWireframeColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// set style</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glEnable(MGL_LINE_STIPPLE);</div>\n\
<div class=\"line\">            gGLFT-&gt;glLineStipple(1, Config::kLineStippleShortDashed);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            drawBoundingBoxSampleGL(xform, rootNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glDisable(MGL_LINE_STIPPLE);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> needWireframe =</div>\n\
<div class=\"line\">            !(displayStyle &amp; MFrameContext::kBoundingBox) &amp;&amp;</div>\n\
<div class=\"line\">            (displayStyle &amp; MFrameContext::kWireFrame || fIsSelected);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> wireframeOnShaded = needWireframe &amp;&amp;</div>\n\
<div class=\"line\">            (displayStyle &amp; MFrameContext::kGouraudShaded);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> disableWireframeOnShaded = wireframeOnShaded &amp;&amp;</div>\n\
<div class=\"line\">            (DisplayPref::wireframeOnShadedMode() == DisplayPref::kWireframeOnShadedNone);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Wireframe can be considerered as being opaque and therefore</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// must be drawn before any transparent object.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (needWireframe &amp;&amp; !disableWireframeOnShaded)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            setWireframeState(stateMgr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// set colour</span></div>\n\
<div class=\"line\">            gGLFT-&gt;glColor3fv(fWireframeColor);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glEnable(MGL_LINE_STIPPLE);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (wireframeOnShaded) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Wireframe on shaded is affected by wireframe on shaded mode</span></div>\n\
<div class=\"line\">                DisplayPref::WireframeOnShadedMode wireframeOnShadedMode =</div>\n\
<div class=\"line\">                    DisplayPref::wireframeOnShadedMode();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (wireframeOnShadedMode == DisplayPref::kWireframeOnShadedReduced) {</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLineStipple(1, Config::kLineStippleDotted);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    assert(wireframeOnShadedMode != DisplayPref::kWireframeOnShadedNone);</div>\n\
<div class=\"line\">                    gGLFT-&gt;glLineStipple(1, Config::kLineStippleShortDashed);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                gGLFT-&gt;glLineStipple(1, Config::kLineStippleShortDashed);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            drawWireframeSampleGL(frustum, xform, rootNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            gGLFT-&gt;glDisable( MGL_LINE_STIPPLE );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kGouraudShaded)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// When we need to draw both the shaded geometry and the</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// wireframe mesh, we need to offset the shaded geometry</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// in depth to avoid Z-fighting against the wireframe</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// mesh.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// On the hand, we don&#39;t want to use depth offset when</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// drawing only the shaded geometry because it leads to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// some drawing artifacts. The reason is a litle bit</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// subtle. At silouhette edges, both front-facing and</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// back-facing faces are meeting. These faces can have a</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// different slope in Z and this can lead to a different</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Z-offset being applied. When unlucky, the back-facing</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// face can be drawn in front of the front-facing face. If</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// two-sided lighting is enabled, the back-facing fragment</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// can have a different resultant color. This can lead to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// a rim of either dark or bright pixels around silouhette</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// edges.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// When the wireframe mesh is drawn on top (even a dotted</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// one), it masks this effect sufficiently that it is no</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// longer distracting for the user, so it is OK to use</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// depth offset when the wireframe mesh is drawn on top.</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> DepthOffsetType depthOffsetType = needWireframe ?</div>\n\
<div class=\"line\">                kApplyDepthOffset : kNoDepthOffset;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Set up OpenGL lights</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> anyLights = setupLightingGL(context);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Determine the diffuse color</span></div>\n\
<div class=\"line\">            ColorType colorType = kSubNodeColor;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a>    defaultDiffuseColor;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> needOpaquePass      =</div>\n\
<div class=\"line\">                rootNode-&gt;transparentType() != SubNode::kTransparent;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> needTransparentPass =</div>\n\
<div class=\"line\">                rootNode-&gt;transparentType() != SubNode::kOpaque;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            DrawShadedState::TransparentPruneType opaquePassPrune =</div>\n\
<div class=\"line\">                DrawShadedState::kPruneTransparent;</div>\n\
<div class=\"line\">            DrawShadedState::TransparentPruneType transparentPassPrune =</div>\n\
<div class=\"line\">                DrawShadedState::kPruneOpaque;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kDefaultMaterial) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Force drawing as opaque gray if use default material</span></div>\n\
<div class=\"line\">                colorType           = kDefaultColor;</div>\n\
<div class=\"line\">                needOpaquePass      = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                needTransparentPass = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                opaquePassPrune     = DrawShadedState::kPruneNone;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (anyLights) {</div>\n\
<div class=\"line\">                    defaultDiffuseColor = Config::kDefaultGrayColor;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kXray) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Force drawing as transparent in X-Ray mode</span></div>\n\
<div class=\"line\">                needOpaquePass       = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                needTransparentPass  = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                transparentPassPrune = DrawShadedState::kPruneNone;</div>\n\
<div class=\"line\">                colorType = anyLights ? kXrayColor : kXrayBlackColor;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!anyLights) {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Force drawing as black if no light exists in the scene.</span></div>\n\
<div class=\"line\">                colorType = kBlackColor;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            setShadedBlendState(stateMgr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Opaque pass</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (needOpaquePass) {</div>\n\
<div class=\"line\">                setShadedSolidDepthState(stateMgr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kTwoSidedLighting) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Two-sided lighting</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (Config::emulateTwoSidedLighting()) {</div>\n\
<div class=\"line\">                        setShadedTwoSidedLightingState(kOneSidedLighting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        drawShadedSampleGL(</div>\n\
<div class=\"line\">                            frustum, stateMgr, MRasterizerState::kCullFront,</div>\n\
<div class=\"line\">                            depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                            kBackNormals, opaquePassPrune, xform, rootNode);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        drawShadedSampleGL(</div>\n\
<div class=\"line\">                            frustum, stateMgr, MRasterizerState::kCullBack,</div>\n\
<div class=\"line\">                            depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                            kFrontNormals, opaquePassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                        setShadedTwoSidedLightingState(kTwoSidedLighting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        drawShadedSampleGL(</div>\n\
<div class=\"line\">                            frustum, stateMgr, MRasterizerState::kCullNone,</div>\n\
<div class=\"line\">                            depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                            kFrontNormals, opaquePassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// One-sided lighting</span></div>\n\
<div class=\"line\">                    setShadedTwoSidedLightingState(kOneSidedLighting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    drawShadedSampleGL(</div>\n\
<div class=\"line\">                        frustum, stateMgr, MRasterizerState::kCullNone,</div>\n\
<div class=\"line\">                        depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                        kFrontNormals, opaquePassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Transparent pass</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (needTransparentPass) {</div>\n\
<div class=\"line\">                setShadedAlphaDepthState(stateMgr);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (displayStyle &amp; MFrameContext::kTwoSidedLighting) {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Two-sided lighting</span></div>\n\
<div class=\"line\">                    setShadedTwoSidedLightingState(</div>\n\
<div class=\"line\">                           Config::emulateTwoSidedLighting() ?</div>\n\
<div class=\"line\">                           kOneSidedLighting : kTwoSidedLighting );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    drawShadedSampleGL(</div>\n\
<div class=\"line\">                        frustum, stateMgr, MRasterizerState::kCullFront,</div>\n\
<div class=\"line\">                        depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                        Config::emulateTwoSidedLighting() ? kBackNormals : kFrontNormals,</div>\n\
<div class=\"line\">                        transparentPassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                    drawShadedSampleGL(</div>\n\
<div class=\"line\">                        frustum, stateMgr, MRasterizerState::kCullBack,</div>\n\
<div class=\"line\">                        depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                        kFrontNormals,  transparentPassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// One-sided lighting</span></div>\n\
<div class=\"line\">                    setShadedTwoSidedLightingState(kOneSidedLighting);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    drawShadedSampleGL(</div>\n\
<div class=\"line\">                        frustum, stateMgr, MRasterizerState::kCullFront,</div>\n\
<div class=\"line\">                        depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                        kFrontNormals, transparentPassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                    drawShadedSampleGL(</div>\n\
<div class=\"line\">                        frustum, stateMgr, MRasterizerState::kCullBack,</div>\n\
<div class=\"line\">                        depthOffsetType, colorType, defaultDiffuseColor,</div>\n\
<div class=\"line\">                        kFrontNormals, transparentPassPrune, xform, rootNode);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            unsetLightingGL(context);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Bring the OpenGL state back to the VP2.0 expected default.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore the default color.</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glColor4f(1.0f, 1.0f, 1.0f, 1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore OGS default value</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glFrontFace(GL_CCW);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Restore OGS default two-sided lighting state.</span></div>\n\
<div class=\"line\">        gGLFT-&gt;glLightModeli(MGL_LIGHT_MODEL_TWO_SIDE, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        gGLFT-&gt;glMatrixMode(MGL_PROJECTION);</div>\n\
<div class=\"line\">        gGLFT-&gt;glPopMatrix();</div>\n\
<div class=\"line\">        gGLFT-&gt;glMatrixMode(MGL_MODELVIEW);</div>\n\
<div class=\"line\">        gGLFT-&gt;glPopMatrix();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// TODO: To be implemented!</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a27dbc083002d85108ed30ee1131f68c1\">setBlendState</a>(savedBlendState);</div>\n\
<div class=\"line\">    stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a7dfb1c4f28575ed6581aa40a7b64f22a\">setRasterizerState</a>(savedRasterizerState);</div>\n\
<div class=\"line\">    stateMgr-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5a6b8e76300df4a0c9f6a38b236118f7\">setDepthStencilState</a>(savedDepthState);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    stateMgr-&gt;<a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a544e5c653741b90e7c65d2b34e8ebe60\">releaseBlendState</a>(savedBlendState);</div>\n\
<div class=\"line\">    stateMgr-&gt;<a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5c1115e1c741c78d1c19909c7b4d8db9\">releaseRasterizerState</a>(savedRasterizerState);</div>\n\
<div class=\"line\">    stateMgr-&gt;<a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1ab255028fb2b2440bb6b7300713c15f\">releaseDepthStencilState</a>(savedDepthState);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CLASS DrawOverride</span></div>\n\
<div class=\"line\"><span class=\"comment\">//==============================================================================</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> DrawOverride::drawCb(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_draw_context.html\">MHWRender::MDrawContext</a>&amp; context,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_user_data.html\">MUserData</a>* userData)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Make sure that the post render callbacks have been properly</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// initialized. We have to verify at each refresh because there is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// no easy way to recieve a callback when a new modelEditor is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// created.</span></div>\n\
<div class=\"line\">    ShapeNode::init3dViewPostRenderCallbacks();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    InitializeGLFT();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> UserData* data = <span class=\"keyword\">dynamic_cast&lt;</span><span class=\"keyword\">const </span>UserData*<span class=\"keyword\">&gt;</span>(userData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (data) data-&gt;draw(context);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html\">MHWRender::MPxDrawOverride</a>*</div>\n\
<div class=\"line\">DrawOverride::creator(<span class=\"keyword\">const</span> <a name=\"_a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> DrawOverride(obj);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">DrawOverride::DrawOverride(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; obj)</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html\">MPxDrawOverride</a>(obj, &amp;drawCb)</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">DrawOverride::~DrawOverride()</div>\n\
<div class=\"line\">{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49\">MHWRender::DrawAPI</a> DrawOverride::supportedDrawAPIs()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// This draw override supports only OpenGL for now.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49a72361be679c1aca1c1be5f9b500a3315\">MHWRender::kOpenGL</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DrawOverride::isBounded(<span class=\"keyword\">const</span> <a name=\"_a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; <span class=\"comment\">/*objPath*/</span>,</div>\n\
<div class=\"line\">                             <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; <span class=\"comment\">/*cameraPath*/</span>)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> DrawOverride::boundingBox(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; objPath,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; cameraPath)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Extract the cached geometry.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> node(objPath.<a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>(), &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ShapeNode* shapeNode = <span class=\"keyword\">dynamic_cast&lt;</span>ShapeNode*<span class=\"keyword\">&gt;</span>(node.userNode());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!shapeNode) <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNode::Ptr subNode = shapeNode-&gt;getCachedGeometry();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!subNode) <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SubNodeData::Ptr subNodeData = subNode-&gt;getData();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!subNodeData) <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> seconds = <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a8cb1e013d828c1d012fee789b14e0060\">MAnimControl::currentTime</a>().<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#a105d41236561f4d4be6383ced757a429\">as</a>(<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Handle transforms.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> XformData::Ptr xform =</div>\n\
<div class=\"line\">        std::dynamic_pointer_cast&lt;<span class=\"keyword\">const</span> XformData&gt;(subNodeData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (xform) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;const XformSample&gt;&amp; sample =</div>\n\
<div class=\"line\">            xform-&gt;getSample(seconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample-&gt;boundingBox();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Handle shapes.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ShapeData::Ptr shape =</div>\n\
<div class=\"line\">        std::dynamic_pointer_cast&lt;<span class=\"keyword\">const</span> ShapeData&gt;(subNodeData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (shape) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> std::shared_ptr&lt;const ShapeSample&gt;&amp; sample =</div>\n\
<div class=\"line\">            shape-&gt;getSample(seconds);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> sample-&gt;boundingBox();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DrawOverride::disableInternalBoundingBoxDraw()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Always return true since we will perform custom bounding box</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// drawing</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_user_data.html\">MUserData</a>* DrawOverride::prepareForDraw(</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; objPath,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a>&amp; cameraPath,</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_frame_context.html\">MHWRender::MFrameContext</a>&amp; frameContext,</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_user_data.html\">MUserData</a>* oldData)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html\">MHWRender</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span>    = objPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> transform = objPath.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a13f88add2c589379a22d5aaaa4a39fb4\">transform</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Retrieve data cache (create if does not exist)</span></div>\n\
<div class=\"line\">    UserData* data = <span class=\"keyword\">dynamic_cast&lt;</span>UserData*<span class=\"keyword\">&gt;</span>(oldData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!data)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// get the real ShapeNode from the MObject</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> node(<span class=\"keywordtype\">object</span>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            data = <span class=\"keyword\">new</span> UserData(</div>\n\
<div class=\"line\">                dynamic_cast&lt;ShapeNode*&gt;(node.userNode()));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (data) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// compute data and cache it</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_color.html\">MColor</a> wireframeColor =</div>\n\
<div class=\"line\">            <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#a6221bc7407b14246b14f79a751496276\">MGeometryUtilities::wireframeColor</a>(objPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bca\">DisplayStatus</a> displayStatus =</div>\n\
<div class=\"line\">            <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#aa2838b92c9f7db4a810690a986199134\">MGeometryUtilities::displayStatus</a>(objPath);</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">bool</span> isSelected =</div>\n\
<div class=\"line\">            (displayStatus == <a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaab6a8784b4cf96692e0d71d19c44ce732\">kActive</a>) ||</div>\n\
<div class=\"line\">            (displayStatus == <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaa1606a62e097fcfa55af6251a83b44243\">kLead</a>)   ||</div>\n\
<div class=\"line\">            (displayStatus == <a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_m_h_w_render.html#ad9c34c5373567566950642c16a7c4bcaa88694d85749c9c85738c56c4912c385a\">kHilite</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        data-&gt;set(</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_anim_control.html#a8cb1e013d828c1d012fee789b14e0060\">MAnimControl::currentTime</a>().as(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_time.html#abceb2331ad056e3c5ad27894199a49eda3091d1a096c28d4993507f167253ebc7\">MTime::kSeconds</a>),</div>\n\
<div class=\"line\">            wireframeColor,</div>\n\
<div class=\"line\">            isSelected);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> data;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";