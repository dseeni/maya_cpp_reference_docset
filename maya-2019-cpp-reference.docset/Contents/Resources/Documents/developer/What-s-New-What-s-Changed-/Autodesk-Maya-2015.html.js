var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta http-equiv=\"Content-Style-Type\" content=\"text/css\"><meta name=\"generator\" content=\"pandoc\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Autodesk Maya 2015</title>\n\
   <meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script></script><script></script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Autodesk Maya 2015</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"autodesk-maya-2015\"></a></div>\n\
<div class=\'section\'><a id=\"rendering\"></a><h2 id=\"rendering\">Rendering</h2></div>\n\
<div class=\'section\'><a id=\"openmayarender\"></a><h3 id=\"openmayarender\">OpenMayaRender</h3></div>\n\
<p>UI Draw Manager Enhancements</p>\n\
<ul>\n\
<li>Depth Priority : It is possible to set the depth priority before queuing a drawable in <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager</a></span>. The depth priority value is used when rendering the drawable.</li>\n\
<li>The default depth priority value is 0.</li>\n\
<li>Font name and size control:\n\
<ul>\n\
<li>The new <span class=\'code\'>setFontName()</span> method controls the font used for text drawing. It takes as input a font string which is case insensitive. By default, Maya uses “helvetica”, which is also used when an invalid font name is provided.</li>\n\
<li><span class=\'code\'>setFontSize</span> has been updated to allow for an arbitrary font size (height) in the unit of pixel.</li>\n\
</ul></li>\n\
<li>Transparent text drawing is now supported. The alpha channel of the text color and text background color are respected.</li>\n\
<li>Available fonts: <span class=\'code\'>getFontList()</span> is newly added to return a list of available font names on the current system. You can then pass one of the font names to the <span class=\'code\'>setFontName()</span> function in order to use that particular font.</li>\n\
<li>New functions have been added to support drawing images and textured meshes.\n\
<ul>\n\
<li><span class=\'code\'>setTexture()</span> is used to set the active texture to be applied when drawing a mesh. This remains in effect until the next call to <span class=\'code\'>setTexture()</span>.</li>\n\
<li><span class=\'code\'>setTextureSampler()</span> is used to set the filter and address mode used when applying a texture to a mesh. This remains in effect until the next call to <span class=\'code\'>setTextureSampler()</span>.</li>\n\
<li><span class=\'code\'>setTextureMask()</span> is used to set the channel mask used when applying a texture to a mesh. This remains in effect until the next call to <span class=\'code\'>setTextureMask()</span>.</li>\n\
</ul></li>\n\
<li>Optional arguments have been added to the <span class=\'code\'>mesh()</span> and <span class=\'code\'>mesh2D()</span> functions to supply texture coordinates when drawing a mesh. Use with <span class=\'code\'>setTexture()</span>, <span class=\'code\'>setTextureSampler()</span> and <span class=\'code\'>setTextureMask()</span>.</li>\n\
</ul>\n\
<p>Render Item Enhancements</p>\n\
<ul>\n\
<li><p>Render Items now have an immutable “type” which indicates to Maya the type of render item that it is and thus how to treat it with regards to various filters and draw modes. The old <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::Create()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ac74a014f3346d8ddac693b7f034fa228&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem::Create()</a></span> method has been deprecated and should not be used. Render items created with the old method are given either the <span class=\'code\'>DecorationItem</span> type or the <span class=\'code\'>MaterialSceneItem</span> type, depending on the viewport draw modes that the render item was created with. Additionally, new methods were added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItemList\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item_list.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item_list.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItemList</a></span> to make it easier to find items in the list.</p>\n\
<p>The possible types for a render item are as follows:</p>\n\
<ul>\n\
<li><span class=\'code\'>MaterialSceneItem</span>: A render item which represents an object in the scene that should interact with the rest of the scene and viewport settings (for example, a shaded piece of geometry which should be considered for calculations such as shadow computation, viewport effects, and so forth). Inclusion in such processes can also still be controlled through the appropriate methods provided by this class.</li>\n\
<li><span class=\'code\'>NonMaterialSceneItem</span>: A render item which represents an object in the scene that should not interact with the rest of the scene and viewport settings, but that is also not part of the viewport UI (for example, a curve or a bounding box that should not be hidden when the viewport UI is hidden, but also that should not participate in shadow computation or viewport effects).</li>\n\
<li><span class=\'code\'>DecorationItem</span>: A render item which should be considered to be part of the viewport UI (for example, wireframe, components, and so forth).</li>\n\
<li><span class=\'code\'>InternalItem</span>: A render item which was created by Maya for internal purposes (for example, a render item created as the result of a shader being assigned to a DAG node).</li>\n\
</ul></li>\n\
</ul>\n\
<p>Context Enhancements</p>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFrameContext</a></span> provides two static methods which can be used to test if any user interaction is occurring:</p>\n\
<ul>\n\
<li><span class=\'code\'>static bool inUserInteraction();</span></li>\n\
<li><span class=\'code\'>static bool userChangingViewContext()</span>;</li>\n\
</ul>\n\
<p>These methods can be used for the same purpose as their equivalent methods, passed via an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawInfo\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_draw_info.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_u_i_1_1_m_draw_info.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawInfo</a></span> in the default viewport API. The example plug-in <em>footPrintNode</em> demonstrates how to use these methods: it switches to display a bounding box when user interaction is detected (for example, when the camera is tumbling).</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFrameContext</a></span> has additional static methods that test for display preferences:</p>\n\
<ul>\n\
<li><span class=\'code\'>wireOnShadedMode()</span> can be used to query the current display preferences for wireframe on shaded mode display.</li>\n\
<li><span class=\'code\'>shadeTemplates()</span> can be used to query the current display preferences that determine whether template objects should display shaded.</li>\n\
</ul>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFrameContext</a></span> has an additional member method, <span class=\'code\'>getCurrentCameraPath()</span>, which can be used to determine the path to the camera that is being used to render the current frame.</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFrameContext</a></span> has a new method <span class=\'code\'>renderingDestination()</span> that queries the destination for rendering. This can be used, for instance, to identify the viewport panel that is being rendered to; or, to distinguish between rendering to the render view or to an image on disk.</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint\">//! Rendering destinations\n\
    enum RenderingDestination\n\
    {\n\
        k3dViewport,        //!&lt; Rendering to an interactive 3d viewport\n\
        k2dViewport,        //!&lt; Rendering to an interactive 2d viewport \n\
                            //!&lt; such as the render view\n\
        kImage              //!&lt; Rendering to an image\n\
    };\n\
    RenderingDestination renderingDestination(<a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a> &amp; destinationName) const;\n\
</pre></div><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawContext</a></span> allows for a copy of the current color or depth target to be created via these methods, respectively:</p>\n\
<ul>\n\
<li><span class=\'code\'>copyCurrentColorRenderTargetToTexture()</span></li>\n\
<li><span class=\'code\'>copyCurrentDepthRenderTargetToTexture()</span></li>\n\
</ul>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawContext</a></span> has a new method <span class=\'code\'>getInternalTexture()</span> that gets an internal texture as specified by the <span class=\'code\'>InternalTexture</span> enumeration. Currently, this allows for getting the current transparent depth layer and the opaque depth layer used in depth-peeling transparency. The dx11Shader effects file <span class=\'code\'>AutodeskUberShader.fx</span> demonstrates the usage of this method.</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPassContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_pass_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_pass_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPassContext</a></span> has three new pass semantics, respectively: <span class=\'code\'>kTransparentPeelSemantic</span>, <span class=\'code\'>kTransparentPeelAndAvgSemantic</span> and <span class=\'code\'>kTransparentWeightedAvgSemantic</span>. The dx11Shader effects file <span class=\'code\'>AutodeskUberShader.fx</span> demonstrates the usage of these three pass semantics.</p>\n\
<p>A new plug-in is available that demonstrates the usage of this API for caching scene renders (<em>viewRenderOverrideFrameCache</em>). For more information, see <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide/Plug-in-Entry-Points/Render-Loop-Overrides.html#render-target---frame-caching\' title=\'\'>Render target / frame caching</a>.</p></li>\n\
</ul>\n\
<p>Texturing Enhancements</p>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTexture\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_texture.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTexture</a></span> supports updating a rectangular sub-region. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTexture::update()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture.html#a3d365396b4e87bce3f2c6b8d93ea4d69&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTexture::update()</a></span> method has an optional <span class=\'code\'>region</span> argument which can be used to specify the region to be updated. If no region is specified, then the entire texture is updated.</p>\n\
<p>The sample plug-in <em>hwApiTextureTest</em> demonstrates sample code which inverts the colors for a sub-region of a texture.</p></li>\n\
<li>The new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTextureManager::acquireTiledTexture()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#aa5abfba35c825b4740a5ddf20518fda6&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTextureManager::acquireTiledTexture()</a></span> method is a convenience method that packs a series of images on disk into a single texture. This method can accept the result of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderUtil::exactFileTextureUvTileData()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_render_util.html#a8b8c405e8dbbe4776c5a6bdc64945337&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderUtil::exactFileTextureUvTileData()</a></span> which can extract the UV tiling filenames and UV positions from file texture nodes. The sample plug-in <em>hwApiTextureTest</em> demonstrates sample code which reads all images in a folder and creates a single tiled texture.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTextureManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_texture_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTextureManager</a></span> has a new method, <span class=\'code\'>findTexture()</span>, which can be used to search for a pre-acquired texture by name in the texture cache. This can be used to share hardware textures between different parts of the same plug-in or between completely different plug-ins.</li>\n\
<li><p><span class=\'code\'>MTextureManager::acquireTexture</span> has new arguments.</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTexture\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_texture.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTexture</a>* acquireTexture(const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; filePath,</span></li>\n\
</ul>\n\
<p><span class=\'code\'>contextNodeFullName</span> is an input argument, expecting the full name of the node that owns the file. The original function without this argument remains, but has been deprecated.</p>\n\
<p><span class=\'code\'>layerName</span> and <span class=\'code\'>alphaChannelIndex</span> are new optional arguments that can be used to load layers and alpha channels from PSD files. These arguments are only used when loading PSD files.</p></li>\n\
<li><p><span class=\'code\'>MRenderUtil::exactFileTextureName</span> now has a new argument.</p>\n\
<ul>\n\
<li><span class=\'code\'>bool MRenderUtil::exactFileTextureName(const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; baseName, bool useFrameExt, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; currentFrameExt,</span></li>\n\
</ul>\n\
<p><span class=\'code\'>contextNodeFullName</span> is an input argument expecting the full name of the node that owns the file. The original function without this argument remains, but has been deprecated.</p></li>\n\
</ul>\n\
<p>MViewportRenderer and MViewport2Renderer changes</p>\n\
<ul>\n\
<li><p>A new value, <span class=\'code\'>kExcludeParticleInstancers</span>, has been added to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneRender::MObjectTypeExclusions\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#abe19e9c85c46e56786772492a4ce62eb&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneRender::MObjectTypeExclusions</a></span> enum. It is used to exclude all particle instancers when using an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneRender\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_scene_render.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_scene_render.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneRender</a></span> operation in a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOverride</a></span>.</p>\n\
<p>A filter enum with the same name has also been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MViewportRenderer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_viewport_renderer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MViewportRenderer</a></span>. However, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MViewportRenderer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_viewport_renderer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MViewportRenderer</a></span> has been deprecated and you should switch to using an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOverride</a></span> instead.</p></li>\n\
</ul>\n\
<p>MPxSubSceneOverride Enhancements</p>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSubSceneOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_sub_scene_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_sub_scene_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxSubSceneOverride</a></span> now provides an optional functionality to render multiple instances of a render item at the same time. The new methods are as follows:</p>\n\
<ul>\n\
<li><span class=\'code\'>unsigned int addInstanceTransform(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a> &amp; renderItem, const <a href=\"javascript:void(0)\" data-symbol=\"MMatrix\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_matrix.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_matrix.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMatrix</a> &amp; transform);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> setInstanceTransformArray(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a> &amp; renderItem, const <a href=\"javascript:void(0)\" data-symbol=\"MMatrixArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_matrix_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_matrix_array.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMatrixArray</a> &amp; matrixArray);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> updateInstanceTransform(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a> &amp; renderItem, unsigned int instanceId, const <a href=\"javascript:void(0)\" data-symbol=\"MMatrix\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_matrix.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_matrix.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMatrix</a> &amp; transform);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> removeInstance(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a> &amp; renderItem, unsigned int instanceId);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> removeAllInstances(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a> &amp; renderItem);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> setExtraInstanceData(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a>&amp; renderItem, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; parameterName, const <a href=\"javascript:void(0)\" data-symbol=\"MFloatArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_float_array.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFloatArray</a>&amp; data);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> setExtraInstanceData(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a>&amp; renderItem, unsigned int instanceId, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; parameterName, const <a href=\"javascript:void(0)\" data-symbol=\"MFloatArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_float_array.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFloatArray</a>&amp; data);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> removeExtraInstanceData(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a>&amp; renderItem, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; parameterName);</span></li>\n\
</ul>\n\
<p>The performance gain of rendering many instances via one render item can be substantial compared to creating one render item per instance. Use this feature when the instances of a render item are identical except for their transformation matrix; or, for simple float/float2/float3/float4 parameters on the shader instance. If the shader applied and the video card you are using both support GPU instancing, then Maya will render multiple instances of the render item using this feature.</p>\n\
<p>Instance transforms can be added one at a time, which allows for efficient individual updates or removals using the returned instance identifier. Alternatively, the transforms of all instances can be set in a single call via a matrix array. Similarly, per-instance float data can be associated with a parameter on the shader instance one instance at a time, or all at once via a float array.</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSubSceneOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_sub_scene_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_sub_scene_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxSubSceneOverride</a></span> has a new interface that indicates that further update calls are required. The method <span class=\'code\'>furtherUpdateRequired()</span> can be overridden in derived classes for this purpose. The plug-in example code for <span class=\'code\'>apiMeshSubSceneOverride</span> provides a simple example that uses this interface.</p>\n\
<p>If the sub-string <span class=\'code\'>“/subscene/volume/”</span> is used for the classification of the registration of the override, then transparent render items will bypass the internal transparency algorithms and post effects. During a transparency pass, render items will be called to draw once.</p></li>\n\
</ul>\n\
<p>MPxDrawOverride Enhancements</p>\n\
<ul>\n\
<li><p>Two new methods have been added to support the creation and use of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a></span>s in a draw override plug-in.</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> drawRenderItem(const <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MDrawContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MHWRender::MDrawContext</a>&amp; context, <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MHWRender::MRenderItem</a>&amp; item)</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> setGeometryForRenderItem(<a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a>&amp; renderItem, const <a href=\"javascript:void(0)\" data-symbol=\"MVertexBufferArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer_array.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBufferArray</a>&amp; vertexBuffers, const <a href=\"javascript:void(0)\" data-symbol=\"MIndexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MIndexBuffer</a>* indexBuffer, const <a href=\"javascript:void(0)\" data-symbol=\"MBoundingBox\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_bounding_box.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_bounding_box.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MBoundingBox</a>* objectBox) const</span></li>\n\
</ul>\n\
<p>Use these methods to construct and use geometry and shaders that support both OpenGL and DirectX11 with a single code path, similar to how <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSubSceneOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_sub_scene_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_sub_scene_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxSubSceneOverride</a></span> plug-ins operate.</p></li>\n\
</ul>\n\
<p>Geometry Enhancements</p>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBuffer</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MIndexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MIndexBuffer</a></span> now each offer a new method to set or update the geometry data they contain in a single function call. The new functions are:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> update(const void* buffer, unsigned int destOffset, unsigned int numVerts, bool truncateIfSmaller);</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> update(const void* buffer, unsigned int destOffset, unsigned int numIndices, bool truncateIfSmaller);</span></li>\n\
</ul>\n\
<p>Use these functions instead of <span class=\'code\'>acquire()</span>/<span class=\'code\'>commit()</span> or <span class=\'code\'>map()</span>/<span class=\'code\'>unmap()</span> if the source data is already in the correct format for a simple memory copy operation into the destination buffer. In this situation, using <span class=\'code\'>update()</span> should be more efficient and require fewer copy operations on the data.</p>\n\
<p>If the internal buffer had not previously been allocated via a call to commit, the buffer will be allocated. If the specified parameters require a larger buffer than had previously been allocated, the buffer will be reallocated to the new size.</p>\n\
<p>Calling <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBuffer</a></span> or <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MIndexBuffer::unmap()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html#a1ffeb3b5abb3d61f62b58a391816201c&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MIndexBuffer::unmap()</a></span> in OpenGL mode will now reset the OpenGL buffer bindings for both <span class=\'code\'>GL_ARRAY_BUFFER_ARB</span> and <span class=\'code\'>GL_ELEMENT_ARRAY_BUFFER_ARB</span> to 0. This allows for more reliable readback of Maya hardware buffers while also directly interacting with the native graphics API.</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBufferDescriptor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer_descriptor.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBufferDescriptor</a></span> has a new optional constructor argument for supplying the semantic name at creation time. The semantic name is used to tag and identify different custom texture streams.</p></li>\n\
</ul>\n\
<p>Geometry Extractor Enhancements</p>\n\
<ul>\n\
<li><p>The constructor of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryExtractor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryExtractor</a></span> now provides a new <span class=\'code\'>enum</span> parameter <span class=\'code\'>MPolyGeomOptions</span> to replace the parameter <span class=\'code\'>sharing</span>. The new <span class=\'code\'>enum</span> <span class=\'code\'>MPolyGeomOptions</span> is a collection of polygonal properties, including:</p>\n\
<ul>\n\
<li><span class=\'code\'>kPolyGeom_Normal</span>: Indicates that the default base geometry is used.</li>\n\
<li><span class=\'code\'>kPolyGeom_NotSharing</span>: Indicates that you do not want vertex sharing to be computed by the extractor.</li>\n\
<li><span class=\'code\'>kPolyGeom_BaseMesh</span>: Indicates that the base geometry is in smoothCage mode.</li>\n\
</ul>\n\
<p>The old constructor function still remains, but as a deprecated method.</p></li>\n\
</ul>\n\
<p>Shading Enhancements</p>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager</a></span> has a new method:</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a>* getShaderFromNode(const <a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a>&amp; shaderNode, const <a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a>&amp; path, LinkLostCallback linkLostCb = 0, <a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUserData</a>* linkLostUserData = 0, <a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::DrawCallback\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a98585feea3c2e5ad2280c852bab83edd&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance::DrawCallback</a> preCb = 0, <a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::DrawCallback\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a98585feea3c2e5ad2280c852bab83edd&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance::DrawCallback</a> postCb = 0) const;</span></p>\n\
<p>Use this method to obtain an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> from a particular node as translated by Maya. This method operates in a similar way to <span class=\'code\'>getEffectFileShader()</span>, <span class=\'code\'>getEffectsBufferShader()</span>, and <span class=\'code\'>getFragmentShader()</span>; however, you can additionally supply a <span class=\'code\'>LinkLostCallback</span> to get notified when the shader is no longer linked to the node from which it originates. Call this method again to acquire a new shader from the node once the callback has been triggered if you want parameter changes to continue to automatically update the acquired shader instance.</p></li>\n\
<li><span class=\'code\'>MShaderManager::getStockShader</span> now supports four new enum types for acquiring shaders for diagnostic display.\n\
<ul>\n\
<li><span class=\'code\'>k3dIntegerNumericShader</span> can be used to acquire an instance of a stock shader for drawing single integer values per vertex for 3d rendering.</li>\n\
<li><span class=\'code\'>k3dFloatNumericShader</span> can be used to acquire an instance of a stock shader for drawing single float values per vertex for 3d rendering.</li>\n\
<li><span class=\'code\'>k3dFloat3NumericShader</span> can be used to acquire an instance of a stock shader for drawing 3 float values per vertex for 3d rendering.</li>\n\
<li><span class=\'code\'>k3dPointVectorShader</span> can be used to acquire an instance of a stock shader that can be used for 3d rendering of lines based on a point and a vector stream</li>\n\
</ul></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> has two new methods to allow for in-place modification:</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> addInputFragment(const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; fragmentName, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; outputName, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; inputName);</span></p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> addOutputFragment(const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; fragmentName, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; inputName);</span></p>\n\
<p>Use these methods to modify the run-time code for an existing <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> by attaching a fragment of code registered with the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFragmentManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_fragment_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFragmentManager</a></span>. The fragment is added by connecting the output of the new fragment with the input of the existing shader instance. These methods are meant to be used in conjunction with <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager::getShaderFromNode()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a1641a382992fc5d6d53adee71d500cf9&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager::getShaderFromNode()</a></span> to alter the shader returned from Maya. This can be used to supply additional pattern inputs, adjust shader output, or supply vertex and geometry shaders to an existing fragment shader.</p></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> has a new <span class=\'code\'>setParameter()</span> interface that allows the setting of float parameters using an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFloatVector\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_vector.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_float_vector.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFloatVector</a></span>. The existing float pointer can be used to set parameters which are individual float values.\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> setParameter(const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; parameterName, const <a href=\"javascript:void(0)\" data-symbol=\"MFloatVector\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_vector.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_float_vector.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFloatVector</a>&amp; value)</span></li>\n\
</ul></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> has a new interface that allows the setting of matrix parameters using an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFloatMatrix\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_matrix.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_float_matrix.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFloatMatrix</a></span>.\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> setParameter(const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp; parameterName, const <a href=\"javascript:void(0)\" data-symbol=\"MFloatMatrix\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_matrix.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_float_matrix.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFloatMatrix</a>&amp; value)</span></li>\n\
</ul></li>\n\
<li>A stock shader which can draw fat points, and the colors of which are determined by looking up a 1D ramp texture, is available via <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager::getStockShader()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a8e4ad27d691969622af2b05d8c6213d9&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager::getStockShader()</a></span>. The new enumeration is : <span class=\'code\'>k3dColorLookupFatPointShader</span>.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxShaderOverride</a></span> has a new method <span class=\'code\'>supportsAdvancedTransparency()</span> that returns information on whether it supports advanced transparency algorithms (such as depth peeling). The dx11Shader effects file <span class=\'code\'>AutodeskUberShader.fx</span> demonstrates the usage of the method.</li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUniformParameter::DataSemantic\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_uniform_parameter.html#ae2d1a7ca98deaf6f6acd790af2e234ef&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUniformParameter::DataSemantic</a></span> has two new semantics, respectively <span class=\'code\'>kSemanticTranspDepthTexture</span> and <span class=\'code\'>kSemanticOpaqueDepthTexture</span>, both of which are used for advanced transparency algorithms. The dx11Shader effects file <span class=\'code\'>AutodeskUberShader.fx</span> demonstrates the usage of the two data semantics.</p></li>\n\
</ul>\n\
<p>Fragment Enhancements</p>\n\
<ul>\n\
<li>A new method, <span class=\'code\'>MFragmentManager::getFragmentXML(const <a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a>&amp;, <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a>&amp;, bool, const <a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a>*)</span>, has been added that allows the caller to retrieve the XML code for the fragment graph Maya would use to represent the given shading node in Viewport 2.0. This method can be helpful for determining how Maya builds up fragment graphs to render various shading node configurations in the viewport.</li>\n\
</ul>\n\
<p>Renderer Enhancements</p>\n\
<ul>\n\
<li>Two new methods have been added to allow the user to query the limits on the size of a vertex stream or index stream. They are, respectively:\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::GPUmaximumVertexBufferSize()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a6f0ed9231f8c663fee43ed2e666e3859&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::GPUmaximumVertexBufferSize()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::GPUmaximumPrimitiveCount()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#aa02cef952777de065c653a1ce85dbee8&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::GPUmaximumPrimitiveCount()</a></span></li>\n\
</ul></li>\n\
</ul>\n\
<p>Dashline Pattern Changes</p>\n\
<ul>\n\
<li>When using the <span class=\'code\'>mayaDashLineShader</span> (for example, as in the <em>gpuCacheSubSceneOverride</em> example), ensure that the most significant bit of the <span class=\'code\'>dashPattern</span> parameter (an unsigned short type integer) is set to 1; otherwise, artifacts may occur if the line becomes very short.</li>\n\
</ul>\n\
<p>Swatch Rendering Enhancements</p>\n\
<ul>\n\
<li>Several new methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSwatchRenderBase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_swatch_render_base.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_swatch_render_base.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSwatchRenderBase</a></span> to support background rendering of swatches. Derived classes should return true from <span class=\'code\'>renderParallel()</span> if they support background rendering, and they must respond to cancel requests appropriately.\n\
<ul>\n\
<li><span class=\'code\'>virtual bool renderParallel()</span></li>\n\
<li><span class=\'code\'>virtual void cancelParallelRendering()</span></li>\n\
<li><span class=\'code\'>void finishParallelRender()</span></li>\n\
<li><span class=\'code\'>static void cancelCurrentSwatchRender()</span></li>\n\
</ul></li>\n\
<li>New methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSwatchRenderBase\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_swatch_render_base.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_swatch_render_base.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSwatchRenderBase</a></span> to control the quality of the rendered image. Derived classes should increase the quality of the rendering as the render quality increases.\n\
<ul>\n\
<li><span class=\'code\'>void setRenderQuality(int)</span></li>\n\
<li><span class=\'code\'>int renderQuality() const</span></li>\n\
</ul></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"openmaya\"></a><h3 id=\"openmaya\">OpenMaya</h3></div>\n\
<p>DAG path Enhancements</p>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_dag_path.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath</a></span> returns an additional new parameter value (<span class=\'code\'>fPlaybackVisible</span>) when querying for draw override information. The information is part of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDAGDrawOverrideInfo\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_d_a_g_draw_override_info.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_d_a_g_draw_override_info.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDAGDrawOverrideInfo</a></span> structure returned from the method <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::getDrawOverrideInfo()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#aea0b55ce377063a108c3241885fc5c66&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::getDrawOverrideInfo()</a></span>.</p>\n\
<p><span class=\'code\'>fPlaybackVisible</span> indicates if the draw override setting for visibility during playback has been set on the DAG object associated with the DAG path.</p></li>\n\
<li><p>You can now query the dgtimer sub-metrics on the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDependencyNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dependency_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dependency_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDependencyNode</a></span> via the enums <span class=\'code\'>kTimerMetric_callbackViaAPI</span> and <span class=\'code\'>kTimerMetric_callbackNotViaAPI</span> using the OpenMaya API. Previously these options were available, but always returned zero when queried.</p></li>\n\
<li><p>The <span class=\'code\'>getConnectedSetsAndMembers()</span> and <span class=\'code\'>getConnectedShaders()</span> methods, available on <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnMesh\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_mesh.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_mesh.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnMesh</a></span>, are now also available on <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnNurbsSurface\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_nurbs_surface.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_nurbs_surface.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnNurbsSurface</a></span>.</p></li>\n\
<li><p>Two virtual methods <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxAssembly::postApplyEdits()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_assembly.html#a29c17837e8b6c136c52b9e1a0465bb9d&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxAssembly::postApplyEdits()</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxAssembly::postUnapplyEdits()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_assembly.html#a069d612d8ec0e5e39a63ac7f4ba98f87&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxAssembly::postUnapplyEdits()</a></span> have been added. The first is called by <span class=\'code\'>performActivate()</span> after edits are applied to the current assembly (and all nested assemblies).</p>\n\
<p>The second is called by <span class=\'code\'>performInactivate()</span> after unapplying edits, before any nested assemblies are inactivated, and before the current representation is inactivated with <span class=\'code\'>inactivateRep()</span>.</p>\n\
<p>These methods complement the existing <span class=\'code\'>preApplyEdits()</span> and <span class=\'code\'>preUnapplyEdits()</span> methods.</p>\n\
<p>You can use these methods to perform additional work after applying or unapplying edits. The default implementations of these two functions do nothing.</p></li>\n\
<li>The following functions have been removed:\n\
<ul>\n\
<li><span class=\'code\'>bool MFnAssembly::handlesApplyEdits(<a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a>* status = NULL) const;</span></li>\n\
<li><span class=\'code\'>bool MPxAssembly::handlesApplyEdits() const</span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> MPxAssembly::applyEdits(<a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a>&amp; target , <a href=\"javascript:void(0)\" data-symbol=\"MItEdits\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_it_edits.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MItEdits</a>&amp; edits)</span></li>\n\
</ul></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"openmayaui\"></a><h3 id=\"openmayaui\">OpenMayaUI</h3></div>\n\
<p>M3dView Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"M3dView\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m3d_view.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_u_i_1_1_m3d_view.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">M3dView</a></span> provides two new methods which can be used to obtain the resolution (width and height) of a Playblast:\n\
<ul>\n\
<li><span class=\'code\'>int playblastPortWidth( <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> * ReturnStatus = NULL );</span></li>\n\
<li><span class=\'code\'>int playblastPortHeight( <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStatus</a> * ReturnStatus = NULL );</span></li>\n\
</ul></li>\n\
<li><p>Two new methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"M3dView\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m3d_view.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_u_i_1_1_m3d_view.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">M3dView</a></span> for scheduling viewport refreshes in a thread-safe manner. <span class=\'code\'>scheduleRefreshAllViews()</span> forces all viewports in Maya to refresh the next time that Maya is idle, while <span class=\'code\'>scheduleRefresh()</span> forces a specific view to refresh upon the next idle.</p></li>\n\
<li><p>The Esc key (default abort key) now calls <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxContext::abortAction()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_context.html#ae7750c37316de5568c9786aa983031ef&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxContext::abortAction()</a></span> when pressed. Override this method for your plug-in to perform specific operations when the Esc key is pressed.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"animation\"></a><h2 id=\"animation\">Animation</h2></div>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MAnimControl::isScrubbing()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_anim_control.html#a8d1e3f6d61a15ff72695396e9d36ae57&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MAnimControl::isScrubbing()</a></span> has been added. It returns true if an animation is being scrubbed, as opposed to the existing <span class=\'code\'>isPlaying()</span> method which only returns true during playback, not while scrubbing.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"dynamicsfx\"></a><h2 id=\"dynamicsfx\">Dynamics/FX</h2></div>\n\
<ul>\n\
<li><p>The <span class=\'code\'>addDelayedTimeChangeCallback()</span> and <span class=\'code\'>addDelayedTimeChangeRunupCallback()</span> methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDGMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_d_g_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_d_g_message.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDGMessage</a></span>. Whenever time changes, first, all of the <span class=\'code\'>addTimeChangeCallback()</span> are executed, followed by all of the <span class=\'code\'>addDelayedTimeChangeCallback()</span>, then finally all of the <span class=\'code\'>addDelayedTimeChangeRunupCallback()</span>. Separating the time change callbacks into three groups this way can facilitate nodes which have to do runup or solve dynamics.</p>\n\
<p>The following methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDynamicsUtil\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dynamics_util.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDynamicsUtil</a></span> to improve support for runup:</p>\n\
<ul>\n\
<li><span class=\'code\'>addNodeTypeToRunup()</span></li>\n\
<li><span class=\'code\'>removeNodeTypeFromRunup()</span></li>\n\
<li><span class=\'code\'>inRunup()</span></li>\n\
<li><span class=\'code\'>runupIfRequired()</span></li>\n\
</ul>\n\
<p>The following new methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnFluid\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_fluid.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnFluid</a></span> to provide additional support for resizing fluids:</p>\n\
<ul>\n\
<li><span class=\'code\'>expandToInclude()</span></li>\n\
<li><span class=\'code\'>isAutoResize()</span></li>\n\
<li><span class=\'code\'>isResizeToEmitter()</span></li>\n\
</ul></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"modeling\"></a><h2 id=\"modeling\">Modeling</h2></div>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDGModifier::removeMultiInstance()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_d_g_modifier.html#a549d3027328d521761be4c8f9557a8ac&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDGModifier::removeMultiInstance()</a></span> provides the ability to remove an element from a multi plug, similar to the <span class=\'code\'>removeMultiInstance</span> command, but faster.</li>\n\
<li>The new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnMesh::booleanOps()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_mesh.html#a28e288336ac402e5ceda4e8c0e35938b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnMesh::booleanOps()</a></span> method can operate on more than two meshes at a time and uses a new carve-based algorithm which provides higher quality results than the old <span class=\'code\'>booleanOp()</span> method.</li>\n\
<li>An optional <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMeshIsectAccelParams\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_mesh_isect_accel_params.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_mesh_isect_accel_params.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMeshIsectAccelParams</a></span> parameter has been added to the following <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnMesh\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_mesh.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_mesh.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnMesh</a></span> methods to support accelerated operations:\n\
<ul>\n\
<li><span class=\'code\'>getClosestNormal()</span></li>\n\
<li><span class=\'code\'>getClosestPoint()</span></li>\n\
<li><span class=\'code\'>getClosestPointAndNormal()</span></li>\n\
</ul></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnMesh::isRightHandedTangent()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_mesh.html#a641e327847996b0ca10de74960120270&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnMesh::isRightHandedTangent()</a></span> has been added to determine if a tangent and its associated normal and binormal form a right-handed coordinate system (Maya&#39;s default). Left-handed tangents may arise when geometry is mirrored.</li>\n\
<li>A number of new virtual methods have been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSurfaceShape\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_surface_shape.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_px_surface_shape.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxSurfaceShape</a></span> to bring it closer to feature parity with Maya&#39;s built-in surfaces:\n\
<ul>\n\
<li><span class=\'code\'>weightedTransformUsing()</span> and <span class=\'code\'>weightedTweakUsing()</span> provide support for proportional modification.</li>\n\
<li><span class=\'code\'>canMakeLive()</span> and a ray-based variant of <span class=\'code\'>closestPoint()</span> allow the surface to be made live.</li>\n\
<li><span class=\'code\'>getShapeSelectionMask()</span> allows the surface to support object selection in Viewport 2.0.</li>\n\
</ul></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MItGeometry\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_it_geometry.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MItGeometry</a></span> now allows you to retrieve the normal at the current vertex.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"open-data\"></a><h2 id=\"open-data\">Open Data</h2></div>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_scene_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_scene_message.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage</a></span> now has an <span class=\'code\'>addReferenceCallback()</span> method. It provides the callback with a reference node and a resolved path. Supported message types are:</p>\n\
<ul>\n\
<li><span class=\'code\'>kBeforeRemoveReference</span></li>\n\
<li><span class=\'code\'>kBeforeImportReference</span></li>\n\
<li><span class=\'code\'>kBeforeUnloadReference</span></li>\n\
<li><span class=\'code\'>kAfterUnloadReference</span></li>\n\
<li><span class=\'code\'>kBeforeLoadReference</span></li>\n\
<li><span class=\'code\'>kAfterLoadReference</span></li>\n\
<li><span class=\'code\'>kAfterCreateReferenceAndRecordEdits</span></li>\n\
<li><span class=\'code\'>kBeforeLoadReferenceAndRecordEdits</span></li>\n\
<li><span class=\'code\'>kAfterLoadReferenceAndRecordEdits</span></li>\n\
</ul></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_scene_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_scene_message.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage</a></span> also has a new <span class=\'code\'>addCheckReferenceCallback()</span> method which provides the callback with a reference node and a resolved path, in addition to the usual check variable which can be used to abort the operation. The only supported message type is <span class=\'code\'>kBeforeLoadReferenceCheck.</span></p></li>\n\
<li><p>A new <span class=\'code\'>kAfterSceneReadAndRecordEdits</span> message type has been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_scene_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_scene_message.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage</a></span>. It is called after a file load/import/reference/reload-reference operation has completed. Any reference edits made during the callback are recorded.</p></li>\n\
<li><p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDependencyNode::setExternalContentForFileAttr()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dependency_node.html#a54193b5ac963b2cd834aec221cb72d8b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDependencyNode::setExternalContentForFileAttr()</a></span> helper method has been added to allow you to easily add one of the node&#39;s file path attributes to an external content table. <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxNode::setExternalContentForFileAttr()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_node.html#a9a280288002cbae6c1e42cbfc7695048&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxNode::setExternalContentForFileAttr()</a></span> provides the same functionality to plug-in nodes.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"file-path-resolution\"></a><h3 id=\"file-path-resolution\">File Path Resolution</h3></div>\n\
<ul>\n\
<li><p>To support custom file resolvers that resolve paths differently depending on the node that is using the path, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxFileResolver\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_file_resolver.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxFileResolver</a></span> now provides a <span class=\'code\'>resolveURIWithContext()</span> virtual method which takes the full name of the node which <em>owns</em> the file.</p></li>\n\
<li><p>In addition, a <span class=\'code\'>contextNodeFullName</span> parameter has been added to the following methods which take file paths:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MExternalContentInfoTable::addResolvedEntry()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_external_content_info_table.html#a065dfd4fad52eddb6ec6f612fc80dfa0&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MExternalContentInfoTable::addResolvedEntry()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MExternalContentInfoTable::addUnresolvedEntry()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_external_content_info_table.html#a02b066d0faa24f55563c607f883d47de&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MExternalContentInfoTable::addUnresolvedEntry()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MExternalContentInfoTable::getEntry()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_external_content_info_table.html#aa52fbca9287699057b1ac28c99a03297&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MExternalContentInfoTable::getEntry()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MExternalContentInfoTable::getInfo()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_external_content_info_table.html#abe318bee07d9bf06566f13bdc4ba5bad&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MExternalContentInfoTable::getInfo()</a></span></li>\n\
<li>The filePath version of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTextureManager::acquireTexture()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a04aa3cfef217948abc8edd0f19565f95&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTextureManager::acquireTexture()</a></span></li>\n\
<li>All versions of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderUtil::exactFileTextureName()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_render_util.html#a419f62773e2626b29666ca4dd2cf5370&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderUtil::exactFileTextureName()</a></span></li>\n\
</ul></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"standalone-metadata-api-adskdata\"></a><h3 id=\"standalone-metadata-api-adskdata\">Standalone Metadata API (adsk::Data)</h3></div>\n\
<ul>\n\
<li><p>A number of additions have been made to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"Accessor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_accessor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">Accessor</a></span> class:</p>\n\
<ul>\n\
<li>A new variant of <span class=\'code\'>read()</span> allows you to specify structures and associations that should be read, rather than the whole file.</li>\n\
<li>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"Accessor::isFileSupported()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_accessor.html#affc059b6e36359ace301cc87e277561b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">Accessor::isFileSupported()</a></span> virtual method can be overridden to reject files which have the right extension, but are not supported by the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"Accessor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_accessor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">Accessor</a></span> (for example, the file version is too old).</li>\n\
<li>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"Accessor::accessorByExtension()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_accessor.html#abf1d9c9d80247217f2db213af7338221&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">Accessor::accessorByExtension()</a></span> static method returns the appropriate <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"Accessor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_accessor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">Accessor</a></span> for a given file extension, if there is one.</li>\n\
<li>The <span class=\'code\'>AccessorMaya</span> derived class provides access to a Maya scene&#39;s metadata and also serves as an example of how to implement an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"Accessor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_accessor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">Accessor</a></span>.</li>\n\
</ul></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"ui\"></a><h2 id=\"ui\">UI</h2></div>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGlobal::currentToolContext()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_global.html#a9610c67a5c31bd0a58b6679a58823aec&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGlobal::currentToolContext()</a></span> returns a tool&#39;s <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a></span>. The new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnToolContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_tool_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnToolContext</a></span> class can then be used to access information about the tool.</p></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxContext</a></span> now has a <span class=\'code\'>doEnterRegion()</span> virtual method which plug-ins can override.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"miscellaneous\"></a><h2 id=\"miscellaneous\">Miscellaneous</h2></div>\n\
<ul>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MComputation\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_computation.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MComputation</a></span>: Support has been added to allow you to use the progress indicator in Maya&#39;s status bar and to control whether the wait cursor is displayed.</p></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDagNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDagNode</a></span>: The <span class=\'code\'>getConnectedSetsAndMembers()</span> method has been removed from <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnMesh\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_mesh.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_mesh.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnMesh</a></span> and moved into its parent class, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDagNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDagNode</a></span>, allowing the method to be available to all <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDagNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dag_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDagNode</a></span>-derived classes, such as <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnNurbsSurface\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_nurbs_surface.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_nurbs_surface.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnNurbsSurface</a></span>.</p></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGlobal\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_global.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_global.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGlobal</a></span>: <span class=\'code\'>optionVarExists()</span> and <span class=\'code\'>removeOptionVar()</span> added.</p></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMeshSmoothOptions\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_mesh_smooth_options.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_mesh_smooth_options.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMeshSmoothOptions</a></span>: The subdivision type can now be specified.</p></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRampAttribute\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_ramp_attribute.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_ramp_attribute.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRampAttribute</a></span>: <span class=\'code\'>sampleColorRamp()</span> and <span class=\'code\'>sampleValueRamp()</span> return evenly spaced samples of the ramp.</p></li>\n\
<li><p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a></span>: <span class=\'code\'>substitute()</span> and <span class=\'code\'>substituteFirst()</span> have been added.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"net-api\"></a><h2 id=\"net-api\">.NET API</h2></div>\n\
<ul>\n\
<li>Maya .NET API now uses .NET Framework 4.5. You can now use Microsoft Visual Studio 2012 to compile the examples.</li>\n\
<li><p>A new command <span class=\'code\'>GCCmdCSharp</span> has been added to the .Net SDK <span class=\'code\'>examples.nll.dll</span>.</p>\n\
<p>You can use this command to force gc collection.</p></li>\n\
<li><p>A new attribute <span class=\'code\'>OwnerShip</span> has been added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUserData</a></span>.</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUserData</a></span> holds native resources. Set this attribute to false so that <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUserData</a></span> does not release the native resources that it holds when .NET disposes of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUserData</a></span> instance.</p></li>\n\
<li><p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUserData</a></span> class now allows you to create derived classes in the .NET SDK.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"example-plug-ins\"></a><h2 id=\"example-plug-ins\">Example plug-ins</h2></div>\n\
<p>The <span class=\'code\'>devkit/plug-ins/blastCmd</span> and <span class=\'code\'>/hlslShader</span> example plug-ins are now obsolete.</p>\n\
<div class=\'section\'><a id=\"pyqt-and-pyside-widget-best-practices-updated\"></a><h2 id=\"pyqt-and-pyside-widget-best-practices-updated\">PyQt and PySide Widget Best Practices updated</h2></div>\n\
<p>The <span class=\'code\'>MayaQWidgetBaseMixin</span> and <span class=\'code\'>MayaQWidgetDockableMixin</span> classes in the <span class=\'code\'>maya.app.general.mayaMixin</span> module simplify the integration of PySide-based widgets by providing methods that: auto-name a widget, parent a widget to the Maya main window, dock a widget and so forth. See <a href=\'#!/url=./developer/Maya-Python-API/Working-with-PySide-in-Maya/PyQt-and-PySide-Widget-Best.html\' title=\'\'>PyQt and PySide Widget Best Practices</a> for more information.</p>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";