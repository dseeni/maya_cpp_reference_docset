var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n\
<script type=\"text/javascript\" src=\"../../../scripts/prettify.js\"></script><script src=\"../../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta http-equiv=\"Content-Style-Type\" content=\"text/css\"><meta name=\"generator\" content=\"pandoc\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>What&#39;s New in the Rendering and Lighting API</title>\n\
   <meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script></script><script></script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>What&#39;s New in the Rendering and Lighting API</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"whats-new-in-the-rendering-and-lighting-api\"></a></div>\n\
<ul>\n\
<li><p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::mesh()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#ab7479336abc018548fe68277932d848a&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MUIDrawManager::mesh()</a></span> interface has been overloaded and a new interface added to support float data types.</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint\">void mesh( Primitive mode, \n\
    const <a href=\"javascript:void(0)\" data-symbol=\"MFloatPointArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_point_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MFloatPointArray</a>&amp; position,\n\
    const <a href=\"javascript:void(0)\" data-symbol=\"MFloatVectorArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_vector_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MFloatVectorArray</a>* normal = NULL,\n\
    const <a href=\"javascript:void(0)\" data-symbol=\"MColorArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_color_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MColorArray</a>* color = NULL,\n\
    const <a href=\"javascript:void(0)\" data-symbol=\"MUintArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_uint_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MUintArray</a>* index = NULL,\n\
    const <a href=\"javascript:void(0)\" data-symbol=\"MFloatPointArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_float_point_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MFloatPointArray</a>* texcoord = NULL \n\
    );</pre></div></li>\n\
<li><p>The following <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSelectionContext::doPress()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_selection_context.html#a0207c206f23f9ed9ba2cd52afd01cd0f&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSelectionContext::doPress()</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSelectionContext::doRelease()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_selection_context.html#a560e1136f32f260f7de42b579ad1f27b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSelectionContext::doRelease()</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSelectionContext::doDrag()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_selection_context.html#a531f370c5c8612e10b504a4858c44c60&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSelectionContext::doDrag()</a></span>, and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSelectionContext::doHold()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_selection_context.html#acf178c57feb8a78a602eea378e9e57d7&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSelectionContext::doHold()</a></span> virtual functions have been added to handle mouse events for Viewport 2.0.</p>\n\
<p>Now when you derive a class from <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSelectionContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_selection_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSelectionContext</a></span>, you can override these functions to handle mouse events such as a button press or release:</p>\n\
<ul>\n\
<li><span class=\'code\'>virtual <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStatus</a> doPress ( <a href=\"javascript:void(0)\" data-symbol=\"MEvent\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_event.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MEvent</a> &amp; event, <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MUIDrawManager</a>&amp; drawMgr, const <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MFrameContext</a>&amp; context);</span></li>\n\
<li><span class=\'code\'>virtual <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStatus</a> doRelease( <a href=\"javascript:void(0)\" data-symbol=\"MEvent\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_event.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MEvent</a> &amp; event, <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MUIDrawManager</a>&amp; drawMgr, const <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MFrameContext</a>&amp; context);</span></li>\n\
<li><span class=\'code\'>virtual <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStatus</a> doDrag ( <a href=\"javascript:void(0)\" data-symbol=\"MEvent\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_event.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MEvent</a> &amp; event, <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MUIDrawManager</a>&amp; drawMgr, const <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MFrameContext</a>&amp; context);</span></li>\n\
<li><span class=\'code\'>virtual <a href=\"javascript:void(0)\" data-symbol=\"MStatus\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_status.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MStatus</a> doHold ( <a href=\"javascript:void(0)\" data-symbol=\"MEvent\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_event.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MEvent</a> &amp; event, <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MUIDrawManager</a>&amp; drawMgr, const <a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MFrameContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_frame_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MFrameContext</a>&amp; context);</span></li>\n\
</ul>\n\
<p>To ensure that your plug-in works correctly in both the Legacy Default Viewport and Viewport 2.0, you can keep the legacy implementation of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSelectionContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_selection_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSelectionContext</a></span> unchanged, but you must override the Viewport 2.0 implementation.</p>\n\
<p>See the <em>moveTool</em> devkit example for more information.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"shading\"></a><h2 id=\"shading\">Shading</h2></div>\n\
<ul>\n\
<li>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxShaderOverride</a></span> class now supports Maya shading nodes for particle sprite shading in Viewport 2.0. See the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"customSpriteShader/customSpriteShader.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/custom_sprite_shader_2custom_sprite_shader_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">customSpriteShader/customSpriteShader.cpp</a></span> example plug-in for details on creating a custom sprite shader.</li>\n\
<li><p>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::writeEffectSourceToFile()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#afcbf6a45dfeef2b89b6017448c1309ac&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MShaderInstance::writeEffectSourceToFile()</a></span> method for debugging custom shader fragment development. Use this method to see how the final shader fragments are converted to the final effect source on the current drawing API.</p>\n\
<p>You can validate the shader fragments by compiling and binding a shader instance generated from the final effect source. To enable the fragment debugging code path, set the following environment variable: <span class=\'code\'>MAYA_CUSTOMSPRITESHADER_DEBUG_FRAGMENTS = 1</span>. Shader compilation errors or warnings can be displayed in the Maya Script Editor. When errors or warnings occur, modify the fragments in XML. After updating, restart Maya and reload the scene the test your fixes.</p>\n\
<p>See the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"customSpriteShader/customSpriteShader.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/custom_sprite_shader_2custom_sprite_shader_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">customSpriteShader/customSpriteShader.cpp</a></span> plug-in example for more information.</p></li>\n\
<li><p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"customSpriteShader/customSpriteShader.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/custom_sprite_shader_2custom_sprite_shader_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">customSpriteShader/customSpriteShader.cpp</a></span> example plug-in demonstrates how to connect geometry shader fragments using the C++ API or XML schema. It also includes the use of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxShaderOverride</a></span> class to create custom shaders for particle sprites.</p>\n\
<p>The plug-in connects geometry shader fragments by creating a shader instance from a fragment graph using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::addInputFragment()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#aecb9166e418601fee92b37c9fe39f3fe&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MShaderInstance::addInputFragment()</a></span>. The fragment graph connections, properties, values, and outputs are defined by an XML schema.</p>\n\
<p>An implementation of color management on the input texture is also included in the supplied <span class=\'code\'>customFileTextureOutputColor.xml</span> file. This file shows how Maya converts texture color from sRGB space or linear space. You can also use the existing <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::createShaderInstanceWithColorManagementFragment()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a8b4d20c10162d7709e4352a4503653ee&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MShaderInstance::createShaderInstanceWithColorManagementFragment()</a></span> interface, or refer to <span class=\'code\'>customFileTextureOutputColor.xml</span> for custom implementation of color management depending on your specific needs. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride::isTransparent()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html#ab79d6d7859fceb8fc8b0e4ace1869612&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxShaderOverride::isTransparent()</a></span> virtual method handles transparency notifications.</p>\n\
<p>For debugging the shader fragments, the final effect source of the shader instance is written to disk using a new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::writeEffectSourceToFile()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#afcbf6a45dfeef2b89b6017448c1309ac&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MShaderInstance::writeEffectSourceToFile()</a></span> interface. Shader compilation errors can be displayed in the Maya Script Editor, during binding, or queried using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager::getLastError()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a32aa7a2b395ae162d8fc66abf5f5a14a&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MShaderManager::getLastError()</a></span>.</p>\n\
<p>The customSpriteShader plug-in supports all Viewport 2.0 OpenGL Core Profile, OpenGL, and DirectX 11 modes.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"query-for-camera-near-and-far-clipping-planes-from-shaders\"></a><h3 id=\"query-for-camera-near-and-far-clipping-planes-from-shaders\">Query for camera near and far clipping planes from shaders</h3></div>\n\
<p>You can now access and query for camera near and far planes from shaders using uniform or semantic parameters. For effects generated from a file or buffer, new parameters with semantics have been added to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUniformParameter\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_uniform_parameter.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_uniform_parameter.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MUniformParameter</a></span> class <span class=\'code\'>DataSemantic</span> enumerators. These uniform parameters provide access to near and far clipping planes in full effects created by the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxShaderOverride</a></span> class.</p>\n\
<ul>\n\
<li><span class=\'code\'>kSemanticNearClipPlane</span></li>\n\
<li><span class=\'code\'>kSemanticFarClipPlane</span></li>\n\
</ul>\n\
<p>For shader fragments, a parameter with semantics <span class=\'code\'>nearClipPlane</span> and <span class=\'code\'>farClipPlane</span> are automatically updated by Viewport 2.0.</p>\n\
<div class=\'section\'><a id=\"drawing\"></a><h2 id=\"drawing\">Drawing</h2></div>\n\
<ul>\n\
<li><p>Added new virtual functions to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxDrawOverride</a></span> class, which let you continue to use <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxLocatorNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_locator_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_u_i_1_1_m_px_locator_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxLocatorNode</a></span> class functions to override selection behavior for custom shapes in your plug-ins. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxDrawOverride</a></span> class functions also provide the UI drawing mechanism to supersede the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSurfaceShapeUI\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_surface_shape_u_i.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_u_i_1_1_m_px_surface_shape_u_i.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxSurfaceShapeUI</a></span> class.</p>\n\
<p>These updates do not require plug-in source code changes or recompiling.</p>\n\
<p>The new functions include:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride::wantUserSelection()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html#a04c3f281942eb55197bf023faf5654b9&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxDrawOverride::wantUserSelection()</a></span>, which when set to true this function gets overridden allowing <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride::userSelect()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html#a478acc244fd1127f6a51592d9482a8fd&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxDrawOverride::userSelect()</a></span> to be invoked for selection testing. Otherwise, the implementation is based on the rasterization of the drawing method.</li>\n\
<li>When <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride::userSelect()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html#a478acc244fd1127f6a51592d9482a8fd&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxDrawOverride::userSelect()</a></span> is invoked by <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride::wantUserSelection()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html#a04c3f281942eb55197bf023faf5654b9&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxDrawOverride::wantUserSelection()</a></span>, the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUserData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_user_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_user_data.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MUserData</a></span> instance is used for the current selection context.</li>\n\
</ul>\n\
<p>The rawfootPrintNode plug-in example has been updated to demonstrate the use of the new functions.</p></li>\n\
<li><p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlaneOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_image_plane_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_image_plane_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlaneOverride</a></span> class has been added, which lets you draw custom image planes in Viewport 2.0. Create an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlaneOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_image_plane_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_image_plane_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlaneOverride</a></span> class and register the override when you initialize your plug-in. This new class includes the following methods:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlaneOverride::updateDG()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_image_plane_override.html#a23b698292591f9980d9daa5af9451326&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlaneOverride::updateDG()</a></span>, which is called each time Maya needs to update the parameter used by <span class=\'code\'>updateColorTexture()</span>.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlaneOverride::updateColorTexture()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_image_plane_override.html#acece55e09878bb0582cb11c603a131ad&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlaneOverride::updateColorTexture()</a></span>, which updates the textures used to draw the image plane. You can set custom raw data for the texture. This method only supports color textures.</li>\n\
</ul>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"customImagePlane/customImagePlane.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/custom_image_plane_2custom_image_plane_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">customImagePlane/customImagePlane.cpp</a></span> example for C++ and Python demonstrates how to use the new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlaneOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_image_plane_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_image_plane_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlaneOverride</a></span> class and includes how to:</p>\n\
<ul>\n\
<li>Register the new node.</li>\n\
<li>Manipulate the color texture in the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlaneOverride::updateColorTexture()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_image_plane_override.html#acece55e09878bb0582cb11c603a131ad&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlaneOverride::updateColorTexture()</a></span>method.</li>\n\
<li>Remove color texture updates in <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlane::loadImageMap()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_image_plane.html#a2be831fb036a63c9d96f5ab2844acf92&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlane::loadImageMap()</a></span>.</li>\n\
</ul>\n\
<p>Note that depth map updates still need to be done using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxImagePlane::loadImageMap()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_image_plane.html#a2be831fb036a63c9d96f5ab2844acf92&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxImagePlane::loadImageMap()</a></span>.</p></li>\n\
<li><p>A warning message now appears when the device API that is returned does not include the current device API on which Viewport 2.0 is running. For example, if VP2 is running on OpenGL Core Profile mode, but <span class=\'code\'>supportedDrawAPIs()</span> does not return <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MHWRender::kOpenGLCoreProfile\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/namespace_m_h_w_render.html#ad970d5c990d4803d0e9d73c1ff4fda49aaebf48c70b63878eff38483392f19fb7&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::kOpenGLCoreProfile</a></span>, then a warning similar to the following appears:</p>\n\
<p><span class=\'code\'>Error: line 0: Failed to create evaluator for &quot;drawdb/geometry/apiMesh&quot; classification because the current drawing API isn&#39;t supported.</span></p></li>\n\
<li><p>The <span class=\'code\'>footPrintNode</span>, <span class=\'code\'>footPrint_GeometryOverride</span>, and <span class=\'code\'>rawFootPrintNode</span> devkit examples have been updated to improve viewport refreshes during animation while running Maya in Parallel Evaluation Mode.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"general\"></a><h2 id=\"general\">General</h2></div>\n\
<ul>\n\
<li>Added new methods to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderItem</a></span> class to indicate whether the MRenderItem is compatible with the Maya instancer.\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::isCompatibleWithMayaInstancer()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#ad451a99ccfc0cb2c1f68baa28b52f126&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderItem::isCompatibleWithMayaInstancer()</a></span> returns whether or not the MRenderItem can be used as an instance object with the Maya Instancer.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::setCompatibleWithMayaInstancer()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a7e17e93a3bf27fa7077b612a5c462c6a&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderItem::setCompatibleWithMayaInstancer()</a></span> lets you inform Maya whether or not the MRenderItem is compatible with the Maya Instancer when it is created. If this API is not called explicitly, the state defaults to false, which means the object will be ignored by Maya Instancer.</li>\n\
</ul></li>\n\
<li><p>Parameters for the <span class=\'code\'>rawData()</span> function (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget::rawData()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html#a8056533f17e149f6113c5b6c72e55c5f&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderTarget::rawData()</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTexture::rawData()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture.html#ae99c4e325062e162a32dfd435d81725c&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MTexture::rawData()</a></span>) have been changed. The data type used with the<span class=\'code\'>slicePitch</span> parameter has changed from <span class=\'code\'>int&amp;</span> to <span class=\'code\'>size_t&amp;</span>.</p>\n\
<p>This update coincides with Maya&#39;s internal changes, which allow texture sizes to be greater than the upper limit of int type of 2^31. Note that this change breaks existing code and requires plug-ins to be updated and recompiled.</p>\n\
<p>The following plug-in examples have been updated with this parameter change:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"viewImageBlitOverride/viewImageBlitOverrideMain.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/view_image_blit_override_2view_image_blit_override_main_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">viewImageBlitOverride/viewImageBlitOverrideMain.cpp</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"hwApiTextureTest/hwApiTextureTest.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/hw_api_texture_test_2hw_api_texture_test_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">hwApiTextureTest/hwApiTextureTest.cpp</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"dx11Shader/dx11Shader.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/dx11_shader_2dx11_shader_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">dx11Shader/dx11Shader.cpp</a></span></li>\n\
</ul></li>\n\
<li><p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MPxGeometryOverride</a></span> class now provides frame contexts. For accessing the up-to-date frame context between setup and cleanup, you can use the following:</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint\"> const MFrameContext* getFrameContext() const; </pre></div></li>\n\
<li><p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetManager::releaseRenderTarget()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a3ac81120f77bddaf281b6f1ba21c83d1&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderTargetManager::releaseRenderTarget()</a></span> function has been modified so that it no longer requires a non constant pointer to release a render target object. The parameter type can now be a constant pointer.</p>\n\
<p>For example, the previous implementation required the following call to release a render target:</p>\n\
<p><span class=\'code\'>targetManager-&gt;releaseRenderTarget((<a href=\"javascript:void(0)\" data-symbol=\"MHWRender::MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MHWRender::MRenderTarget</a>*)colorTarget);</span></p>\n\
<p>Can now be simplified to the following:</p>\n\
<p><span class=\'code\'>targetManager-&gt;releaseRenderTarget(colorTarget);</span>.</p></li>\n\
<li><p>As part of the OpenMaya namespace implementation, the following <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"OpenMayaRender\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;py_ref/namespace_open_maya_render.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">OpenMayaRender</a></span> classes have be renamed to maintain backwards compatibility:</p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometry\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MGeometry</a></span> renamed to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryLegacy\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_geometry_legacy.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MGeometryLegacy</a></span></p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryRequirements\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_requirements.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MGeometryRequirements</a></span> renamed to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryRequirementsLegacy\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_geometry_requirements_legacy.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MGeometryRequirementsLegacy</a></span></p>\n\
<p><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderTarget</a></span> renamed to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetLegacy\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_render_target_legacy.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../../&quot;}]\">MRenderTargetLegacy</a></span></p>\n\
<p>For more information about the OpenMaya namespace, see <a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-Maya-API-in-2018.html\' title=\'\'>Important updates to the Maya API</a>.</p></li>\n\
</ul>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";