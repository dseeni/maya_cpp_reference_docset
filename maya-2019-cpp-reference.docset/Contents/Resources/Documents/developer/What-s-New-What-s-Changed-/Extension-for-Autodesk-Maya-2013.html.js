var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta http-equiv=\"Content-Style-Type\" content=\"text/css\"><meta name=\"generator\" content=\"pandoc\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>Extension for Autodesk Maya 2013</title>\n\
   <meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script></script><script></script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>Extension for Autodesk Maya 2013</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"extension-for-autodesk-maya-2013\"></a></div>\n\
<div class=\'section\'><a id=\"viewport-2.0-api-guide\"></a><h2 id=\"viewport-2.0-api-guide\">Viewport 2.0 API Guide</h2></div>\n\
<p>Most of the changes in the Maya 2013 extension are related to the API changes for Viewport 2.0. For more information, you can refer to the Maya Viewport 2.0 API Guide in the <a href=\'#!/url=./developer/Viewport-2-0-API.html\' title=\'\'>Viewport 2.0 API</a> section.</p>\n\
<div class=\'section\'><a id=\"openmaya-render\"></a><h2 id=\"openmaya-render\">OpenMaya Render</h2></div>\n\
<p>Draw Mode Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_draw_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawContext</a></span> - Enhanced support for querying of display styles and lighting modes (<span class=\'code\'>DisplayStyles</span>, <span class=\'code\'>LightingMode</span> <span class=\'code\'>enum</span>).</li>\n\
<li><span class=\'code\'>MHWGeometry</span> - Enhanced support for marking render items as textured versus shaded (<span class=\'code\'>DrawMode</span> <span class=\'code\'>enum</span>).</li>\n\
</ul>\n\
<p>Lighting Information</p>\n\
<ul>\n\
<li>Added the <span class=\'code\'>lightType()</span>, <span class=\'code\'>lightPath()</span>, and other methods to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MLightParameterInformation\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_light_parameter_information.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_light_parameter_information.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MLightParameterInformation</a></span> class for working with <span class=\'code\'>StockParameterSemantics</span>.</li>\n\
</ul>\n\
<p>Geometry Enhancements</p>\n\
<ul>\n\
<li>Introduction of <em>mutators</em> and enhancements to data generators:\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxVertexBufferMutator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_mutator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_vertex_buffer_mutator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxVertexBufferMutator</a></span> - New class that allows for the modification (mutation) of existing streams (vertex buffers) or the creation of custom streams for custom packing of data, such as for swizzling.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawRegistry\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_draw_registry.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_draw_registry.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawRegistry</a></span> - Registration changes to accept mutators and generators.</li>\n\
<li><span class=\'code\'>MHWGeometry</span> - Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBufferArray\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_array.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer_array.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBufferArray</a></span> description (for <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxVertexBufferGenerator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_vertex_buffer_generator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxVertexBufferGenerator</a></span> class).</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxVertexBufferGenerator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_vertex_buffer_generator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_vertex_buffer_generator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxVertexBufferGenerator</a></span> - Enhanced to create new streams by combining or using already created streams (which might be custom). The <span class=\'code\'>getSourceStreams()</span> function lists the name of streams to be used as sources. Based on the list of names, a list of vertex buffers is provided as a parameter (<span class=\'code\'>sourceStreams</span>) for <span class=\'code\'>createVertexStreams()</span> function. Observe that the <span class=\'code\'>createVertexStreams()</span> signature has changed.</li>\n\
</ul></li>\n\
<li>Index and Vertex Buffers\n\
<ul>\n\
<li>Added the <span class=\'code\'>map()</span> and <span class=\'code\'>unmap()</span> methods to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MIndexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MIndexBuffer</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBuffer</a></span> classes to provide read-only access to the buffer contents.</li>\n\
<li>Added <span class=\'code\'>resourceHandle()</span> methods to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MIndexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_index_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MIndexBuffer</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBuffer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBuffer</a></span> classes to set and retrieve graphics device dependent handles to hardware buffers. The <span class=\'code\'>hasCustomResourceHandle()</span> method can be used to determine if a custom resource handle is set.</li>\n\
</ul></li>\n\
<li>EXT_frame_buffer_object support\n\
<ul>\n\
<li>EXT_frame_buffer_object support is added to <span class=\'code\'>MGLdefinitions</span>.</li>\n\
</ul></li>\n\
<li>Flexible data format changes:\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVaryingParameter\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_varying_parameter.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_varying_parameter.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVaryingParameter</a></span> - Type restrictions are loosened for varying parameter declarations, for example, integer and double types are now supported.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryRequirements\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_requirements.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_requirements.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryRequirements</a></span> - Element size is less restrictive for various streams, such as position, normal, tangent, and bitangent. For example, UV coordinates represented using three floats are now supported.</li>\n\
</ul></li>\n\
<li>Introduction of custom indexing for data streams:\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxPrimitiveGenerator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_primitive_generator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_primitive_generator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxPrimitiveGenerator</a></span> - Allows the plug-in to generate custom index buffers.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MComponentDataIndexing\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_component_data_indexing.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_component_data_indexing.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MComponentDataIndexing</a></span> - A support class to describe indexing for a component.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxIndexBufferMutator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_index_buffer_mutator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_index_buffer_mutator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxIndexBufferMutator</a></span> - New class that allows for the modification (mutation) of existing index buffers to allow custom packing of index data, for example, in Crack-Free Point-Normal Triangles using Adjacent Edge Normals (PN AEN) patch list generation.</li>\n\
</ul></li>\n\
<li>New primitive types\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxPrimitiveGenerator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_primitive_generator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_primitive_generator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxPrimitiveGenerator</a></span> - Allows the creation of new primitive types that can be used by <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxShaderOverride</a></span> class or by a custom renderer.</li>\n\
</ul></li>\n\
</ul>\n\
<p>Shader Override Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxShaderOverride</a></span> - Added the <span class=\'code\'>boundingBoxExtraScale()</span> method to allow shaders that do displacement to scale the bounding box of objects. The <span class=\'code\'>handlesDraw()</span> method is also added to allow plug-in shaders to override drawing based on pass context information.</li>\n\
</ul>\n\
<p>Shader Instance Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> - Added specification and setting of transparency flag.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager</a></span> - Added new stock shaders.</li>\n\
<li>Shader instances can now be bound and unbound independently of <span class=\'code\'>MRenderItems</span> with new bind, pass activation, and unbind interfaces. The ability to update parameters within binds and unbind for efficiency is also provided.</li>\n\
<li>A <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> can be acquired by using a buffer stored in the memory (device-specific source code (char*), or a device-specific pre-compiled effect (FXO)).</li>\n\
<li>Shader instances can no longer be deleted directly. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager::releaseShader()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#a0c7deb55edc231cbb2365b271ecd55f8&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager::releaseShader()</a></span> method must be used to delete shaders. This resolves the memory boundary problems that occur when a plug-in is compiled with a compiler configuration that is different from Maya.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span> now allows explicit control over the binding of shader effects (for example, cgfx or fx files) through its new bind() and unbind() methods. You can use <span class=\'code\'>getPassCount()</span> and <span class=\'code\'>activatePass()</span> to determine which passes are enabled in the effect and <span class=\'code\'>updateParameters()</span> can be used to update parameters with the overhead of rebinding.</li>\n\
<li><span class=\'code\'>getEffectsBufferShader()</span> has been added to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager</a></span> class. It performs the same function as <span class=\'code\'>getEffectsFileShader()</span> except that the source code for the effect is contained in a memory buffer instead of a file.</li>\n\
</ul>\n\
<p>Texturing Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTexture\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_texture.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTexture</a></span> - Added specification and setting of transparency flag. Also, included additional query functions for the alpha channel of textures.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTexture::rawData()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture.html#ae99c4e325062e162a32dfd435d81725c&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTexture::rawData()</a></span> - Allows for raw pixel data to be retrieved to system memory.</li>\n\
<li>Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTextureManager::saveTexture()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a1874d1e1c278aee93e49a4f0e477973f&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTextureManager::saveTexture()</a></span> for saving texture to a disk.</li>\n\
<li>Textures can no longer be deleted directly. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MTextureManager::releaseTexture()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_texture_manager.html#a82d198d9b895a67d774077d67073d22a&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MTextureManager::releaseTexture()</a></span> method must be used to delete textures. This resolves the memory boundary problems that occur when a plug-in is compiled with a compiler configuration that is different from Maya.</li>\n\
</ul>\n\
<p>Render Item Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a></span> - When multiple objects are compatible, their geometry can be consolidated into a single <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a></span> to provide better performance by concatenating their index and vertex buffers. The <span class=\'code\'>isConsolidated()</span> function returns true if the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a></span> contains multiple objects and <span class=\'code\'>sourceIndexMapping()</span> returns a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryIndexMapping\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_index_mapping.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_index_mapping.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryIndexMapping</a></span> instance that describes how they are consolidated into the buffers.</li>\n\
<li>You can specify whether a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a></span> can cast or receive shadows. The <span class=\'code\'>castsShadows()</span> method is added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_item.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem</a></span> to modify and query whether the render item is casting shadows. The <span class=\'code\'>receivesShadows()</span> method is added to provide the same functionality for receiving shadows.</li>\n\
</ul>\n\
<p>Render Target Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderUtilities::blitTargetToImage()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a7659377d100bff1d4b48427c270f1ebc&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderUtilities::blitTargetToImage()</a></span> - Allows to render a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTarget</a></span> to a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MImage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_image.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_image.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MImage</a></span>.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderUtilities::blitTargetToGL()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html#a737dde8474ab2cbc3ea2596026e4ef4b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderUtilities::blitTargetToGL()</a></span> - Allows to render a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTarget</a></span> to a region of the current context.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTarget::rawData()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target.html#a8056533f17e149f6113c5b6c72e55c5f&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTarget::rawData()</a></span> - Allows for raw pixel data to be retrieved to system memory.</li>\n\
<li>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetManager::formatSupportsSRGBWrite()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a40caec1e38932c3f1bf6f99eacf58e79&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTargetManager::formatSupportsSRGBWrite()</a></span> to determine if a given format for a render target can support built in hardware gamma correction (also known as <em>sRGB write</em>). This is available for DirectX only. <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOperation::enableSRGBWrite()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_operation.html#abaf708f655730bd4d48fb04bca669616&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOperation::enableSRGBWrite()</a></span> enables it for a given operation.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetDescription\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_target_description.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTargetDescription</a></span> - Added the <span class=\'code\'>setAllowsUnorderedAccess()</span> and <span class=\'code\'>allowsUnorderedAccess()</span> functions to set and query whether a target supports simultaneous read/write access to its data by multiple threads.</li>\n\
<li>Ability to acquire a new render target from the current on-screen buffer.</li>\n\
<li>Fix for swapped first and second color setting on color overrides.</li>\n\
<li>Render targets can no longer be deleted directly. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetManager::releaseRenderTarget()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_manager.html#a3ac81120f77bddaf281b6f1ba21c83d1&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTargetManager::releaseRenderTarget()</a></span> method must be used to delete render targets. This resolves the memory boundary problems that occur when a plug-in is compiled with a compiler configuration that is different from Maya.</li>\n\
</ul>\n\
<p>State Enhancements</p>\n\
<ul>\n\
<li>State objects can no longer be deleted directly. Four new methods (one for each state object type) are added to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStateManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_state_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_state_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStateManager</a></span> for handling deletion: <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStateManager::releaseBlendState()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a544e5c653741b90e7c65d2b34e8ebe60&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStateManager::releaseBlendState()</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStateManager::releaseDepthStencilState()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1ab255028fb2b2440bb6b7300713c15f&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStateManager::releaseDepthStencilState()</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStateManager::releaseRasterizerState()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a5c1115e1c741c78d1c19909c7b4d8db9&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStateManager::releaseRasterizerState()</a></span>, and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MStateManager::releaseSamplerState()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_state_manager.html#a1024724a856ce82cecfaf79bc0c6d6c4&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MStateManager::releaseSamplerState()</a></span>. This resolves the memory boundary problems that occur when a plug-in is compiled with a compiler configuration that is different from Maya.</li>\n\
</ul>\n\
<p>Pass Context Information</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPassContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_pass_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_pass_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPassContext</a></span> - Allows querying of pass context information. Several of the example plug-ins, including footPrintNode and hwPhongShader have been updated to make use of this information.</li>\n\
<li>Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawContext::getPassContext()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_draw_context.html#ad3f9422688a9ffbe815c374ece46c1ea&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawContext::getPassContext()</a></span> to return information about the current render pass. It returns an instance of the new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPassContext\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_pass_context.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_pass_context.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPassContext</a></span> class.</li>\n\
</ul>\n\
<p>Render Override Enhancements</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MViewportRenderer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_viewport_renderer.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MViewportRenderer</a></span> - Enhancements to render override scene operations for additional display mode and lighting mode overrides.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneRender\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_scene_render.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_scene_render.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneRender</a></span> - Provides more object type filtering options. Opaque and transparent objects can now be split for separate drawing.</li>\n\
<li>Support for render overrides in the <em>modelEditor</em> command. Overrides now support UI names and appear in the Renderer menu in the 3d viewport panels.</li>\n\
<li>Fix for swapped first and second color setting on color overrides.</li>\n\
<li>A render operation can indicate whether the <em>sRGB write</em> (hardware based 2.2 gamma correction) is enabled for the render target specified for an operation. This applies to scene, quad, and user operations. You can derive from <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOperation::enableSRGBWrite()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_operation.html#abaf708f655730bd4d48fb04bca669616&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOperation::enableSRGBWrite()</a></span> to indicate the enabled status. This is available for DirectX only.</li>\n\
<li>Support for multiple render targets (MRT) for scene and quad render operations. The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderTargetDescription::compatibleWithDescription()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_target_description.html#a34b4286ca5961c23ebe24ee70cf3ffd0&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderTargetDescription::compatibleWithDescription()</a></span> utility method can be used to check for compatible target descriptions.</li>\n\
<li>The HUD operation now works properly with the render target overrides and follows the order of operations. The HUD operation is no longer rendered last and to the final target. The HUD operation is also no longer incorrectly rendered as part of a scene operation. See changes to the stereo plug-in for an example.</li>\n\
</ul>\n\
<p>Geometry Utilities</p>\n\
<ul>\n\
<li>Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryUtilities::acquireReferenceGeometry()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#ac0ef7cdb96768bdde887e4720419ee62&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryUtilities::acquireReferenceGeometry()</a></span> to retrieve a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometry\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometry</a></span> of a specified shape (sphere, cube, or plane) for the given requirements (vertex and index buffers).</li>\n\
<li>Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryUtilities::releaseReferenceGeometry()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#ab050d473690fac85ffa49ebea3aef7ff&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryUtilities::releaseReferenceGeometry()</a></span> to release the geometry memory. The caller is responsible for using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryUtilities::releaseReferenceGeometry()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_utilities.html#ab050d473690fac85ffa49ebea3aef7ff&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryUtilities::releaseReferenceGeometry()</a></span> to release the geometry when done.</li>\n\
</ul>\n\
<p>Render Utilities</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderUtilities\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_utilities.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_utilities.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderUtilities</a></span> - A new class that provides various utility functions for viewport rendering such as setting the swatch background color, retrieving the draw contexts for swatches and the texture editor, and blitting a target to OpenGL or a <span class=\'code\'>MImage.</span></li>\n\
</ul>\n\
<p>DirectX 11 General</p>\n\
<ul>\n\
<li>DX11 resources are exposed similarly to GL resources.</li>\n\
<li>There is a new DX11 draw API. Plug-ins can now support either GL or DX or both API&#39;s.</li>\n\
<li>Added kDirectX11 to the <span class=\'code\'>DrawAPI</span> <span class=\'code\'>enum</span>. <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::drawAPI()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ae2d5ce57991bca16f525728e8d9d399e&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::drawAPI()</a></span> returns kDirectX11 if the current renderer supports DX 11. If the drawing API is kDirectX11, the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::GPUDeviceHandle()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a637ec8cc3cc0e631f1d134f6891f89f0&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::GPUDeviceHandle()</a></span> returns a pointer to the DirectX device. Custom overrides derived from <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxDrawOverride</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxShaderOverride</a></span>, and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOverride</a></span> can indicate whether they support DX11 by including kDirectX11 in the bitmap returned by their <span class=\'code\'>supportedDrawAPIs()</span> methods.</li>\n\
</ul>\n\
<p>Plug-in Exclusion Filtering</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSurfaceShape\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_surface_shape.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_px_surface_shape.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxSurfaceShape</a></span> - Type filtering for plug-in shapes is supported.</li>\n\
<li>Added type exclusion support for plug-in types during registration. You can add in a filter by providing appropriate classification.</li>\n\
<li>Plug-in nodes with classification string <em>drawdb/geometry/lights</em> are filtered when <em>lights</em> are filtered.</li>\n\
</ul>\n\
<p>Custom Display Filters</p>\n\
<ul>\n\
<li>Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnPlugin::registerDisplayFilter()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_plugin.html#acb7cf054c95bb6517d378a26a8d48956&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnPlugin::registerDisplayFilter()</a></span> to create new object filters that appear in the viewport&#39;s Show menu. Added <span class=\'code\'>setPluginDisplay()</span> and <span class=\'code\'>pluginObjectDisplay()</span> to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"M3dView\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m3d_view.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_u_i_1_1_m3d_view.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">M3dView</a></span> class to control and query the state of these filters. Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDrawInfo::pluginObjectDisplayStatus()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_draw_info.html#a083b286557d3c316d9c7652ebae4800b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDrawInfo::pluginObjectDisplayStatus()</a></span> to provide information to plug-in shapes.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"new-api-for-reference-edits\"></a><h2 id=\"new-api-for-reference-edits\">New API for Reference Edits</h2></div>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MItEdits\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_it_edits.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MItEdits</a></span> - Allows you to iterate through a scene&#39;s reference edits. <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MEdit\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_edit.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MEdit</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MAddRemoveAttrEdit\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_add_remove_attr_edit.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MAddRemoveAttrEdit</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MConnectDisconnectAttrEdit\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_connect_disconnect_attr_edit.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MConnectDisconnectAttrEdit</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFcurveEdit\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fcurve_edit.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFcurveEdit</a></span>, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MParentingEdit\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_parenting_edit.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MParentingEdit</a></span>, and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSetAttrEdit\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_set_attr_edit.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSetAttrEdit</a></span> provide methods for querying about specific types of edits.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnReference\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_reference.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_reference.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnReference</a></span> - Allows you to query individual file references.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDependencyNode::isTrackingEdits()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dependency_node.html#abf0b0c43c1773a6d0431bc86dd54245e&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDependencyNode::isTrackingEdits()</a></span> - Allows you to determine if a reference node or assembly is tracking edits.</li>\n\
<li>Added new edit-related message types : <span class=\'code\'>MSceneMessage:kBeforeLoadReferenceAndRecordEdits</span>, <span class=\'code\'>MSceneMessage:kAfterLoadReferenceAndRecordEdits</span>, <span class=\'code\'>MSceneMessage:kBeforeCreateReferenceAndRecordEdits</span>, and <span class=\'code\'>MSceneMessage:kAfterCreateReferenceAndRecordEdits</span>.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"new-api-for-scene-assemblies\"></a><h2 id=\"new-api-for-scene-assemblies\">New API for Scene Assemblies</h2></div>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnAssembly\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_assembly.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnAssembly</a></span> - Allows you to query and modify assembly nodes that are used to manage the various representations of a scene asset.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxAssembly\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_assembly.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxAssembly</a></span> - Allows you to create custom assembly types.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxRepresentation\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_representation.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxRepresentation</a></span> - Allows you to create custom representations.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"new-api-for-generic-metadata-blind-data\"></a><h2 id=\"new-api-for-generic-metadata-blind-data\">New API for Generic Metadata (Blind Data)</h2></div>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxMayaAsciiFilter\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_maya_ascii_filter.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxMayaAsciiFilter</a></span> - Added the <span class=\'code\'>writesMetadata()</span> virtual method.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDependencyNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dependency_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dependency_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDependencyNode</a></span> - Added the <span class=\'code\'>setMetadata()</span>, <span class=\'code\'>deleteMetadata()</span>, <span class=\'code\'>metadata()</span>, and <span class=\'code\'>validateMetadata()</span> methods.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDGModifier\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_d_g_modifier.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_d_g_modifier.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDGModifier</a></span> - Added the <span class=\'code\'>setMetadata()</span> and <span class=\'code\'>deleteMetadata()</span> methods.</li>\n\
<li>Added classes to create and operate on streams of generic data. See the API Reference for classes in the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"adsk::Data\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/namespaceadsk_1_1_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">adsk::Data</a></span> namespace, for example, <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"adsk::Data::Stream\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_stream.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">adsk::Data::Stream</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"adsk::Data::Channel\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/classadsk_1_1_data_1_1_channel.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">adsk::Data::Channel</a></span>.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"new-api-for-uniform-resource-identifiers-uris\"></a><h2 id=\"new-api-for-uniform-resource-identifiers-uris\">New API for Uniform Resource Identifiers (URIs)</h2></div>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxFileResolver\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_file_resolver.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxFileResolver</a></span> - Allows to create custom handlers to resolve specific URI schemes.</li>\n\
<li>The MURI class can be used to create URIs as well as query and modify various components of a URI.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"miscellaneous\"></a><h2 id=\"miscellaneous\">Miscellaneous</h2></div>\n\
<ul>\n\
<li>Added <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnFloatArrayData\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_float_array_data.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnFloatArrayData</a></span> to complement the set of array data types that can be passed through a connection.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MLibrary::cleanup()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_library.html#adca11779e50fa1dd8ac33abf1872cdd1&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MLibrary::cleanup()</a></span> method now takes an optional <span class=\'code\'>exitWhenDone</span> parameter. Setting this parameter to false allows control to return to the caller rather than forcing the application to exit.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"newupdated-samples\"></a><h2 id=\"newupdated-samples\">New/Updated Samples</h2></div>\n\
<ul>\n\
<li><strong>dx11shader</strong> - New plug-in to support HLSL effects in DX11.</li>\n\
<li><strong>dx11ShaderNode</strong> - Support for multiple stream declarations are improved. Clients can now declare multiple TexCoord, color, tangent, and binormal streams and use the AE to bind them by name with the geometry data.</li>\n\
<li><strong>vertexBufferGenerator</strong> - New plug-in example for custom vertex buffers.</li>\n\
<li><strong>vertexBufferMutator</strong> - New plug-in example of a mutator.</li>\n\
<li><strong>customPrimitiveGenerator</strong> - An example of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxPrimitiveGenerator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_primitive_generator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_primitive_generator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxPrimitiveGenerator</a></span>.</li>\n\
<li><strong>crackFreePrimitiveGenerator</strong> - An example of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxIndexBufferMutator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_index_buffer_mutator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_index_buffer_mutator.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxIndexBufferMutator</a></span>.</li>\n\
<li><strong>gpuCacheDrawOverride</strong> - Updated to incorporate changes for display mode, lighting mode exposure, and exclusion filtering.</li>\n\
<li><strong>footprintNode</strong> - Enhanced to perform optimized drawing for shadow passes.</li>\n\
<li><strong>hwPhong</strong> - Updated to perform custom shadow pass and beauty pass rendering using the new stock shaders (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span>). The plug-in can now render under DX11 or OpenGL.</li>\n\
<li><strong>squareScaleManip</strong> - An example of supporting a custom manip (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxManipulatorNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_manipulator_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxManipulatorNode</a></span>) using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxDrawOverride</a></span>.</li>\n\
<li><strong>swissArmyManip</strong> - An example of how VP2.0 supports <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxManipContainer\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_manip_container.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxManipContainer</a></span> without additional code. All that has been added to this plug-in is a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxDrawOverride</a></span> to support the custom locator that the manip affects.</li>\n\
<li><strong>customTextureShader</strong> - An example of a custom shader (using <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxShaderOverride</a></span>) that produces and interprets its own custom texture format. For DX11 only.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"documentation\"></a><h2 id=\"documentation\">Documentation</h2></div>\n\
<ul>\n\
<li>Comprehensive Viewport 2.0 API guide added: <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide.html\' title=\'\'>Maya Viewport 2.0 API Guide</a>.</li>\n\
<li>DX11 semantics topic added: <a href=\'#!/url=./developer/Viewport-2-0-API/Semantics-and-annotations.html\' title=\'\'>Semantics and annotations supported by VP2 DX11</a>.</li>\n\
<li>MShaderInstance Viewport 2.0 Semantics topic added: <a href=\'#!/url=./developer/Viewport-2-0-API/Shader-semantics-supported-by.html\' title=\'\'>Semantics supported by Viewport 2.0 to be used with MShaderInstance</a>.</li>\n\
<li>PyQt and PySide widget best practices topic added: <a href=\'#!/url=./developer/Maya-Python-API/Working-with-PySide-in-Maya/PyQt-and-PySide-Widget-Best.html\' title=\'\'>PyQt and PySide Widget Best Practices</a>.</li>\n\
</ul>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";