var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta http-equiv=\"Content-Style-Type\" content=\"text/css\"><meta name=\"generator\" content=\"pandoc\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>What&#39;s New in API in Maya 2017</title>\n\
   <meta name=\"contextid\" content=\"WHATS_NEW_API_2017\"><meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script></script><script></script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>What&#39;s New in API in Maya 2017</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"whats-new-in-api-in-maya-2017\"></a></div>\n\
<div class=\'section\'><a id=\"api-version-and-binary-compatibility\"></a><h2 id=\"api-version-and-binary-compatibility\">API version and binary compatibility</h2></div>\n\
<p>Maya&#39;s API version has been updated (MAYA_API_VERSION is now 201700). Note that all plug-ins compiled against Maya 2016, including Maya 2016 Extension 1, 2 or service pack releases, must be re-compiled against Maya 2017 in order to be recognized by this version of Maya.</p>\n\
<div class=\'section\'><a id=\"new-qt-and-pyside-versions\"></a><h2 id=\"new-qt-and-pyside-versions\">New Qt and PySide versions</h2></div>\n\
<p>Maya now uses Qt version 5.6.1 and PySide version 2.0.</p>\n\
<p>See <a href=\'#!/url=./developer/Working-with-Qt/Using-Qt-in-Plug-ins.html#building-the-plug-in\' title=\'\'>Building the plug-in</a> for updated instructions on how to build Qt plug-ins.</p>\n\
<div class=\'section\'><a id=\"maya-developer-kit\"></a><h2 id=\"maya-developer-kit\">Maya Developer Kit</h2></div>\n\
<p>The Developer Kit is available online at Autodesk Exchange at <a href=\'https://apps.exchange.autodesk.com/MAYA/en/Home/Index\' title=\'\' target=\'_blank\'>https://apps.exchange.autodesk.com/MAYA/en/Home/Index</a>.</p>\n\
<div class=\'section\'><a id=\"maya-2016-api-guides\"></a><h2 id=\"maya-2016-api-guides\">Maya 2016 API Guides</h2></div>\n\
<p>The Maya 2016 Extension 2 API Guide is available online at <a href=\'http://www.autodesk.com/maya-sdkdoc-2016-enu\' title=\'\' target=\'_blank\'>http://www.autodesk.com/maya-sdkdoc-2016-enu</a>. You can also obtain a downloadable version at <a href=\'http://www.autodesk.com/me-sdk-docs-2016\' title=\'\' target=\'_blank\'>http://www.autodesk.com/me-sdk-docs-2016</a>.</p>\n\
<p>The downloadable version of the Maya 2016 and Maya 2016 Extension 1 API Guide is available at <a href=\'http://www.autodesk.com/me-sdk-docs-2016\' title=\'\' target=\'_blank\'>http://www.autodesk.com/me-sdk-docs-2016</a>.</p>\n\
<p>Jump to the following sections:</p>\n\
<ul>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#rendering\' title=\'\'>Rendering</a>\n\
<ul>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#fragment-renderer\' title=\'\'>Fragment renderer</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#locators\' title=\'\'>Locators</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#drawing\' title=\'\'>Drawing</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#shading-and-color-management\' title=\'\'>Shading and color management</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#selection\' title=\'\'>Selection</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#render-overrides\' title=\'\'>Render overrides</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#lights\' title=\'\'>Lights</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#geometry\' title=\'\'>Geometry</a></li>\n\
</ul></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#animation\' title=\'\'>Animation</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#scene-assembly\' title=\'\'>Scene Assembly</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#general\' title=\'\'>General</a></li>\n\
<li><a href=\'#!/url=./developer/What-s-New-What-s-Changed-/What-s-New-in-API-in-Maya-2017-3.html#maya-viewport-2-0-and-animation-performance-whitepapers\' title=\'\'>Maya Viewport 2.0 and animation performance whitepapers</a></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"rendering\"></a><h2 id=\"rendering\">Rendering</h2></div>\n\
<div class=\'section\'><a id=\"fragment-renderer\"></a><h3 id=\"fragment-renderer\">Fragment renderer</h3></div>\n\
<p>A <em>viewRenderOverrideFromFragments</em> example plug-in has been added which demonstrates the use of a set of new APIs that allow you to use scripted fragment and fragment graphs to render the scene and any desired post effects. Script fragments are the building blocks used internally by Maya for standard viewport rendering effects, and are located in a series of <span class=\'code\'>.xml</span> files in the <span class=\'code\'>bin/ScriptFragment</span> folder of your Maya installation directory.</p>\n\
<p>The following API classes and interfaces have been added to enable you to create a fragment renderer:</p>\n\
<ul>\n\
<li><p>Added a new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneRender\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_scene_render.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_scene_render.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneRender</a></span> constructor that allows you to provide the name of the fragment with which you want to render the scene.</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint\">MSceneRender (const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a> &amp;name, const <a href=\"javascript:void(0)\" data-symbol=\"MString\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_string.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MString</a> &amp;fragmentName)</pre></div></li>\n\
<li>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderParameters\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_parameters.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_parameters.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderParameters</a></span> class that can be used to read or write render input values.</li>\n\
<li>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneRender::getParameters()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a426c26adb287500c03beeabeee48851c&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneRender::getParameters()</a></span> method that returns a pointer to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderParameters\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_parameters.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_parameters.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderParameters</a></span> class, which is a block of render input parameters used to control the renderer.</li>\n\
<li>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneRender::fragmentName()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_scene_render.html#a58d8763f6b157364cc60aebb5e9fb0be&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneRender::fragmentName()</a></span> method that returns the name of the script fragment or fragment graph for use when rendering the scene.</li>\n\
<li><p>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderScriptCallback\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_script_callback.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderScriptCallback</a></span> class.</p>\n\
<p>Derive from this class to create a callback function that can be registered and called from your script fragment <span class=\'code\'>.xml</span>. Implement the <span class=\'code\'>execute()</span> function which allows you to obtain the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderParameters\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_parameters.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_parameters.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderParameters</a></span> from the current renderer graph and three optional values coming from the script. Use this method to compute any desired behavior and call <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderParameters::setParameter()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_parameters.html#aa17e2c9a17b86064950103066fa307ef&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderParameters::setParameter()</a></span> to pass the results back to the script or to other connected fragments in the graph. See the <a href=\'#!/url=./developer/Viewport-2-0-API/Write-fragments-and-fragment/Script-fragment-commands.html#call\' title=\'\'>Call</a> command in the <a href=\'#!/url=./developer/Viewport-2-0-API/Write-fragments-and-fragment/Script-fragment-commands.html\' title=\'\'>Script fragment commands</a> topic for more information.</p></li>\n\
<li>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::registerScriptCallback()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ae60e50cef7a7b5b5a006a74fab479c11&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::registerScriptCallback()</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::deregisterScriptCallback()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a8db004785e17022a463c4a195d50c168&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::deregisterScriptCallback()</a></span> interfaces that allow you to register/deregister an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderScriptCallback\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_script_callback.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderScriptCallback</a></span>. After registering, this callback can be called using the <a href=\'#!/url=./developer/Viewport-2-0-API/Write-fragments-and-fragment/Script-fragment-commands.html#call\' title=\'\'>Call</a> command in your script fragment .xml.</li>\n\
<li><p>Register script fragments and fragment graphs to the Fragment Manager through <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFragmentManager::addFragmentGraphFromFile()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_fragment_manager.html#a222716cf7cc5d67a80ca5be267503813&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFragmentManager::addFragmentGraphFromFile()</a></span>. Although this interface previously existed to support shade fragments and shade fragment graphs, it complements the new classes/ interfaces to provide the new functionality that allows you to create a custom fragment renderer.</p></li>\n\
</ul>\n\
<p>See <a href=\'#!/url=./developer/Viewport-2-0-API/Write-fragments-and-fragment.html\' title=\'\'>Write fragments and fragment graphs to render to the viewport</a>.</p>\n\
<div class=\'section\'><a id=\"locators\"></a><h3 id=\"locators\">Locators</h3></div>\n\
<ul>\n\
<li><p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxLocatorNode::getShapeSelectionMask()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_locator_node.html#acedd5e97c21aacfc5f976499438c7fa8&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxLocatorNode::getShapeSelectionMask()</a></span> interface has been added that allows you to set a shape selection mask for locators similar to how it is possible for shapes (<span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxSurfaceShape\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_surface_shape.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_px_surface_shape.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxSurfaceShape</a></span> and derived classes).</p>\n\
<p>See the <em>footPrintNode_GeometryOverride</em> Developer Kit example for more information. See also <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide/Advanced-Topics/Porting-Selection-from-Viewport.html#selection-mask-usage\' title=\'\'>Selection mask usage</a>.</p>\n\
<p>This method is also available for Python API 2.0.</p></li>\n\
<li><p>It is now possible to reuse Viewport 1 rendering and picking when using the Viewport 2.0 renderer for plug-in locators. See <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide/Devices-and-Draw-APIs/Use-MPxLocatorNode-legacy-fixed.html\' title=\'\'>Use MPxLocatorNode legacy fixed draw code and selection in Viewport 2.0</a>.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"drawing\"></a><h3 id=\"drawing\">Drawing</h3></div>\n\
<ul>\n\
<li><p>Two interfaces have been added to expose view filtering states: <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"M3dView::viewIsFiltered()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m3d_view.html#af6dcf7f299baab571323208e5634308c&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">M3dView::viewIsFiltered()</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"M3dView::filteredObjectList()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m3d_view.html#a325652f994f1ba4f2b110048a1f19a86&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">M3dView::filteredObjectList()</a></span>.</p>\n\
<p>See the <em>viewObjectSetOverride</em> plug-in example in the Developer Kit.</p></li>\n\
<li><p>For Python API 2.0, a new parameter <span class=\'code\'>isAlwaysDirty</span> has been added as the last parameter to the constructor of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxDrawOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_draw_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxDrawOverride</a></span> in order to align with its C++ counterpart.</p>\n\
<p>To achieve the best performance, set this parameter to False, and refrain from using the static draw callback.</p>\n\
<p>See the <em>pyFootPrintNode.py</em> Developer Kit example for more information.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"shading-and-color-management\"></a><h3 id=\"shading-and-color-management\">Shading and color management</h3></div>\n\
<ul>\n\
<li><p>When <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance::createShaderInstanceWithColorManagementFragment()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html#a8b4d20c10162d7709e4352a4503653ee&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance::createShaderInstanceWithColorManagementFragment()</a></span> is used to add a color management fragment to an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderInstance\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_shader_instance.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderInstance</a></span>, any pre or post render callbacks set on the shader instance are no longer lost. Previously they would both be set to null.</p></li>\n\
<li>Previously, the fragment <span class=\'code\'>mayaTextureShader</span> and its associated stock shader wrapper <span class=\'code\'>k3dSolidTextureShader</span> did not include <span class=\'code\'>exposure</span> or <span class=\'code\'>alphaAsLuminance</span> as parameters. Exposure for these attributes have been added to complete the support for color management parameters. See <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide/Advanced-Topics/Color-management-support-for.html\' title=\'\'>Color management support for plug-in shaders in Viewport 2.0</a>.</li>\n\
<li><p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MShaderManager::clearEffectCache()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_shader_manager.html#aa1d5ec47bd8ad5c556e52ad2ca5dc507&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MShaderManager::clearEffectCache()</a></span> method has been added that allows plug-ins to clear the effect cache. This method allows all relevant effects to be updated when the implementation of a shader fragment or fragment graph has been modified.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"selection\"></a><h3 id=\"selection\">Selection</h3></div>\n\
<ul>\n\
<li>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSelectionList::intersect()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_selection_list.html#ad44d2a948e6027c27702304431b14052&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSelectionList::intersect()</a></span> interface has been added that can be used to modify a selection list to contain the intersection of itself and the given list.</li>\n\
<li><p>To clarify the usage of <span class=\'code\'>beginDrawable</span>, the following changes were made to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager</a></span>:</p>\n\
<ul>\n\
<li>The non-parameter version of <span class=\'code\'>beginDrawable()</span> was removed</li>\n\
<li>The two-parameter version of <span class=\'code\'>beginDrawable (unsigned int name, bool nameIsPickable)</span> was marked as deprecated</li>\n\
<li>Added a new enum <span class=\'code\'>Selectability</span>, and added a new two-parameter version of <span class=\'code\'>beginDrawable (Selectability selectability=kAutomatic, unsigned int selectionName=0)</span></li>\n\
<li>The Python API 2.0 version of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager</a></span> was also updated accordingly</li>\n\
</ul>\n\
<p>Refer to the <em>uiDrawManager</em> and <em>lineManipContainer</em> (C++ API) and the <em>pyUiDrawManager.py</em> (Python API 2.0) Developer Kit examples for more information.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"render-overrides\"></a><h3 id=\"render-overrides\">Render overrides</h3></div>\n\
<ul>\n\
<li><p>A new method has been added:</p>\n\
<div class=\"codeBlock\"><pre class=\"prettyprint\">const MFrameContext* MRenderOverride::getFrameContext()\n\
</pre></div><p>This method allows access to the current frame render context information which is available between <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOverride::setup()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_override.html#a773d1f1082e711c8d4cf216d32b07fe4&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOverride::setup()</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOverride::cleanup()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_override.html#aca5dc8a0749ab4431a1208e16dbdaa45&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOverride::cleanup()</a></span>. Per object / render item information is not available at setup time as the pipeline has not yet been run. Note that this provides information regardless of whether the override is called for viewport, Playblast, Render View or batch rendering.</p>\n\
<p>See the <span class=\'code\'>pyFrameContexTest.py</span> plug-in example which demonstrates the use of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderOverride.getFrameContext()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_render_override.html#a426926618b1356903b105509f6b62890&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderOverride.getFrameContext()</a></span> to extract various per-frame data.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"lights\"></a><h3 id=\"lights\">Lights</h3></div>\n\
<p>It is now possible to combine a custom draw override with internal Viewport 2.0 lighting support by specifying both a <span class=\'code\'>&quot;drawdb/light&quot;</span> and a <span class=\'code\'>&quot;drawdb/geometry&quot;</span> classification when registering a node.</p>\n\
<p>A sample use case is to draw a custom object in the viewport that performs lighting in Viewport 2.0 as a native Maya light would. See the <em>apiDirectionalLightShape</em> plug-in example and <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide/Plug-in-Entry-Points/Registration.html\' title=\'\'>Registration</a> for more information.</p>\n\
<div class=\'section\'><a id=\"geometry\"></a><h3 id=\"geometry\">Geometry</h3></div>\n\
<p>The access of vertex ids, face ids and local parameterization is now exposed via the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryExtractor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryExtractor</a></span> interface. To extract completely unshared geometric data from a DAG shape, <span class=\'code\'>kPolyGeom_NotSharing</span> needs to be specified when constructing an <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryExtractor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryExtractor</a></span> instance.</p>\n\
<p>Similar to <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxShaderOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_shader_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxShaderOverride</a></span>, there is no new interface on <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGeometryExtractor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_geometry_extractor.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGeometryExtractor</a></span> that requests vertex ids, face ids or local parameterization. Instead <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MVertexBufferDescriptor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_vertex_buffer_descriptor.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_vertex_buffer_descriptor.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MVertexBufferDescriptor</a></span> should be specified with the following semantic names to populate these vertex buffers:</p>\n\
<ul>\n\
<li>“vertexid” : When set, will return a vertex id buffer</li>\n\
<li>“faceid” : When set, will return a face id buffer</li>\n\
<li>“localuvcoord” : When set, will return a local uv coordinate buffer</li>\n\
</ul>\n\
<p>Refer to the <em>geometryReplicator</em> plug-in example for more information. To execute this plug-in example, first set the following environment variables, then assign a hwPhongShader to the geometryReplicator shape.</p>\n\
<ul>\n\
<li>MAYA_HWPHONG_TEST_VERTEXID_AND_FACEID = 1</li>\n\
<li>MAYA_HWPHONG_TEST_LOCALUVCOORD=1</li>\n\
<li>MAYA_HWPHONG_TEST_INDEXING=1</li>\n\
</ul>\n\
<p>See <a href=\'#!/url=./developer/Viewport-2-0-API/Maya-Viewport-2-0-API-Guide/Advanced-Topics/Geometry-remapping-for-hardware.html#viewport-2-0--mgeometryextractor-access\' title=\'\'>Viewport 2.0: MGeometryExtractor access</a>.</p>\n\
<div class=\'section\'><a id=\"animation\"></a><h2 id=\"animation\">Animation</h2></div>\n\
<div class=\'section\'><a id=\"custom-evaluators\"></a><h3 id=\"custom-evaluators\">Custom evaluators</h3></div>\n\
<p>New API extensions have been added that let you define custom evaluators. Custom evaluators allow you to override how DG nodes are scheduled and executed by the evaluation manager. See <a href=\'#!/url=./developer/Custom-evaluator-overview.html\' title=\'\'>Custom evaluator overview</a>. See also <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCustomEvaluator\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_custom_evaluator.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxCustomEvaluator</a></span> and the <em>simpleEvaluator</em> and <em>constraintEvaluator</em> plug-in examples in the Developer Kit.</p>\n\
<div class=\'section\'><a id=\"threading\"></a><h3 id=\"threading\">Threading</h3></div>\n\
<ul>\n\
<li>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObjectHandle::objectHashCode()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object_handle.html#addc1c7628b6f11fdc67e53c02746b7fe&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObjectHandle::objectHashCode()</a></span> interface has been added that allows you to return a hash code for the provided <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObject\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObject</a></span> without having to construct or destruct <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObjectHandle\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object_handle.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object_handle.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObjectHandle</a></span>. You should use this interface instead of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObjectHandle::hashCode()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object_handle.html#a23a0c64be863c23d2cf8214243d59bb1&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObjectHandle::hashCode()</a></span> if your plug-in is threaded because the construction and destruction of <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MObjectHandle\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_object_handle.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_object_handle.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MObjectHandle</a></span> are not thread safe.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"scene-assembly\"></a><h2 id=\"scene-assembly\">Scene Assembly</h2></div>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxAssembly::postActivateRep()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_assembly.html#a20e752bcb6ba8ba9addefe1f3251313c&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxAssembly::postActivateRep()</a></span> virtual function has been added that provides the assembly with an opportunity to perform operations on it after the representation has been activated.</p>\n\
<div class=\'section\'><a id=\"general\"></a><h2 id=\"general\">General</h2></div>\n\
<ul>\n\
<li><p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPlug::isDefaultValue()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_plug.html#a7152404cf79d6b276feda05296b1acfc&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPlug::isDefaultValue()</a></span> method has been added that determines if the plug value is equivalent to the plug&#39;s default value.</p>\n\
<p>This method is also available for Python API 2.0.</p></li>\n\
<li>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MDagPath::getAllPathsBelow()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_dag_path.html#aad29a091d956c5abefdf665f03b473ac&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MDagPath::getAllPathsBelow()</a></span> interface has been added that returns all paths to leaf objects below the given path, excluding transforms.</li>\n\
<li><p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDependencyNode::absoluteName()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dependency_node.html#a14ae19db432d68e75abf249ecbf82307&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDependencyNode::absoluteName()</a></span> has been added that returns the full namespace path of the node.</p>\n\
<p>This method is also available for Python API 2.0.</p></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"maya-viewport-2.0-and-animation-performance-whitepapers\"></a><h2 id=\"maya-viewport-2.0-and-animation-performance-whitepapers\">Maya Viewport 2.0 and animation performance whitepapers</h2></div>\n\
<p>The Maya Viewport 2.0 whitepaper can be found at <a href=\'http://www.autodesk.com/developmaya\' title=\'\' target=\'_blank\'>http://www.autodesk.com/developmaya</a>.</p>\n\
<p>This document is divided into two parts. The first (<em>Viewport 2.0 API Porting Guide</em>) is an overview of Viewport 2.0 and outlines the differences between the legacy default viewport and Viewport 2.0. The second part (<em>Viewport 2.0 API Porting Guide Details</em>) is more detailed and specifies the recommended interfaces and provides code examples for common tasks.</p>\n\
<p>The <em>Improving Performance with Parallel Evaluation</em> whitepaper can be found at <a href=\'http://www.autodesk.com/maya-docs\' title=\'\' target=\'_blank\'>http://www.autodesk.com/maya-docs</a>.</p>\n\
<p>Refer to this document for information on how to use the new Evaluation Manager feature to improve playback and manipulation of your animated scenes through scene-level graph analysis and parallelization. In addition, it provides information on the API extensions that your plug-in can implement to take advantage of these features, as well as guidelines on how to use the Profiler to evaluate performance in your scene.</p>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";