var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head>\n\
<link href=\"../../style/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n\
<script type=\"text/javascript\" src=\"../../scripts/prettify.js\"></script><script src=\"../../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta http-equiv=\"Content-Style-Type\" content=\"text/css\"><meta name=\"generator\" content=\"pandoc\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>What&#39;s New in API in Maya 2019</title>\n\
   <meta name=\"contextid\" content=\"WHATS_NEW_API_2019\"><meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><style type=\"text/css\">code{white-space: pre;}</style><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/multireflink.js\"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script></script><script></script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div><div id=\"reflinkdiv\"></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>What&#39;s New in API in Maya 2019</h1>\n\
         </div>\n\
\n\
<div class=\'section\'><a id=\"whats-new-in-api-in-maya-2019\"></a></div>\n\
<div class=\'section\'><a id=\"building-plug-ins-and-applications\"></a><h2 id=\"building-plug-ins-and-applications\">Building plug-ins and applications</h2></div>\n\
<p>Applications and plug-ins are now built using the <span class=\'code\'>cmake</span> tool. When building a plug-in or application, <span class=\'code\'>cmake</span> must be called twice: once to create a makefile, and a second time to build the application or plug-in using the makefile.</p>\n\
<p>CMake is available to download from <a href=\'https://cmake.org/download/\' title=\'\' target=\'_blank\'>https://cmake.org/download/</a>.</p>\n\
<div class=\'section\'><a id=\"new-macosx-python-version-and-impact-on-environment-variables\"></a><h2 id=\"new-macosx-python-version-and-impact-on-environment-variables\">New MacOSX Python version and impact on environment variables</h2></div>\n\
<p>The embedded version of Python on MacOSX has been updated to Python 2.7.15.</p>\n\
<p>Maya now sets the <span class=\'code\'>SSL_CERT_FILE</span> environment variable to point to the <span class=\'code\'>cert.pem</span> file within its embedded Python Framework if <span class=\'code\'>SSL_CERT_FILE</span> is unset.</p>\n\
<p>To keep <span class=\'code\'>SSL_CERT_FILE</span> unset, the <span class=\'code\'>MAYA_DO_NOT_SET_SSL_CERT_FILE</span> environment variable must be set to 1 before launching Maya.</p>\n\
<div class=\'section\'><a id=\"rendering-and-lighting\"></a><h2 id=\"rendering-and-lighting\">Rendering and Lighting</h2></div>\n\
<div class=\'section\'><a id=\"mpxgeometryoverride-class-updates\"></a><h3 id=\"mpxgeometryoverride-class-updates\">MPxGeometryOverride class updates</h3></div>\n\
<p>Updates to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride</a></span> class include the following new methods:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride::requiresGeometryUpdate()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a76b919d04fc3deb9262474e7e143733b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride::requiresGeometryUpdate()</a></span>, which determines if other <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride</a></span> methods get called for the associated DAG object during the draw preparation phase.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride::requiresUpdateRenderItems()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a3179af16c4aaaf82031b60a5acb82e86&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride::requiresUpdateRenderItems()</a></span>, which gets called when an instance of a DAG object changes to determine whether <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride::updateRenderItems()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#abad8e8b1f0e06eea32e2be8f97200941&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride::updateRenderItems()</a></span> needs to be called.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride::supportsEvaluationManagerParallelUpdate()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#a04941a5d23a1f72a99e9a620a7f1bd73&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride::supportsEvaluationManagerParallelUpdate()</a></span>, which gets called to determine if the scene is supported by the Evaluation Manager Parallel Update.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride::supportsVP2CustomCaching()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html#aa5eb31a442fb3f0eeca9b941b10691f4&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride::supportsVP2CustomCaching()</a></span>, which gets called during evaluation to determine if VP2 Custom Caching is supported.</li>\n\
</ul>\n\
<p>The <span class=\'code\'>MPyMPxGeometryOverride</span> class in the Python API also includes these new methods.</p>\n\
<div class=\'section\'><a id=\"mrenderitem-class-updates\"></a><h3 id=\"mrenderitem-class-updates\">MRenderItem class updates</h3></div>\n\
<p>When a 3D model view activates Isolate Select for components, Viewport 2.0 creates and maintains necessary render items to represent the drawing of the isolate selected components specifically for that view. These render items are copies of their original items and so they have the same properties including name, type, primitive type, and draw mode. However, their shading components are filtered from the view selected set of that view.</p>\n\
<p>New methods have been added to allow custom render items created in a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride</a></span> implementation to have their copies created for the drawing of isolate selected components. They also provide access of the view-selected shading components so that the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride</a></span> implementation can fill in geometries properly.</p>\n\
<p>These new methods include:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::shadingComponent()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#af2cf56c078dcc016695e00ffad239238&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem::shadingComponent()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::setAllowIsolateSelectCopy()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#a38237a165d430cd9685af1fbff4e20a6&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem::setAllowIsolateSelectCopy()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::allowIsolateSelectCopy()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aead893d8f5f89206f28b01b76d5336a4&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem::allowIsolateSelectCopy()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderItem::isIsolateSelectCopy()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_render_item.html#aca74a11ff6a5082cd01e8a952a7cf198&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderItem::isIsolateSelectCopy()</a></span></li>\n\
</ul>\n\
<p>The apiMeshShape example plugin has been updated to use these new methods.</p>\n\
<p>The Python API also includes these changes.</p>\n\
<div class=\'section\'><a id=\"new-mcolormanagementnodes-class-updates\"></a><h3 id=\"new-mcolormanagementnodes-class-updates\">New MColorManagementNodes class updates</h3></div>\n\
<p>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MColorManagementNodes\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_color_management_nodes.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MColorManagementNodes</a></span> C++ API class has been added that allows you to manipulate color managed nodes; for example: you can color manage one or all input nodes, and query whether an object is color manageable or color managed. A <span class=\'code\'>colorManageAllNodes</span> flag has also been added to the <span class=\'code\'>colorManagementPrefs</span> MEL/Python command.</p>\n\
<div class=\'section\'><a id=\"mhardwarerenderer-class-updates\"></a><h3 id=\"mhardwarerenderer-class-updates\">MHardwareRenderer class updates</h3></div>\n\
<p>The following methods have been deprecated:</p>\n\
<ul>\n\
<li><span class=\'code\'>theRenderer()</span></li>\n\
<li><span class=\'code\'>backEndString()</span></li>\n\
<li><span class=\'code\'>makeResourceContextCurrent()</span></li>\n\
<li><span class=\'code\'>addDrawProcedure()</span></li>\n\
<li><span class=\'code\'>removeDrawProcedure()</span></li>\n\
<li><span class=\'code\'>insertDrawProcedure()</span></li>\n\
<li><span class=\'code\'>getDrawProcedureCount()</span></li>\n\
<li><span class=\'code\'>getDrawProcedureListNames()</span></li>\n\
<li><span class=\'code\'>findDrawProcedure()</span></li>\n\
<li><span class=\'code\'>restoreCurrent()</span></li>\n\
<li><span class=\'code\'>getBufferSize()</span></li>\n\
<li><span class=\'code\'>getColorBufferPixelFormat()</span></li>\n\
<li><span class=\'code\'>getDepthBufferPixelFormat()</span></li>\n\
<li><span class=\'code\'>dereferenceGeometry()</span></li>\n\
<li><span class=\'code\'>glFunctionTable()</span></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"new-and-updated-examples\"></a><h3 id=\"new-and-updated-examples\">New and updated examples</h3></div>\n\
<ul>\n\
<li>Added a new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"geometryOverrideExample1/geometryOverrideExample1.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/geometry_override_example1_2geometry_override_example1_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">geometryOverrideExample1/geometryOverrideExample1.cpp</a></span> example plug-in, which demonstrates how to render geometry with a stock shader.</li>\n\
<li>Added a new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"geometryOverrideExample2/geometryOverrideExample2.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/geometry_override_example2_2geometry_override_example2_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">geometryOverrideExample2/geometryOverrideExample2.cpp</a></span> example plug-in, which demonstrates how render geometry with a Maya shader network.</li>\n\
<li>Added a new <span class=\'code\'>tessellatedQuad</span> example plugin to the Maya devkit. The example demonstrates how to implement custom selection shader for <span class=\'code\'>kPatch</span> render items in a <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxGeometryOverride\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_px_geometry_override.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxGeometryOverride</a></span>. It also shows how to share geometry/index streams among several render items to avoid expensive recalculation.</li>\n\
<li>An updated <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"captureViewRenderCmd/captureViewRenderCmd.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/capture_view_render_cmd_2capture_view_render_cmd_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">captureViewRenderCmd/captureViewRenderCmd.cpp</a></span> devkit example now shows how to disable the output transform in Viewport 2.0 using the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MRenderer::render()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4c8aca11654d4a452d00e2fed12349f2&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MRenderer::render()</a></span> API.</li>\n\
<li>Updates to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"footPrintNode_GeometryOverride/footPrintNode_GeometryOverride.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/foot_print_node__geometry_override_2foot_print_node__geometry_override_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">footPrintNode_GeometryOverride/footPrintNode_GeometryOverride.cpp</a></span> example plug-in now make it fully compatible with Evaluation Caching.</li>\n\
<li>A number of devkit examples have been updated to remove deprecated methods.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"evaluation-and-performance\"></a><h2 id=\"evaluation-and-performance\">Evaluation and Performance</h2></div>\n\
<div class=\'section\'><a id=\"mfndependencynode-class-updates\"></a><h3 id=\"mfndependencynode-class-updates\">MFnDependencyNode class updates</h3></div>\n\
<p>New methods added to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnDependencyNode\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_dependency_node.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_fn_dependency_node.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnDependencyNode</a></span> class let you set and manage which nodes have permission to be scheduled for evaluation by the evaluation graph. Nodes that do not have permission for evaluation can be created and destroyed without invalidating the evaluation graph.</p>\n\
<p>The Python API also includes these new methods. See the <span class=\'code\'>MPyMFnDependencyNode</span> class.</p>\n\
<ul>\n\
<li><span class=\'code\'>MFnDependencyNode::setAllowedToAnimate()</span>, sets whether or not a node has permission to be added to the evaluation graph for scheduling during playback or manipulation. Nodes without permission, cannot be added to the evaluation graph.</li>\n\
<li><span class=\'code\'>MFnDependencyNode::allowedToAnimate()</span> indicates whether or not the node has permission for evaluation based on <span class=\'code\'>MFnDependencyNode::setAllowedToAnimate()</span>.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"mgrapheditorinfo-class-updates\"></a><h3 id=\"mgrapheditorinfo-class-updates\">MGraphEditorInfo class updates</h3></div>\n\
<p>Added the following new methods to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGraphEditorInfo\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_graph_editor_info.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGraphEditorInfo</a></span> class:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGraphEditorInfo::isStackedViewportMode()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_graph_editor_info.html#a23c12ee996e3dcb3ead1535378551b4b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGraphEditorInfo::isStackedViewportMode()</a></span>, which returns whether or not the Graph Editor is in Stacked View mode.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGraphEditorInfo::isNormalizedViewportMode()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_graph_editor_info.html#af6f39202a4a413a35135a4bab5f26468&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGraphEditorInfo::isNormalizedViewportMode()</a></span>, which returns whether or not the Graph Editor is in Normalized View mode.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"mprofiler-class-updates\"></a><h3 id=\"mprofiler-class-updates\">MProfiler class updates</h3></div>\n\
<ul>\n\
<li>New versions of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MProfiler::addCategory()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_profiler.html#a0a16b68268bd93a67d404e9ecb77c5a5&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MProfiler::addCategory()</a></span> and <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MProfiler::getAllCategories()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_profiler.html#ae0049a86f14713ec366abe3b6c1a3d8f&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MProfiler::getAllCategories()</a></span> methods now use a <span class=\'code\'>categoryInfo</span> parameter in addition to the previous accepted parameters. Previous versions of these methods have been deprecated.</li>\n\
<li>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MProfiler::getCategoryInfo()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_profiler.html#a9772be7eb7997d35dc4afc3d7e2dfe05&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MProfiler::getCategoryInfo()</a></span> method returns the profiling category description.</li>\n\
</ul>\n\
<div class=\'section\'><a id=\"new-mpxcacheconfigrulefilter-and-mcacheconfigruleregistry-classes\"></a><h3 id=\"new-mpxcacheconfigrulefilter-and-mcacheconfigruleregistry-classes\">New MPxCacheConfigRuleFilter and MCacheConfigRuleRegistry classes</h3></div>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCacheConfigRuleFilter\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_cache_config_rule_filter.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxCacheConfigRuleFilter</a></span> class lets you define custom configuration rule filters for background evaluation caching. The new class includes the following methods:</p>\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCacheConfigRuleFilter::preRulesExecution()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_cache_config_rule_filter.html#afa2aaf204bd2252c403f09ebf26eaf4b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxCacheConfigRuleFilter::preRulesExecution()</a></span>, which is called when the cache configuration rule application starts.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCacheConfigRuleFilter::postRulesExecution()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_cache_config_rule_filter.html#a6288cdfdc3377f0559fb5f4f48750f17&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxCacheConfigRuleFilter::postRulesExecution()</a></span>, which is called when the cache configuration rule application stops.</li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCacheConfigRuleFilter::isMatch()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_cache_config_rule_filter.html#a67c15983ee137c179a08b7c17070ca72&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxCacheConfigRuleFilter::isMatch()</a></span>, which gets called for each evaluation node when filter rules are applied for the cache configuration.</li>\n\
</ul>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MCacheConfigRuleRegistry\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_cache_config_rule_registry.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MCacheConfigRuleRegistry</a></span> class includes a static method for registering and deregistering <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPxCacheConfigRuleFilter\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_px_cache_config_rule_filter.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPxCacheConfigRuleFilter</a></span> custom classes.</p>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"nameFilter/NameFilter.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/name_filter_2_name_filter_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">nameFilter/NameFilter.cpp</a></span> example demonstrates how to create custom configuration rule filters.</p>\n\
<div class=\'section\'><a id=\"general-and-modeling\"></a><h2 id=\"general-and-modeling\">General and Modeling</h2></div>\n\
<div class=\'section\'><a id=\"muidrawmanager-class-updates\"></a><h3 id=\"muidrawmanager-class-updates\">MUIDrawManager class updates</h3></div>\n\
<p>Updates to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_render_1_1_m_u_i_draw_manager.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager</a></span> include the following:</p>\n\
<ul>\n\
<li>New cylinder and capsule primitive extension methods:\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::cylinder()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a11190e869240a06a8867c6d2c94e9549&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::cylinder()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::capsule()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a422fb80018d636ef0c5dc7eaa057e3d5&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::capsule()</a></span></li>\n\
</ul></li>\n\
<li>New parametric primitive methods now let you define the number of subdivisions for primitives:\n\
<ul>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::sphere()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a3c2219cf077b63cbf547d305ba58fe29&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::sphere()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::circle()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#a75fcc8128cf76800c9ba1342ddcc5f50&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::circle()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::circle2d()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#ab7d5ddc19d298f47247624c95647e7d1&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::circle2d()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::arc()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#aa18ec853b5255d5be50ee32dffde4843&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::arc()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::arc2d()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#aec44ada61d50f617b0a77ee09f72219e&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::arc2d()</a></span></li>\n\
<li><span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MUIDrawManager::cone()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_h_w_render_1_1_m_u_i_draw_manager.html#af16b142f516bfaf49eb2231f4046d9b8&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MUIDrawManager::cone()</a></span></li>\n\
</ul></li>\n\
</ul>\n\
<p>The Python API also includes these methods. See the <span class=\'code\'>pyUiDrawManager.py</span> class.</p>\n\
<p>Updates to the <span class=\'code\'>uiDrawManager</span> example plugin in the Maya devkit include the new methods.</p>\n\
<div class=\'section\'><a id=\"new-mcameramessage-class\"></a><h3 id=\"new-mcameramessage-class\">New MCameraMessage class</h3></div>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MCameraMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_camera_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_camera_message.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MCameraMessage</a></span> class lets you register callbacks for interactive camera manipulation messages. To remove a callback use <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMessage::removeCallback()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_message.html#a50fe995add3ce133b8b56551abb4ed09&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMessage::removeCallback()</a></span>. Note that all callbacks registered by a plug-in must be removed by that plug-in when it is unloaded. Failure to do so will result in a fatal error. The Python API has also been updated with these new methods. See the <span class=\'code\'>MPyMCameraMessage</span> class.</p>\n\
<p>A new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"cameraMessageCmd/cameraMessageCmd.cpp\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/camera_message_cmd_2camera_message_cmd_8cpp-example.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">cameraMessageCmd/cameraMessageCmd.cpp</a></span> plug-in example demonstrates how to use each of the new camera manipulation callbacks.</p>\n\
<div class=\'section\'><a id=\"mfnmesh-class-updates\"></a><h3 id=\"mfnmesh-class-updates\">MFnMesh class updates</h3></div>\n\
<p>A new version of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MFnMesh::create()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_fn_mesh.html#af9b9e5d33d289134d567c62bad4ca3d5&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MFnMesh::create()</a></span> method now stores vertices in doubles and allows edge connections.</p>\n\
<p>The <span class=\'code\'>OpenMaya.MFnMesh.create ()</span> method in the Python API has also been updated with this improvement.</p>\n\
<div class=\'section\'><a id=\"mfn-class-updates\"></a><h3 id=\"mfn-class-updates\">MFn class updates</h3></div>\n\
<p>Added new <span class=\'code\'>kPinToGeometryUV</span> and <span class=\'code\'>kPinToGeometryProx</span> enums.</p>\n\
<div class=\'section\'><a id=\"mpolymessage-class-updates\"></a><h3 id=\"mpolymessage-class-updates\">MPolyMessage class updates</h3></div>\n\
<p>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MPolyMessage::addColorSetChangedCallback()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_poly_message.html#a926c8a8cbe50c7d7e82b77a3a690267b&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MPolyMessage::addColorSetChangedCallback()</a></span> method to register a callback when ColorSetChanged is modified.</p>\n\
<p>Added the following new enums to specify the type of color set change message:</p>\n\
<ul>\n\
<li><span class=\'code\'>kColorSetAdded</span> when a new color set gets added.</li>\n\
<li><span class=\'code\'>kColorSetDeleted</span> when a color set gets deleted.</li>\n\
<li><span class=\'code\'>kCurrentColorSetChanged</span> when the current color set gets changed.</li>\n\
</ul>\n\
<p>The Python API has also been updated to include these changes.</p>\n\
<div class=\'section\'><a id=\"mglobal-class-updates\"></a><h3 id=\"mglobal-class-updates\">MGlobal class updates</h3></div>\n\
<p>Updates to the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGlobal\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_global.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_global.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGlobal</a></span> class include the addition of the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MGlobal::executeTaskOnIdle()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_global.html#ae6bcc815d1ca8f2b4fd8c08d90e14c46&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MGlobal::executeTaskOnIdle()</a></span> method. Use this method to execute a customized task to execute on the next idle event. This is a thread safe way to schedule a task for the main thread to execute. This method is not available in Python.</p>\n\
<div class=\'section\'><a id=\"mmessage-class-updates\"></a><h3 id=\"mmessage-class-updates\">MMessage class updates</h3></div>\n\
<p>Added the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMessage::stopRegisteringCallableScript()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_message.html#a4a75722f9e64825e5d372573176814ed&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMessage::stopRegisteringCallableScript()</a></span> method. Use this method to stop the <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MMessage\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_message.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_message.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MMessage</a></span> object from being passed.</p>\n\
<div class=\'section\'><a id=\"m3dview-class-updates\"></a><h3 id=\"m3dview-class-updates\">M3dView class updates</h3></div>\n\
<p>The following methods are deprecated:</p>\n\
<ul>\n\
<li><span class=\'code\'>beginGL()</span></li>\n\
<li><span class=\'code\'>endGL()</span></li>\n\
<li><span class=\'code\'>setDrawColor(unsigned int, ColorTable)</span></li>\n\
<li><span class=\'code\'>setDrawColor(const <a href=\"javascript:void(0)\" data-symbol=\"MColor\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_color.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;},{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_color.html&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MColor</a>&amp; )</span></li>\n\
<li><span class=\'code\'>setDrawColorAndAlpha()</span></li>\n\
<li><span class=\'code\'>colorMask()</span></li>\n\
<li><span class=\'code\'>setColorMask()</span></li>\n\
<li><span class=\'code\'>drawText()</span></li>\n\
<li><span class=\'code\'>readColorBuffer()</span></li>\n\
<li><span class=\'code\'>writeColorBuffer()</span></li>\n\
<li><span class=\'code\'>readDepthMap()</span></li>\n\
<li><span class=\'code\'>readBufferTo2dTexture()</span></li>\n\
<li><span class=\'code\'>setMultipleDrawEnable()</span></li>\n\
<li><span class=\'code\'>multipleDrawPassCount()</span></li>\n\
<li><span class=\'code\'>setMultipleDrawPassCount()</span></li>\n\
<li><span class=\'code\'>beginProjMatrixOverride()</span></li>\n\
<li><span class=\'code\'>endProjMatrixOverride()</span></li>\n\
</ul>\n\
<div class=\'section\'><a id=\"other-api-updates\"></a><h2 id=\"other-api-updates\">Other API updates</h2></div>\n\
<ul>\n\
<li>Added a new <span class=\'code\'>kAfterCreateReference</span> enum to the <span class=\'code\'>MPyMSceneMessage</span> class. The enum provides support for <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MSceneMessage.addReferenceCallback()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;py_ref/class_open_maya_1_1_m_scene_message.html#a528e6287682b50c0a67a1da7b5b6a5c0&quot;,&quot;title&quot;:&quot;Maya Python API 2.0 Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MSceneMessage.addReferenceCallback()</a></span>.</li>\n\
<li>Added a new <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MColorPickerUtilities\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_m_color_picker_utilities.html&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MColorPickerUtilities</a></span> class, which lets you create a color picker that can grab colors from third-party plugins.</li>\n\
<li>The <span class=\'code\'><a href=\"javascript:void(0)\" data-symbol=\"MnCloth::setAddCrossLinks()\" class=\"a_multireflink\" data-reflinkdata=\"[{&quot;path&quot;:&quot;cpp_ref/class_mn_cloth.html#afe8802113f5d77efe7bd37d59959d878&quot;,&quot;title&quot;:&quot;C++ API Reference&quot;,&quot;relpathtoroot&quot;:&quot;../../&quot;}]\">MnCloth::setAddCrossLinks()</a></span> method now uses a boolean instead of a float value.</li>\n\
</ul>\n\
      <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";