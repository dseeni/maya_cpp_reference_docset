var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><script type=\"text/javascript\" src=\"../scripts/utils/adsk.redirect.js\"></script>\n\
      <title>offsetNode/offsetNode.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'offset_node_2offset_node_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>offsetNode/offsetNode.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">offsetNode/offsetNode.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Produces the dependency graph node &quot;offsetNode&quot;.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This plug-in demonstrates how to create a user-defined weighted deformer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// with an associated shape. A deformer is a node which takes any number of</span></div>\n\
<div class=\"line\"><span class=\"comment\">// input geometries, deforms them, and places the output into the output</span></div>\n\
<div class=\"line\"><span class=\"comment\">// geometry attribute. This example plug-in defines a new deformer node</span></div>\n\
<div class=\"line\"><span class=\"comment\">// that offsets vertices according to their CV&#39;s weights. The weights are set</span></div>\n\
<div class=\"line\"><span class=\"comment\">// using the set editor or the percent command.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// To use this node: </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - create a plane or some other object</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - type: &quot;deformer -type offset&quot; </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - a locator is created by the command, and you can use this locator</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    to control the direction of the offset. The object&#39;s CV&#39;s will be offset</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    by the value of the weights of the CV&#39;s (the default will be the weight * some constant)</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    in the direction of the y-vector of the locator </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  - you can edit the weights using either the component editor or by using</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    the percent command (eg. percent -v .5 offset1;) </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use this script to create a simple example with the offset node:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  loadPlugin offsetNode;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  polyTorus -r 1 -sr 0.5 -tw 0 -sx 50 -sy 50 -ax 0 1 0 -cuv 1 -ch 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  deformer -type &quot;offset&quot;;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe -v 0 -at rotateZ -t 1 transform1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  setKeyframe -v 180 -at rotateZ -t 60 transform1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  select -cl;</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MStringArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;math.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxDeformerNode.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxLocatorNode.h&gt;</span> </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMatrixData.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnPlugin.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTypeId.h&gt;</span> </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataBlock.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDataHandle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MArrayDataHandle.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagModifier.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxGPUDeformer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGPUDeformerRegistry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MOpenCLInfo.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MViewport2Renderer.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;clew/clew_cl.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>offset : <span class=\"keyword\">public</span> <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html\">MPxDeformerNode</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">                        offset();</div>\n\
<div class=\"line\">                    ~offset() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"keywordtype\">void</span>*       creator();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>     initialize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// deformation function</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#a30d9732c7497ec1c8c7e431eaa5d61b6\">deform</a>(<a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp;      block,</div>\n\
<div class=\"line\">                                       <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html\">MItGeometry</a>&amp;     iter,</div>\n\
<div class=\"line\">                                       <span class=\"keyword\">const</span> <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp;   mat,</div>\n\
<div class=\"line\">                                       <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>     multiIndex) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// when the accessory is deleted, this node will clean itself up</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;            <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#a7abe9ec4327fca72caeea3c8d31299b2\">accessoryAttribute</a>() <span class=\"keyword\">const override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create accessory nodes when the node is created</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a>             <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#ab3cfade1b7f20f2d16fb805eb8126995\">accessoryNodeSetup</a>(<a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a>&amp; cmd) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// local node attributes</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     offsetMatrix;   <span class=\"comment\">// offset center and axis</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span>  <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>     id;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a>     offset::id( 0x8000c );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// local attributes</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>     offset::offsetMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">offset::offset() {}</div>\n\
<div class=\"line\">offset::~offset() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>* offset::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> offset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> offset::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// local attribute initialization</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html\">MFnMatrixAttribute</a>  mAttr;</div>\n\
<div class=\"line\">    offsetMatrix=mAttr.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_matrix_attribute.html#acccc043a2ac80be8fe8e32bcc36b8696\">create</a>( <span class=\"stringliteral\">&quot;locateMatrix&quot;</span>, <span class=\"stringliteral\">&quot;lm&quot;</span>);</div>\n\
<div class=\"line\">        mAttr.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#a8d2be80de133a200a455bf9e2ac1b709\">setStorable</a>(<span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        mAttr.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_attribute.html#ab1986dcbce4e2fd86c5cb0bff5119dc0\">setConnectable</a>(<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//  deformation attributes</span></div>\n\
<div class=\"line\">    addAttribute( offsetMatrix);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    attributeAffects( offset::offsetMatrix, offset::outputGeom );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">offset::deform( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html\">MItGeometry</a>&amp; iter,</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>&amp; <span class=\"comment\">/*m*/</span>,</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> multiIndex)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Method: deform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:   Deform the point with a squash algorithm</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Arguments:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   block      : the datablock of the node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   iter       : an iterator for the geometry to be deformed</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   m          : matrix to transform the point into world space</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   multiIndex : the index of the geometry that we are deforming</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> returnStatus;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Envelope data from the base class.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// The envelope is simply a scale factor.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> envData = block.<a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(envelope, &amp;returnStatus);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kSuccess != returnStatus) <span class=\"keywordflow\">return</span> returnStatus;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> env = envData.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a43df510424a7de372dd130315d9f223c\">asFloat</a>();  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the matrix which is used to define the direction and scale</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of the offset.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> matData = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(offsetMatrix, &amp;returnStatus );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kSuccess != returnStatus) <span class=\"keywordflow\">return</span> returnStatus;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> omat = matData.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aaa25e9866d30fc06edc510817e32a8f2\">asMatrix</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> omatinv = omat.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// iterate through each point in the geometry</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( ; !iter.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#a8b6dbf6fbab6f4e7bf50a309124cbf4c\">isDone</a>(); iter.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#a73616f002814b8abe6d921db72d7a496\">next</a>()) {</div>\n\
<div class=\"line\">        <a name=\"_a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a> pt = iter.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#a5880c110ed81dd4da0289ccdca5c1592\">position</a>();</div>\n\
<div class=\"line\">        pt *= omatinv;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> weight = weightValue(block,multiIndex,iter.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#ae85767d1d26fc7491279d1f2c277b499\">index</a>());</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// offset algorithm</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        pt.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> = pt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a> + env*weight;</div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// end of offset algorithm</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pt *= omat;</div>\n\
<div class=\"line\">        iter.<a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_geometry.html#aab29469f67fee14833472410a17de18f\">setPosition</a>(pt);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> returnStatus;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp;</div>\n\
<div class=\"line\">offset::accessoryAttribute() const</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method returns a the attribute to which an accessory </span></div>\n\
<div class=\"line\"><span class=\"comment\">//    shape is connected. If the accessory shape is deleted, the deformer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    node will automatically be deleted.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//    This method is optional.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> offset::offsetMatrix;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* override */</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a></div>\n\
<div class=\"line\">offset::accessoryNodeSetup(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html\">MDagModifier</a>&amp; cmd)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method is called when the deformer is created by the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      &quot;deformer&quot; command. You can add to the cmds in the MDagModifier</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      cmd in order to hook up any additional nodes that your node needs</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      to operate.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      In this example, we create a locator and attach its matrix attribute</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      to the matrix input on the offset node. The locator is used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      set the direction and scale of the random field.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      This method is optional.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// hook up the accessory node</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> objLoc = cmd.<a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_modifier.html#ae169eb7f1ddc00f53ba69ac2d1815950\">createNode</a>(<a name=\"_a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;locator&quot;</span>),</div>\n\
<div class=\"line\">                                    <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>,</div>\n\
<div class=\"line\">                                    &amp;result);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kSuccess == result) {</div>\n\
<div class=\"line\">        <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnLoc(objLoc);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> attrName;</div>\n\
<div class=\"line\">        attrName.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html#acee761fe098fc30a5ac1437e3aca5bc0\">set</a>(<span class=\"stringliteral\">&quot;matrix&quot;</span>);</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> attrMat = fnLoc.attribute(attrName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        result = cmd.<a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_modifier.html#afbd18f066f70fcd1864ddb4af91f3c7b\">connect</a>(objLoc,attrMat,this-&gt;thisMObject(),offset::offsetMatrix);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// the GPU override implementation of the offsetNode</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>offsetGPUDeformer : <span class=\"keyword\">public</span> <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\">MPxGPUDeformer</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Virtual methods from MPxGPUDeformer</span></div>\n\
<div class=\"line\">    offsetGPUDeformer();</div>\n\
<div class=\"line\">    ~offsetGPUDeformer() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    MPxGPUDeformer::DeformerStatus <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a070259639bc552fd702c9e8e042f0331\">evaluate</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a name=\"_a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; outputPlug, <span class=\"keyword\">const</span> <a name=\"_a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; inputData, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; outputData) <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#a74a45d2648335936561898c390281a6a\">terminate</a>() <span class=\"keyword\">override</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html\">MGPUDeformerRegistrationInfo</a>* getGPUDeformerInfo();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> validateNodeInGraph(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp;, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a name=\"_a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> validateNodeValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp;, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"comment\">// helper methods</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> extractWeightArray(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> extractOffsetMatrix(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Storage for data on the GPU</span></div>\n\
<div class=\"line\">    <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a> fCLWeights;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_mem.html\">MAutoCLMem</a> fOffsetMatrix;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> fNumElements;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Kernel</span></div>\n\
<div class=\"line\">    <a name=\"_a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_kernel.html\">MAutoCLKernel</a> fKernel;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>offsetNodeGPUDeformerInfo : <span class=\"keyword\">public</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html\">MGPUDeformerRegistrationInfo</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    offsetNodeGPUDeformerInfo() {}</div>\n\
<div class=\"line\">    ~offsetNodeGPUDeformerInfo()<span class=\"keyword\"> override</span>{}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html\">MPxGPUDeformer</a>* <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#a69ee4850048ea760d9e03f2deaf957e4\">createGPUDeformer</a>()<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> offsetGPUDeformer();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#af612f89c960cf432dc7be0d3f1be8d93\">validateNodeInGraph</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> offsetGPUDeformer::validateNodeInGraph(block, evaluationNode, plug, messages);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html#a5211d6842c7677f9730a9c76cb258568\">validateNodeValues</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)<span class=\"keyword\"> override</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> offsetGPUDeformer::validateNodeValues(block, evaluationNode, plug, messages);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registration_info.html\">MGPUDeformerRegistrationInfo</a>* offsetGPUDeformer::getGPUDeformerInfo()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> offsetNodeGPUDeformerInfo theOne;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> &amp;theOne;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">offsetGPUDeformer::offsetGPUDeformer()</div>\n\
<div class=\"line\">    : fNumElements(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Remember the ctor must be fast.  No heavy work should be done here.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya may allocate one of these and then never use it.</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">offsetGPUDeformer::~offsetGPUDeformer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    terminate();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> offsetGPUDeformer::validateNodeInGraph(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// offsetGPUDeformer supports everything on the offset node except envelope</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// envelope is handled in validateNodeValues because we support some values</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// but not others.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* static */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> offsetGPUDeformer::validateNodeValues(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string_array.html\">MStringArray</a>* messages)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// As an example offsetGPUDeformer has conditional support for the envelop</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// attribute.  offsetGPUDeformer supports the underlying depend node if</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// envelope is exactly 1.0f.  Otherwise, the underlying node is not supported.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that in additional to testing the value of the envelope attribute here</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we have also registered the envelope attribute as a conditional attribute in</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// offsetNodeGPUDeformerInfo.</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = plug.<a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode(node);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now that I know the envelope value is not changing, check to see if it is 1.0f</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> envelopePlug(node, <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#a7ec5f07562204a9fa9b136a856cb97c4\">MPxDeformerNode::envelope</a>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> envData;</div>\n\
<div class=\"line\">    envelopePlug.getValue(envData);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (envData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a43df510424a7de372dd130315d9f223c\">asFloat</a>() != 1.0f)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a8682346bb79641242ffc37e0b163f136\">MOpenCLInfo::appendMessage</a>(messages, <span class=\"stringliteral\">&quot;Offset %s not supported by deformer evaluator because envelope is not exactly 1.0.&quot;</span>, fnNode.name().asChar());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">MPxGPUDeformer::DeformerStatus offsetGPUDeformer::evaluate( </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block,                          <span class=\"comment\">// data block for &quot;this&quot; node</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode,      <span class=\"comment\">// evaluation node representing &quot;this&quot; node</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,                          <span class=\"comment\">// the multi index we&#39;re working on.  There will be a separate instance created per multi index</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; inputData,          <span class=\"comment\">// the input data provided by Maya or other upstream GPU Deformers</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html\">MGPUDeformerData</a>&amp; outputData                <span class=\"comment\">// the output data to be passed to the rendering system or other downstream GPU Deformers</span></div>\n\
<div class=\"line\">)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a> inputPositions = inputData.<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html#a5ce2553c6e11160092fa5f97721f0262\">getBuffer</a>(MPxGPUDeformer::sPositionsName());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html\">MGPUDeformerBuffer</a> outputPositions = createOutputBuffer(inputPositions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inputPositions.<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#aac1b70a2ed67ead038c4d3f5ac4d8a81\">isValid</a>() || !outputPositions.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_buffer.html#aac1b70a2ed67ead038c4d3f5ac4d8a81\">isValid</a>()) <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// evaluate has two main pieces of work.  I need to transfer any data I care about onto the GPU, and I need to run my OpenCL Kernel.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// First, transfer the data.  offset has two pieces of data I need to transfer to the GPU, the weight array and the offset matrix.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// I don&#39;t need to transfer down the input position buffer, that is already handled by the deformer evaluator, the points are in inputBuffer.</span></div>\n\
<div class=\"line\">    fNumElements = inputPositions.<a name=\"a53\"></a>elementCount();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> node = plug.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ae024049dad815f2f186e6a4fead8be51\">node</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    extractWeightArray(block, evaluationNode, plug);</div>\n\
<div class=\"line\">    extractOffsetMatrix(block, evaluationNode, plug);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Now that all the data we care about is on the GPU, setup and run the OpenCL Kernel</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fKernel.get())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> *maya_location = getenv( <span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> openCLKernelFile(maya_location);</div>\n\
<div class=\"line\">        openCLKernelFile +=<span class=\"stringliteral\">&quot;/../Extra/devkitBase/devkit/plug-ins/offsetNode/offset.cl&quot;</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> openCLKernelName(<span class=\"stringliteral\">&quot;offset&quot;</span>);</div>\n\
<div class=\"line\">        fKernel = <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a9b9a0680620c0ecac7dd1b07159ee72f\">MOpenCLInfo::getOpenCLKernel</a>(openCLKernelFile, openCLKernelName);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!fKernel) <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerFailure;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Set all of our kernel parameters.  Input buffer and output buffer may be changing every frame</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// so always set them.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> parameterId = 0;</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, <span class=\"keyword\">sizeof</span>(cl_mem), (<span class=\"keywordtype\">void</span>*)outputPositions.buffer().getReadOnlyRef());</div>\n\
<div class=\"line\">    <a name=\"_a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)inputPositions.buffer().getReadOnlyRef());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)fCLWeights.getReadOnlyRef());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_mem), (<span class=\"keywordtype\">void</span>*)fOffsetMatrix.getReadOnlyRef());</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\">    err = clSetKernelArg(fKernel.get(), parameterId++, sizeof(cl_uint), (<span class=\"keywordtype\">void</span>*)&amp;fNumElements);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Figure out a good work group size for our kernel.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> workGroupSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> retSize;</div>\n\
<div class=\"line\">    err = clGetKernelWorkGroupInfo(</div>\n\
<div class=\"line\">        fKernel.get(),</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::getOpenCLDeviceId(),</div>\n\
<div class=\"line\">        CL_KERNEL_WORK_GROUP_SIZE,</div>\n\
<div class=\"line\">        sizeof(<span class=\"keywordtype\">size_t</span>),</div>\n\
<div class=\"line\">        &amp;workGroupSize,</div>\n\
<div class=\"line\">        &amp;retSize);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html\">MOpenCLInfo</a>::checkCLErrorStatus(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> localWorkSize = 256;</div>\n\
<div class=\"line\">    if (retSize &gt; 0) localWorkSize = workGroupSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> globalWorkSize = (localWorkSize - fNumElements % localWorkSize) + fNumElements; <span class=\"comment\">// global work size must be a multiple of localWorkSize</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set up our input events.  The input event could be NULL, in that case we need to pass</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// slightly different parameters into clEnqueueNDRangeKernel</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numInputEvents = 0;</div>\n\
<div class=\"line\">    if (inputPositions.bufferReadyEvent().get())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        numInputEvents = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// run the kernel</span></div>\n\
<div class=\"line\">    <a name=\"_a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html\">MAutoCLEvent</a> kernelFinishedEvent;</div>\n\
<div class=\"line\">    err = clEnqueueNDRangeKernel(</div>\n\
<div class=\"line\">        <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a93e129c1488b06f3347eaaad703ffe34\">MOpenCLInfo::getMayaDefaultOpenCLCommandQueue</a>(),</div>\n\
<div class=\"line\">        fKernel.get(),</div>\n\
<div class=\"line\">        1,</div>\n\
<div class=\"line\">        NULL,</div>\n\
<div class=\"line\">        &amp;globalWorkSize,</div>\n\
<div class=\"line\">        &amp;localWorkSize,</div>\n\
<div class=\"line\">        numInputEvents,</div>\n\
<div class=\"line\">        numInputEvents ? inputPositions.<a name=\"a58\"></a>bufferReadyEvent().<a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html#a54368f5ece5ae240f0b56da10231d77d\">getReadOnlyRef</a>() : 0,</div>\n\
<div class=\"line\">        kernelFinishedEvent.<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_auto_c_l_event.html#a5622645d1b16ac4ab77c233dcea5c5be\">getReferenceForAssignment</a>());</div>\n\
<div class=\"line\">    outputPositions.<a name=\"a61\"></a>setBufferReadyEvent(kernelFinishedEvent);</div>\n\
<div class=\"line\">    <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a753d7277906776cd710b3723d74f8b64\">MOpenCLInfo::checkCLErrorStatus</a>(err);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    outputData.<a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_data.html#a9710db42ff7918d4b588b0045fecdcd0\">setBuffer</a>(outputPositions);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> MPxGPUDeformer::kDeformerSuccess;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> offsetGPUDeformer::terminate()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a539094d46be4675c5690419f1c09b38e\">releaseGPUMemory</a>(fNumElements*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">    fCLWeights.reset();</div>\n\
<div class=\"line\">    fOffsetMatrix.reset();</div>\n\
<div class=\"line\">    <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a08df219d94dcf2dc03724eff7d5c6483\">MOpenCLInfo::releaseOpenCLKernel</a>(fKernel);</div>\n\
<div class=\"line\">    fKernel.reset();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> offsetGPUDeformer::extractWeightArray(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// if we&#39;ve already got a weight array and it is not changing then don&#39;t bother copying it</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to the GPU again</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that right now hasAttributeBeenModified takes an attribute, so if any element in the multi is changing we think it is dirty...</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// To avoid false dirty issues here you&#39;d need to only use one element of the MPxDeformerNode::input multi attribute for each</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// offset node.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fCLWeights.get() &amp;&amp; !<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#abb7238dc52214c1b33a9c4000c1f237e\">MPxGPUDeformer::hasAttributeBeenModified</a>(evaluationNode, <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html#a35a26e066faae03152b67f2067b1d53f\">MPxDeformerNode::weightList</a>))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Maya might do some tricky stuff like not store the weight array at all for certain weight</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// values so we can&#39;t count on an array existing in the weightList.  For the OpenCL Kernel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we want an array with one weight in it per vertex, we need to build it carefully here.</span></div>\n\
<div class=\"line\">    std::vector&lt;float&gt; temp;</div>\n\
<div class=\"line\">    temp.reserve(fNumElements);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Two possibilities: we could have a sparse array in weightList[multiIndex] or there could be nothing in weightList[multiIndex].</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// if nothing is there then all the weights at 1.0f.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get a handle to the weight array we want.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> weightList = block.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a11fd41c7d97d656a2bffdc23015f1496\">outputArrayValue</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html#a35a26e066faae03152b67f2067b1d53f\">MPxDeformerNode::weightList</a>, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>; <span class=\"comment\">// we should always be able to get a weightList</span></div>\n\
<div class=\"line\">    status = weightList.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a8d77f0fea87bb6854b60cd199bf26240\">jumpToElement</a>(plug.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#aee365de27bc5ea401941e79738cc4afe\">logicalIndex</a>());</div>\n\
<div class=\"line\">    <span class=\"comment\">// it is possible that the jumpToElement fails.  In that case all weights are 1.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!status)</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;fNumElements; i++)</div>\n\
<div class=\"line\">            temp.push_back(1.0f);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> weightsStructure = weightList.<a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a81d24dca6d647d8d0a8fe0ef2c63b170\">inputValue</a>(&amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html\">MArrayDataHandle</a> weights = weightsStructure.<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a58951af761a410e17982060cae4fdf49\">child</a>(<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_deformer_node.html#ae4200be6c5a30e8d817e6a3b51d20402\">MPxDeformerNode::weights</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// number of non-zero weights</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numWeights = weights.<a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a5f3dd1d27853eccbbe78b6d4383ccb79\">elementCount</a>(&amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// we&#39;re building a list with a weight per vertex, even if the weight is zero</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> weightIndex = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i=0; i&lt;numWeights; i++, weights.<a name=\"a77\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a73616f002814b8abe6d921db72d7a496\">next</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> weightsElementIndex = weights.<a name=\"a78\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a2ca3c3d60cf2f3ac005b651379f26143\">elementIndex</a>(&amp;status);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> (weightIndex &lt; weightsElementIndex)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                temp.push_back(1.0f); <span class=\"comment\">// weights could be sparse, fill in default weight of 1 if no data</span></div>\n\
<div class=\"line\">                weightIndex++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> value = weights.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_array_data_handle.html#a81d24dca6d647d8d0a8fe0ef2c63b170\">inputValue</a>(&amp;status);</div>\n\
<div class=\"line\">            temp.push_back(value.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a43df510424a7de372dd130315d9f223c\">asFloat</a>());</div>\n\
<div class=\"line\">            weightIndex++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// now we have written the last non-zero weight into temp, but the last non-zero weight</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// doesn&#39;t have to be for the last vertex in the buffer.  Add more zero values if necessary.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (weightIndex &lt; fNumElements)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            temp.push_back(1.0f); <span class=\"comment\">// weights could be sparse, fill in default weight of 1 if no data</span></div>\n\
<div class=\"line\">            weightIndex++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Two possibilities, we could be updating an existing OpenCL buffer or allocating a new one.</span></div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fCLWeights.get())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#a4678a72ac6959ed21d422d27928d0343\">MHWRender::MRenderer::theRenderer</a>()-&gt;<a name=\"a79\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_h_w_render_1_1_m_renderer.html#ab4c1def24e934781098b800fd8b16cdd\">holdGPUMemory</a>(fNumElements*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">        fCLWeights.attach(clCreateBuffer(<a name=\"a80\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a2ab4ea6f879cbd19b67ca57cb3474d7b\">MOpenCLInfo::getOpenCLContext</a>(), CL_MEM_COPY_HOST_PTR | CL_MEM_READ_ONLY, fNumElements * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>), (<span class=\"keywordtype\">void</span>*)&amp;temp[0], &amp;err));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// I use a blocking write here, non-blocking could be faster...  need to manage the lifetime of temp, and have the kernel wait until the write finishes before running</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// I&#39;m also assuming that the weight buffer is not growing.</span></div>\n\
<div class=\"line\">        err = clEnqueueWriteBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a93e129c1488b06f3347eaaad703ffe34\">MOpenCLInfo::getMayaDefaultOpenCLCommandQueue</a>(), fCLWeights.get(), CL_TRUE, 0, fNumElements * <span class=\"keyword\">sizeof</span>(float), (<span class=\"keywordtype\">void</span>*)&amp;temp[0], 0, NULL, NULL);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> offsetGPUDeformer::extractOffsetMatrix(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a>&amp; block, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_evaluation_node.html\">MEvaluationNode</a>&amp; evaluationNode, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// I pass the offset matrix to OpenCL using a buffer as well.  I also send down the inverse matrix to avoid calculating it many times on the GPU</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fOffsetMatrix.get() &amp;&amp; !<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_g_p_u_deformer.html#abb7238dc52214c1b33a9c4000c1f237e\">MPxGPUDeformer::hasAttributeBeenModified</a>(evaluationNode, offset::offsetMatrix))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> matData = block.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(offset::offsetMatrix, &amp;status );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (MS::kSuccess != status) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> omat = matData.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#aaa25e9866d30fc06edc510817e32a8f2\">asMatrix</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> omatinv = omat.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a8ca5ebc404566e2c4a16d4754772e082\">inverse</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Convert the matrix from Maya format to the format the OpenCL kernel expects</span></div>\n\
<div class=\"line\">    omat = omat.<a name=\"a81\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a6fadbac6023eb9d361176a87b73063dc\">transpose</a>();</div>\n\
<div class=\"line\">    omatinv = omatinv.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a6fadbac6023eb9d361176a87b73063dc\">transpose</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// MMatrix stores double values, but I want floating point values on the GPU so convert them here.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numFloat = 32;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* temp = <span class=\"keyword\">new</span> <span class=\"keywordtype\">float</span>[numFloat];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> curr = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> row = 0; row&lt;4; row++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> column = 0; column&lt;4; column++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            temp[curr++] = (float)omat(row, column);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> row = 0; row&lt;4; row++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> column = 0; column&lt;4; column++)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            temp[curr++] = (float)omatinv(row, column);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Two possibilities, we could be updating an existing OpenCL buffer or allocating a new one.</span></div>\n\
<div class=\"line\">    cl_int err = CL_SUCCESS;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fOffsetMatrix.get())</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        fOffsetMatrix.attach(clCreateBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a2ab4ea6f879cbd19b67ca57cb3474d7b\">MOpenCLInfo::getOpenCLContext</a>(), CL_MEM_COPY_HOST_PTR | CL_MEM_READ_ONLY, numFloat * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>), (<span class=\"keywordtype\">void</span>*) temp, &amp;err));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// I use a blocking write here, non-blocking could be faster...  need to manage the lifetime of temp, and have the kernel wait until the write finishes before running</span></div>\n\
<div class=\"line\">        err = clEnqueueWriteBuffer(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_open_c_l_info.html#a93e129c1488b06f3347eaaad703ffe34\">MOpenCLInfo::getMayaDefaultOpenCLCommandQueue</a>(), fOffsetMatrix.get(), CL_TRUE, 0, numFloat * <span class=\"keyword\">sizeof</span>(float), (<span class=\"keywordtype\">void</span>*)temp, 0, NULL, NULL);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    delete [] temp;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// standard initialization procedures</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> initializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\">    <a name=\"_a82\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj, PLUGIN_COMPANY, <span class=\"stringliteral\">&quot;3.0&quot;</span>, <span class=\"stringliteral\">&quot;Any&quot;</span>);</div>\n\
<div class=\"line\">    result = plugin.registerNode( <span class=\"stringliteral\">&quot;offset&quot;</span>, offset::id, offset::creator, </div>\n\
<div class=\"line\">                                  offset::initialize, <a name=\"a83\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_node.html#a1d1cfd8ffb84e947f82999c682b666a7a397b2fe312ffa55c207f8f9b12f616d3\">MPxNode::kDeformerNode</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeClassName(<span class=\"stringliteral\">&quot;offset&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> registrantId(<span class=\"stringliteral\">&quot;mayaPluginExample&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"a84\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html#adea377dddd00bec03a6cdf70360f567f\">MGPUDeformerRegistry::registerGPUDeformerCreator</a>(</div>\n\
<div class=\"line\">        nodeClassName,</div>\n\
<div class=\"line\">        registrantId,</div>\n\
<div class=\"line\">        offsetGPUDeformer::getGPUDeformerInfo());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a85\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html#a2e96bdde07077e4af65457c6edb9c11a\">MGPUDeformerRegistry::addConditionalAttribute</a>(</div>\n\
<div class=\"line\">            nodeClassName,</div>\n\
<div class=\"line\">            registrantId,</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_geometry_filter.html#a7ec5f07562204a9fa9b136a856cb97c4\">MPxDeformerNode::envelope</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> uninitializePlugin( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> obj)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> result;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_plugin.html\">MFnPlugin</a> plugin( obj );</div>\n\
<div class=\"line\">    result = plugin.deregisterNode( offset::id );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> nodeClassName(<span class=\"stringliteral\">&quot;offset&quot;</span>);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> registrantId(<span class=\"stringliteral\">&quot;mayaPluginExample&quot;</span>);</div>\n\
<div class=\"line\">    <a name=\"a86\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_g_p_u_deformer_registry.html#aa290ea8dc9cb67e1056f132b8e441d5f\">MGPUDeformerRegistry::deregisterGPUDeformerCreator</a>(</div>\n\
<div class=\"line\">        nodeClassName,</div>\n\
<div class=\"line\">        registrantId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";