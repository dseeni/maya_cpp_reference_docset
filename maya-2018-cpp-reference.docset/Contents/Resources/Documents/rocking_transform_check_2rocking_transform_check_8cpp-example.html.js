var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2017-06-22\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>rockingTransformCheck/rockingTransformCheck.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'rocking_transform_check_2rocking_transform_check_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>rockingTransformCheck/rockingTransformCheck.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">rockingTransformCheck/rockingTransformCheck.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 1995,2006,2008 Autodesk, Inc. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Example custom transform:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This plug-in implements an example custom transform that</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  can be used to perform a rocking motion around the X axis.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The checkAndSetRotation() method is implemented in order to apply </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  locks and rotation limits to user input. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Geometry of any rotation can be made a child of this transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  to demonstrate the effect.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The plug-in contains two pieces:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  1. The custom transform node -- rockingTransformCheckNode</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  2. The custom transformation matrix -- rockingTransformCheckMatrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  These classes are used together in order to implement the</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rocking motion.  Note that the rock attribute is stored outside</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  of the regular transform attributes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// MEL usage:</span></div>\n\
<div class=\"line\"><span class=\"comment\">/*</span></div>\n\
<div class=\"line\"><span class=\"comment\">    // Create a rocking transform and make a rotated plane</span></div>\n\
<div class=\"line\"><span class=\"comment\">    // its child.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    loadPlugin rockingTransformCheck;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    file -f -new;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    polyPlane -w 1 -h 1 -sx 10 -sy 10 -ax 0 1 0 -cuv 2 -ch 1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    select -r pPlane1 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    rotate -r -ws -15 -15 -15 ;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    createNode rockingTransformCheck;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    parent pPlane1 rockingTransformCheck1;</span></div>\n\
<div class=\"line\"><span class=\"comment\">    setAttr rockingTransformCheck1.rockx 10;</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// NOTE: Classes used in this example derive from classes defined in the rockingTransform example. </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransform.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericAttribute.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MTransformationMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDependencyNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MIOStream.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;rockingTransformCheck.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Initialize our static class variables</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> rockingTransformCheckNode::idCheck(kRockingTransformCheckNodeID);</div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_type_id.html\">MTypeId</a> rockingTransformCheckMatrix::idCheck(kRockingTransformCheckMatrixID);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of our custom transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor for matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckMatrix::rockingTransformCheckMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Creator for matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *rockingTransformCheckMatrix::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformCheckMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of our custom transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor of the transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckNode::rockingTransformCheckNode()</div>\n\
<div class=\"line\">:   ParentClass()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Constructor of the transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckNode::rockingTransformCheckNode(<a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *tm)</div>\n\
<div class=\"line\">:   ParentClass(tm)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Destructor of the rocking transform</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckNode::~rockingTransformCheckNode()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method that returns the new transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *rockingTransformCheckNode::createTransformationMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformCheckMatrix();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method that returns a new transform node</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *rockingTransformCheckNode::creator()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> rockingTransformCheckNode();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Debugging method</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* rockingTransformCheckNode::className() </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;rockingTransformCheckNode&quot;</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method allows the custom transform to apply its own locking</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  mechanism to rotation. Standard dependency graph attribute locking</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  happens automatically and cannot be modified by custom nodes.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  If the plug should not be changed, then the value from the passed savedR</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  argument should be return to be used in the transformation matrix.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a name=\"_a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> rockingTransformCheckNode::applyRotationLocks(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> &amp;toTest,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> &amp;savedRotation,</div>\n\
<div class=\"line\">                                    <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> *ReturnStatus )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef ALLOW_DG_TO_HANDLE_LOCKS</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Allow the DG to handle locking.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> toTest;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Implement a simple lock by checking for an existing attribute</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Use the following MEL to add the attribute:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  addAttr -ln &quot;rotateLockPlug&quot;</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">    <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> <span class=\"keywordtype\">object</span> = thisMObject();</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> depNode( <span class=\"keywordtype\">object</span> );</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> rotateLockPlug = depNode.findPlug( <span class=\"stringliteral\">&quot;rotateLockPlug&quot;</span>, &amp;status );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the lock does not exist that we return the updated value that has</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// been passed in</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( rotateLockPlug.<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#ac02f2a4d7312eb91f40980adfd4e31b2\">isNull</a>() )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> toTest;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// We have a lock.  Returned the original saved value of the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// rotation.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> savedRotation;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> rockingTransformCheckNode::applyRotationLimits(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> &amp;unlimitedRotation,</div>\n\
<div class=\"line\">                                      <a name=\"_a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp; <span class=\"comment\">/*block*/</span>,</div>\n\
<div class=\"line\">                                      <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> *ReturnStatus )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef CHECK_ROTATION_LIMITS_USING_ATTRIBUTES</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// A more complete plug-in would take this approach</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> newRotation = unlimitedRotation;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    updateMatrixAttrs(minRotLimitEnable);</div>\n\
<div class=\"line\">    updateMatrixAttrs(maxRotLimitEnable);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    double3 &amp;minLimit = block.inputValue(minRotLimit).asDouble3();</div>\n\
<div class=\"line\">    double3 &amp;maxLimit = block.inputValue(maxRotLimit).asDouble3();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> ii = 0, jj = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (jj = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a510adc09dd64e1f0caf1d0fff0038c08acaf7e241232e1852c1553d0dbe01cc24\">MFnTransform::kRotateMinX</a>, ii = 0; ii &lt; 3; ++ii, ++jj) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isLimited((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a510adc09dd64e1f0caf1d0fff0038c08\">MFnTransform::LimitType</a>)jj) &amp;&amp; </div>\n\
<div class=\"line\">            newRotation[ii] &lt; minLimit[ii]) {</div>\n\
<div class=\"line\">            newRotation[ii] = minLimit[ii];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isLimited((<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_transform.html#a510adc09dd64e1f0caf1d0fff0038c08\">MFnTransform::LimitType</a>)(++jj)) &amp;&amp;</div>\n\
<div class=\"line\">            newRotation[ii] &gt; maxLimit[ii]) {</div>\n\
<div class=\"line\">            newRotation[ii] = maxLimit[ii];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ReturnStatus )</div>\n\
<div class=\"line\">        *ReturnStatus = MS::kSuccess;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> newRotation;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// For demonstration purposes we limit the rotation to 60</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// degrees and bypass the rotation limit attributes</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    DegreeRadianConverter conv;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> degrees = conv.radiansToDegrees( unlimitedRotation.<a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( degrees &lt; 60 )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> unlimitedRotation;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> euler;</div>\n\
<div class=\"line\">    euler.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a> = conv.degreesToRadians( 60.0 );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ReturnStatus )</div>\n\
<div class=\"line\">        *ReturnStatus = MS::kSuccess;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> euler;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Calls applyRotationLocks &amp;&amp; applyRotationLimits</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  This method verifies that the passed value can be set on the </span></div>\n\
<div class=\"line\"><span class=\"comment\">//  rotate plugs. In the base class, limits as well as locking are</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  checked by this method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  The compute, validateAndSetValue, and rotateTo functions</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  all use this method.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> rockingTransformCheckNode::checkAndSetRotation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html\">MDataBlock</a> &amp;block,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a>&amp; plug,</div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a>&amp; newRotation, </div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8\">MSpace::Space</a> space )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    updateMatrixAttrs();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = MS::kSuccess;</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> outRotation = newRotation;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_d_g_context.html#a11a98edcfc027fb57d3a66fcfbc580a8\">MDGContext::current</a>().isNormal()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  For easy reading.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *xformMat = baseTransformationMatrix;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Get the current translation in transform space for </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  clamping and locking.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> savedRotation = </div>\n\
<div class=\"line\">            xformMat-&gt;<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a41ab28bacc442c0e160c0e3c4a8cd662\">eulerRotation</a>(<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>, &amp;status);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Translate to transform space, since the limit test needs the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  values in transform space. The locking test needs the values</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  in the same space as the savedR value - which is transform </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  space as well.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = baseTransformationMatrix-&gt;rotateTo(newRotation, space);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        outRotation = xformMat-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a41ab28bacc442c0e160c0e3c4a8cd662\">eulerRotation</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>, &amp;status);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Now that everything is in the same space, apply limits </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  and change the value to adhere to plug locking.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        outRotation = applyRotationLimits(outRotation, block, &amp;status);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        outRotation = applyRotationLocks(outRotation, savedRotation, &amp;status);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  The value that remain is in transform space.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = xformMat-&gt;<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a4c85ef9e8b2295fdedcd577f72823ea4\">rotateTo</a>(outRotation, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Get the value that was just set. It needs to be in transform</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  space since it is used to set the datablock values at the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  end of this method. Getting the vaolue right before setting</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  ensures that the transformation matrix and data block will</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  be synchronized.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        outRotation = xformMat-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a41ab28bacc442c0e160c0e3c4a8cd662\">eulerRotation</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>, &amp;status);</div>\n\
<div class=\"line\">        ReturnOnError(status);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">//  Get the rotation for clamping and locking. This will get the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  rotate value in transform space.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        double3 &amp;s3 = block.<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#af4a356799acd4ed070d372ed7cfb4706\">inputValue</a>(rotate).<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a077d60a4a74d54e7a892d3c6ed115cc1\">asDouble3</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html\">MEulerRotation</a> savedRotation(s3[0], s3[1], s3[2]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Create a local transformation matrix for non-normal context</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  calculations.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html\">MPxTransformationMatrix</a> *local = createTransformationMatrix();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (NULL == local) {</div>\n\
<div class=\"line\">            <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;rockingTransformCheck::checkAndSetRotation internal error&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Fill the newly created transformation matrix.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = computeLocalTransformation(local, block);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Translate the values to transform space. This will allow the </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  limit and locking tests to work properly.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        status = local-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a4c85ef9e8b2295fdedcd577f72823ea4\">rotateTo</a>(newRotation, space);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        outRotation = local-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a41ab28bacc442c0e160c0e3c4a8cd662\">eulerRotation</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Apply limits</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        outRotation = applyRotationLimits(outRotation, block, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        outRotation = applyRotationLocks(outRotation, savedRotation, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        status = local-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a4c85ef9e8b2295fdedcd577f72823ea4\">rotateTo</a>(outRotation, <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//  Get the rotate value in transform space for placement in the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//  datablock.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        outRotation = local-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_transformation_matrix.html#a41ab28bacc442c0e160c0e3c4a8cd662\">eulerRotation</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_space.html#ab11a1dda34491acff014ddfc9e6bafb8adafa274206df602835f0f22ae887e126\">MSpace::kTransform</a>, &amp;status);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">delete</span> local;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html\">MDataHandle</a> handle = block.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_block.html#a5e4082d6ab961bee4ec0281676bb4834\">outputValue</a>(plug, &amp;status);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( MS::kSuccess != status)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (plug == rotate) {</div>\n\
<div class=\"line\">        handle.<a name=\"a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(outRotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, outRotation.<a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#ab927965981178aa1fba979a37168db2a\">y</a>, outRotation.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == rotateX) {</div>\n\
<div class=\"line\">        handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(outRotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (plug == rotateY) {</div>\n\
<div class=\"line\">        handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(outRotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#ab927965981178aa1fba979a37168db2a\">y</a>);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        handle.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_data_handle.html#a2a75482f517f405a641c0eee0bd995ac\">set</a>(outRotation.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_euler_rotation.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">                                            </div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Method for returning the current rocking transformation matrix</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">rockingTransformCheckMatrix *rockingTransformCheckNode::getRockingTransformCheckMatrix()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    rockingTransformCheckMatrix *ltm = (rockingTransformCheckMatrix *) baseTransformationMatrix;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ltm;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";