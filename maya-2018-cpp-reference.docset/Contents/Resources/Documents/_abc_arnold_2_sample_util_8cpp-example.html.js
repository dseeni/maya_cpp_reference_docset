var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2017-06-22\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>AbcArnold/SampleUtil.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_abc_arnold_2_sample_util_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>AbcArnold/SampleUtil.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">AbcArnold/SampleUtil.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2009-2011,</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Sony Pictures Imageworks Inc. and</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Industrial Light &amp; Magic, a division of Lucasfilm Entertainment Company Ltd.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">// modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">// met:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">// notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Redistributions in binary form must reproduce the above</span></div>\n\
<div class=\"line\"><span class=\"comment\">// copyright notice, this list of conditions and the following disclaimer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// in the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">// distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// *       Neither the name of Sony Pictures Imageworks, nor</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Industrial Light &amp; Magic, nor the names of their contributors may be used</span></div>\n\
<div class=\"line\"><span class=\"comment\">// to endorse or promote products derived from this software without specific</span></div>\n\
<div class=\"line\"><span class=\"comment\">// prior written permission.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>\n\
<div class=\"line\"><span class=\"comment\">// &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>\n\
<div class=\"line\"><span class=\"comment\">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;SampleUtil.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ImathMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ImathMatrixAlgo.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ImathQuat.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ImathEuler.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> GetRelevantSampleTimes( ProcArgs &amp;args, TimeSamplingPtr timeSampling,</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">size_t</span> numSamples, SampleTimeSet &amp;output,</div>\n\
<div class=\"line\">                            MatrixSampleMap * inheritedSamples)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( numSamples &lt; 2 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        output.insert( 0.0 );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    chrono_t frameTime = args.frame / args.fps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    chrono_t shutterOpenTime = ( args.frame + args.shutterOpen ) / args.fps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    chrono_t shutterCloseTime = ( args.frame + args.shutterClose ) / args.fps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// For interpolating and concatenating samples, we need to consider</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// possible inherited sample times outside of our natural shutter range</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (inheritedSamples &amp;&amp; inheritedSamples-&gt;size() &gt; 1)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        shutterOpenTime = std::min(shutterOpenTime,</div>\n\
<div class=\"line\">                inheritedSamples-&gt;begin()-&gt;first);</div>\n\
<div class=\"line\">        shutterCloseTime = std::max(shutterCloseTime,</div>\n\
<div class=\"line\">                inheritedSamples-&gt;rbegin()-&gt;first);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::pair&lt;index_t, chrono_t&gt; shutterOpenFloor =</div>\n\
<div class=\"line\">        timeSampling-&gt;getFloorIndex( shutterOpenTime, numSamples );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    std::pair&lt;index_t, chrono_t&gt; shutterCloseCeil =</div>\n\
<div class=\"line\">        timeSampling-&gt;getCeilIndex( shutterCloseTime, numSamples );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//TODO, what&#39;s a reasonable episilon?</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> chrono_t epsilon = 1.0 / 10000.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//check to see if our second sample is really the</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//floor that we want due to floating point slop</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//first make sure that we have at least two samples to work with</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( shutterOpenFloor.first &lt; shutterCloseCeil.first )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">//if our open sample is less than open time,</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//look at the next index time</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( shutterOpenFloor.second &lt; shutterOpenTime )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            chrono_t nextSampleTime =</div>\n\
<div class=\"line\">                     timeSampling-&gt;getSampleTime( shutterOpenFloor.first + 1 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( fabs( nextSampleTime - shutterOpenTime ) &lt; epsilon )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                shutterOpenFloor.first += 1;</div>\n\
<div class=\"line\">                shutterOpenFloor.second = nextSampleTime;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( index_t i = shutterOpenFloor.first; i &lt; shutterCloseCeil.first; ++i )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        output.insert( timeSampling-&gt;getSampleTime( i ) );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//no samples above? put frame time in there and get out</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( output.size() == 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        output.insert( frameTime );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    chrono_t lastSample = *(output.rbegin() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//determine whether we need the extra sample at the end</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( ( fabs( lastSample - shutterCloseTime ) &gt; epsilon )</div>\n\
<div class=\"line\">         &amp;&amp; lastSample &lt; shutterCloseTime )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        output.insert( shutterCloseCeil.second );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> DecomposeXForm(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Imath::M44d &amp;mat,</div>\n\
<div class=\"line\">            Imath::V3d &amp;scale,</div>\n\
<div class=\"line\">            Imath::V3d &amp;shear,</div>\n\
<div class=\"line\">            Imath::Quatd &amp;rotation,</div>\n\
<div class=\"line\">            Imath::V3d &amp;translation</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Imath::M44d mat_remainder(mat);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Extract Scale, Shear</span></div>\n\
<div class=\"line\">        Imath::extractAndRemoveScalingAndShear(mat_remainder, scale, shear);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Extract translation</span></div>\n\
<div class=\"line\">        translation.x = mat_remainder[3][0];</div>\n\
<div class=\"line\">        translation.y = mat_remainder[3][1];</div>\n\
<div class=\"line\">        translation.z = mat_remainder[3][2];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Extract rotation</span></div>\n\
<div class=\"line\">        rotation = extractQuat(mat_remainder);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    M44d RecomposeXForm(</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Imath::V3d &amp;scale,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Imath::V3d &amp;shear,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Imath::Quatd &amp;rotation,</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Imath::V3d &amp;translation</div>\n\
<div class=\"line\">    )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Imath::M44d scale_mtx, shear_mtx, rotation_mtx, translation_mtx;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        scale_mtx.setScale(scale);</div>\n\
<div class=\"line\">        shear_mtx.setShear(shear);</div>\n\
<div class=\"line\">        rotation_mtx = rotation.toMatrix44();</div>\n\
<div class=\"line\">        translation_mtx.setTranslation(translation);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> scale_mtx * shear_mtx * rotation_mtx * translation_mtx;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// when amt is 0, a is returned</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> lerp(<span class=\"keywordtype\">double</span> a, <span class=\"keywordtype\">double</span> b, <span class=\"keywordtype\">double</span> amt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> (a + (b-a)*amt);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Imath::V3d lerp(<span class=\"keyword\">const</span> Imath::V3d &amp;a, <span class=\"keyword\">const</span> Imath::V3d &amp;b, <span class=\"keywordtype\">double</span> amt)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> Imath::V3d(lerp(a[0], b[0], amt),</div>\n\
<div class=\"line\">                          lerp(a[1], b[1], amt),</div>\n\
<div class=\"line\">                          lerp(a[2], b[2], amt));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    M44d GetNaturalOrInterpolatedSampleForTime(<span class=\"keyword\">const</span> MatrixSampleMap &amp; samples,</div>\n\
<div class=\"line\">            Abc::chrono_t sampleTime)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        MatrixSampleMap::const_iterator I = samples.find(sampleTime);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (I != samples.end())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> (*I).second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (samples.empty())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> M44d();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (samples.size() == 1)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> samples.begin()-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sampleTime &lt;= samples.begin()-&gt;first)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> samples.begin()-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (sampleTime &gt;= samples.rbegin()-&gt;first)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> samples.rbegin()-&gt;second;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">//find the floor and ceiling samples and interpolate</span></div>\n\
<div class=\"line\">        Abc::chrono_t lTime = samples.begin()-&gt;first;</div>\n\
<div class=\"line\">        Abc::chrono_t rTime = samples.rbegin()-&gt;first;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (MatrixSampleMap::const_iterator I = samples.begin();</div>\n\
<div class=\"line\">                I != samples.end(); ++I)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            Abc::chrono_t testSampleTime= (*I).first;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (testSampleTime &gt; lTime &amp;&amp; testSampleTime &lt;= sampleTime)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                lTime = testSampleTime;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (testSampleTime &gt; rTime &amp;&amp; testSampleTime &gt;= sampleTime)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                rTime = testSampleTime;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        M44d mtx_l;</div>\n\
<div class=\"line\">        M44d mtx_r;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            MatrixSampleMap::const_iterator I;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            I = samples.find(lTime);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (I != samples.end())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mtx_l = (*I).second;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            I = samples.find(rTime);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (I != samples.end())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                mtx_r = (*I).second;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Imath::V3d s_l,s_r,h_l,h_r,t_l,t_r;</div>\n\
<div class=\"line\">        Imath::Quatd quat_l,quat_r;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        DecomposeXForm(mtx_l, s_l, h_l, quat_l, t_l);</div>\n\
<div class=\"line\">        DecomposeXForm(mtx_r, s_r, h_r, quat_r, t_r);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Abc::chrono_t amt = (sampleTime-lTime) / (rTime-lTime);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((quat_l ^ quat_r) &lt; 0)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            quat_r = -quat_r;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> RecomposeXForm(lerp(s_l, s_r, amt),</div>\n\
<div class=\"line\">                                 lerp(h_l, h_r, amt),</div>\n\
<div class=\"line\">                                 Imath::slerp(quat_l, quat_r, amt),</div>\n\
<div class=\"line\">                                 lerp(t_l, t_r, amt));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> ConcatenateXformSamples( ProcArgs &amp;args,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MatrixSampleMap &amp; parentSamples,</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> MatrixSampleMap &amp; localSamples,</div>\n\
<div class=\"line\">        MatrixSampleMap &amp; outputSamples)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    SampleTimeSet unionOfSampleTimes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (MatrixSampleMap::const_iterator I = parentSamples.begin();</div>\n\
<div class=\"line\">            I != parentSamples.end(); ++I)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        unionOfSampleTimes.insert((*I).first);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (MatrixSampleMap::const_iterator I = localSamples.begin();</div>\n\
<div class=\"line\">            I != localSamples.end(); ++I)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        unionOfSampleTimes.insert((*I).first);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (SampleTimeSet::iterator I = unionOfSampleTimes.begin();</div>\n\
<div class=\"line\">            I != unionOfSampleTimes.end(); ++I)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        M44d parentMtx = GetNaturalOrInterpolatedSampleForTime(parentSamples,</div>\n\
<div class=\"line\">                (*I));</div>\n\
<div class=\"line\">        M44d localMtx = GetNaturalOrInterpolatedSampleForTime(localSamples,</div>\n\
<div class=\"line\">                (*I));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        outputSamples[(*I)] = localMtx * parentMtx;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//-*****************************************************************************</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Abc::chrono_t GetRelativeSampleTime( ProcArgs &amp;args, Abc::chrono_t sampleTime)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> chrono_t epsilon = 1.0 / 10000.0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    chrono_t frameTime = args.frame / args.fps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Abc::chrono_t result = ( sampleTime - frameTime ) * args.fps;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    if ( fabs( result ) &lt; epsilon )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        result = 0.0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";