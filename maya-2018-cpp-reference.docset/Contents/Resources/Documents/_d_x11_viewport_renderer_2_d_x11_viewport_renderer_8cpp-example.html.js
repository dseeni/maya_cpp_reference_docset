var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MAYAUL\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"Developer\"><meta name=\"created\" content=\"2017-06-22\"><meta name=\"topicid\" content=\"GUID-02DEF634-1E7B-48C6-8ACD-2C934CA97887\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>DX11ViewportRenderer/DX11ViewportRenderer.cpp</title>\n\
   \n\
\n\
<meta name=\"topic-subtype\" content=\"C++\"></head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_d_x11_viewport_renderer_2_d_x11_viewport_renderer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>DX11ViewportRenderer/DX11ViewportRenderer.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">DX11ViewportRenderer/DX11ViewportRenderer.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//-</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright 2015 Autodesk, Inc.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk</span></div>\n\
<div class=\"line\"><span class=\"comment\">// license agreement provided at the time of installation or download,</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or which otherwise accompanies this software in either electronic</span></div>\n\
<div class=\"line\"><span class=\"comment\">// or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// ==========================================================================</span></div>\n\
<div class=\"line\"><span class=\"comment\">//+</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if _MSC_VER &gt;= 1700</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#pragma warning( disable: 4005 )</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;DX11ViewportRenderer.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGlobal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MString.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderingInfo.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderTarget.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnCamera.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MAngle.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPoint.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MVector.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDag.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDagPath.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnDagNode.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnMesh.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItMeshPolygon.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MBoundingBox.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MImage.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MDrawTraversal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGeometryManager.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGeometry.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGeometryData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MGeometryPrimitive.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MNodeMessage.h&gt;</span> <span class=\"comment\">// For monitor geometry list</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlug.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPlugArray.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSet.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnNumericData.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MItDependencyGraph.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MMatrix.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnLight.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MFnSpotLight.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MPxHardwareShader.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;maya/MRenderProfile.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;windows.h&gt;</span>    <span class=\"comment\">// DX11</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Screen space quad vertex</span></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>ScreenSpaceVertex</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    XMVECTOR position; <span class=\"comment\">// position</span></div>\n\
<div class=\"line\">    XMFLOAT2A texCoord; <span class=\"comment\">// texture coordinate</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Class : DX11ViewportRenderer</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Very simple renderer using D3D to render to an offscreen render target.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The contents are read back into system memory to blit into an OpenGL context.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This example has been test compiled against the both the Feb. and April 2006 </span></div>\n\
<div class=\"line\"><span class=\"comment\">// DirectX developer SDKs. Define the DX11_SUPPORTED preprocessor directive </span></div>\n\
<div class=\"line\"><span class=\"comment\">// to compile D3D code in.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// These code items are work in progress:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - camera is fixed to be perspective. No orthographic cameras yet.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - offscreen surface is fixed in size.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - surfaces can either be fixed RGBA8888 or floating point 16. Final output</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   is always fixed, though post-process tone-mapping can be applied before</span></div>\n\
<div class=\"line\"><span class=\"comment\">//   final output.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - does not handle loss of device.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - readback is for color only, no depth readback currently.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - basic Maya material support in a fixed-function pipeline.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// - geometry support for polys for shaded with file texture on color channel.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">DX11ViewportRenderer::DX11ViewportRenderer()</div>\n\
<div class=\"line\">:   <a name=\"_a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html\">MViewportRenderer</a>(<span class=\"stringliteral\">&quot;DX11ViewportRenderer&quot;</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the ui name</span></div>\n\
<div class=\"line\">    fUIName.set( <span class=\"stringliteral\">&quot;DX11 Renderer&quot;</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This renderer overrides all drawing but allows the HUD to be drawn on top</span></div>\n\
<div class=\"line\">    fRenderingOverride = <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a21e72c75b59deb20f71d38a11967cfa7a5516f2e50ee059ec0b4186720e7a6d37\">MViewportRenderer::kOverrideThenStandard</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set API and version number</span></div>\n\
<div class=\"line\">    m_API = <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a5cc2993db47042d12f73f656e0fa1435a5ff3679a551a12c7374cd6b9ee8c9e21\">MViewportRenderer::kDirect3D</a>;</div>\n\
<div class=\"line\">    m_Version = 11.0f;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Default to something reasonable.</span></div>\n\
<div class=\"line\">    m_renderWidth = 640;</div>\n\
<div class=\"line\">    m_renderHeight = 480;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\">    m_hWnd = 0;</div>\n\
<div class=\"line\">    m_pD3DDevice = 0;</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pNormalRS = 0;</div>\n\
<div class=\"line\">    m_pWireframeRS = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pTextureOutput = 0;</div>\n\
<div class=\"line\">    m_pTextureOutputView = 0;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    m_readBackBuffer.create(m_renderWidth, m_renderHeight, 4<span class=\"comment\">/* MPixelType type = kByte */</span>);</div>\n\
<div class=\"line\">    m_readBackBuffer.setRGBA( <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pBoundsVertexBuffer = 0;</div>\n\
<div class=\"line\">    m_pBoundsIndexBuffer = 0;</div>\n\
<div class=\"line\">    m_pBoundsConstantBuffer = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pFixedFunctionConstantBuffer = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_wantFloatingPointTargets = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    m_pTextureInterm = 0;</div>\n\
<div class=\"line\">    m_pTextureIntermView = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pDepthStencil = 0;</div>\n\
<div class=\"line\">    m_pDepthStencilView = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pTextureReadBack = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_requireDepthStencilReadback = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\">DX11ViewportRenderer::~DX11ViewportRenderer()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    uninitialize();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>    DX11ViewportRenderer::overrideThenStandardExclusion()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// exclude everything apart from manipulators</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ~(<span class=\"keywordtype\">unsigned</span> int)kExcludeManipulators;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Dummy window proc.</span></div>\n\
<div class=\"line\">LRESULT CALLBACK D3DWindowProc( HWND   hWnd, </div>\n\
<div class=\"line\">                             UINT   msg, </div>\n\
<div class=\"line\">                             WPARAM wParam, </div>\n\
<div class=\"line\">                             LPARAM lParam )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>( msg )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> WM_CLOSE:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//PostQuitMessage(0);   -- can&#39;t allow this. Will kill Maya</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> WM_DESTROY:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">//PostQuitMessage(0);   -- can&#39;t allow this. Will kill Maya</span></div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> DefWindowProc( hWnd, msg, wParam, lParam );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">DX11ViewportRenderer::buildRenderTargets(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> width, <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> height)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    HRESULT hr = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Nothing to do, just return</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (width == m_renderWidth &amp;&amp;</div>\n\
<div class=\"line\">        height == m_renderHeight &amp;&amp;</div>\n\
<div class=\"line\">        m_pTextureInterm &amp;&amp; </div>\n\
<div class=\"line\">        m_pTextureOutput)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set the new width and height</span></div>\n\
<div class=\"line\">    m_renderWidth = width;</div>\n\
<div class=\"line\">    m_renderHeight = height;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//printf(&quot;New size = %d,%d\\n&quot;, m_renderWidth, m_renderHeight);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create target for intermediate rendering</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pTextureInterm)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureInterm-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureInterm = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pTextureIntermView)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureIntermView-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureIntermView = NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_pTextureInterm)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3D11_TEXTURE2D_DESC td;</div>\n\
<div class=\"line\">        ZeroMemory( &amp;td, <span class=\"keyword\">sizeof</span> td );</div>\n\
<div class=\"line\">        td.Width = m_renderWidth;</div>\n\
<div class=\"line\">        td.Height = m_renderHeight;</div>\n\
<div class=\"line\">        td.MipLevels = 1;</div>\n\
<div class=\"line\">        td.ArraySize = 1;</div>\n\
<div class=\"line\">        td.Format = m_intermediateTargetFormat; <span class=\"comment\">/* Use intermediate target format */</span></div>\n\
<div class=\"line\">        td.SampleDesc.Count = 1;</div>\n\
<div class=\"line\">        td.SampleDesc.Quality = 0;</div>\n\
<div class=\"line\">        td.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">        td.BindFlags = D3D11_BIND_RENDER_TARGET;</div>\n\
<div class=\"line\">        td.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">        td.MiscFlags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateTexture2D( &amp;td, NULL, &amp;m_pTextureInterm );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Failed to get target with desired intermediate format. Try for</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// fixed as a default</span></div>\n\
<div class=\"line\">        m_intermediateTargetFormat = m_outputTargetFormat;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            td.Format = m_intermediateTargetFormat; <span class=\"comment\">/* Use output target format */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            hr = m_pD3DDevice-&gt;CreateTexture2D( &amp;td, NULL, &amp;m_pTextureInterm );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to create intermediate texture for offscreen render target.&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pTextureInterm)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateRenderTargetView( m_pTextureInterm, NULL, &amp;m_pTextureIntermView );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to get view for off-screen render target.&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create depth buffer</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pDepthStencil )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pDepthStencil-&gt;Release();</div>\n\
<div class=\"line\">        m_pDepthStencil = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pDepthStencilView )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pDepthStencilView-&gt;Release();</div>\n\
<div class=\"line\">        m_pDepthStencilView = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !m_pDepthStencil )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3D11_TEXTURE2D_DESC td;</div>\n\
<div class=\"line\">        ZeroMemory( &amp;td, <span class=\"keyword\">sizeof</span> td );</div>\n\
<div class=\"line\">        td.Width = m_renderWidth;</div>\n\
<div class=\"line\">        td.Height = m_renderHeight;</div>\n\
<div class=\"line\">        td.MipLevels = 1;</div>\n\
<div class=\"line\">        td.ArraySize = 1;</div>\n\
<div class=\"line\">        td.Format = m_depthStencilFormat;</div>\n\
<div class=\"line\">        td.SampleDesc.Count = 1;</div>\n\
<div class=\"line\">        td.SampleDesc.Quality = 0;</div>\n\
<div class=\"line\">        td.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">        td.BindFlags = D3D11_BIND_DEPTH_STENCIL;</div>\n\
<div class=\"line\">        td.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">        td.MiscFlags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateTexture2D( &amp;td, NULL, &amp;m_pDepthStencil );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to create texture for depth/stencil target.&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pDepthStencil )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateDepthStencilView( m_pDepthStencil, NULL, &amp;m_pDepthStencilView );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to get view for depth/stencil target.&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2. Create output render targets</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// If we don&#39;t want floating point, then the intermediate is</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the final output format, so don&#39;t bother creating another one.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Just make the output point to the intermediate target.</span></div>\n\
<div class=\"line\">    assert( !m_wantFloatingPointTargets );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_wantFloatingPointTargets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureOutput = m_pTextureInterm;</div>\n\
<div class=\"line\">        m_pTextureOutputView = m_pTextureIntermView;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3. Create system memory surface for readback</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pTextureReadBack)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureReadBack-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureReadBack= 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_pTextureReadBack)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        D3D11_TEXTURE2D_DESC td;</div>\n\
<div class=\"line\">        ZeroMemory( &amp;td, <span class=\"keyword\">sizeof</span> td );</div>\n\
<div class=\"line\">        td.Width = m_renderWidth;</div>\n\
<div class=\"line\">        td.Height = m_renderHeight;</div>\n\
<div class=\"line\">        td.MipLevels = 1;</div>\n\
<div class=\"line\">        td.ArraySize = 1;</div>\n\
<div class=\"line\">        td.Format = m_intermediateTargetFormat; <span class=\"comment\">/* Use intermediate target format */</span></div>\n\
<div class=\"line\">        td.SampleDesc.Count = 1;</div>\n\
<div class=\"line\">        td.SampleDesc.Quality = 0;</div>\n\
<div class=\"line\">        td.Usage = D3D11_USAGE_STAGING;</div>\n\
<div class=\"line\">        td.BindFlags = 0;</div>\n\
<div class=\"line\">        td.CPUAccessFlags = D3D11_CPU_ACCESS_READ;</div>\n\
<div class=\"line\">        td.MiscFlags = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateTexture2D( &amp;td, NULL, &amp;m_pTextureReadBack );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hr))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to create system memory readback surface.&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (m_pTextureOutput &amp;&amp; m_pTextureOutputView &amp;&amp; m_pTextureInterm &amp;&amp; </div>\n\
<div class=\"line\">            m_pTextureIntermView &amp;&amp; m_pTextureReadBack);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DEPTH_REQUIRED)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 4. Create depth stencil surface for access for readback.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pDepthStencilSurface)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pDepthStencilSurface-&gt;Release();</div>\n\
<div class=\"line\">        m_pDepthStencilSurface = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_requireDepthStencilReadback &amp;&amp; !m_pDepthStencilSurface)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        hr = m_pD3DDevice-&gt;CreateDepthStencilSurface( </div>\n\
<div class=\"line\">                        m_renderWidth, m_renderHeight, m_depthStencilFormat, D3DMULTISAMPLE_NONE, </div>\n\
<div class=\"line\">                        0, FALSE, </div>\n\
<div class=\"line\">                        &amp;m_pDepthStencilSurface, NULL );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (FAILED(hr))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to create depth/stencil surface. Depth read back will not be available.&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">DX11ViewportRenderer::createBoundsBuffers()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    HRESULT hr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    BoundsVertex vertices[] = </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        { XMFLOAT3( -1.0f, -1.0f, -1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3( -1.0f, -1.0f,  1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3( -1.0f,  1.0f, -1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3( -1.0f,  1.0f,  1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3(  1.0f, -1.0f, -1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3(  1.0f, -1.0f,  1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3(  1.0f,  1.0f, -1.0f ) },</div>\n\
<div class=\"line\">        { XMFLOAT3(  1.0f,  1.0f,  1.0f ) },</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    D3D11_BUFFER_DESC bd;</div>\n\
<div class=\"line\">    ZeroMemory( &amp;bd, <span class=\"keyword\">sizeof</span>(bd) );</div>\n\
<div class=\"line\">    bd.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">    bd.ByteWidth = <span class=\"keyword\">sizeof</span>( BoundsVertex ) * 8;</div>\n\
<div class=\"line\">    bd.BindFlags = D3D11_BIND_VERTEX_BUFFER;</div>\n\
<div class=\"line\">    bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">    D3D11_SUBRESOURCE_DATA InitData;</div>\n\
<div class=\"line\">    ZeroMemory( &amp;InitData, <span class=\"keyword\">sizeof</span>(InitData) );</div>\n\
<div class=\"line\">    InitData.pSysMem = vertices;</div>\n\
<div class=\"line\">    hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, &amp;InitData, &amp;m_pBoundsVertexBuffer );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    WORD indices[] =</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        0, 1, </div>\n\
<div class=\"line\">        1, 3, </div>\n\
<div class=\"line\">        3, 2, </div>\n\
<div class=\"line\">        2, 0,</div>\n\
<div class=\"line\">        4, 5, </div>\n\
<div class=\"line\">        5, 7, </div>\n\
<div class=\"line\">        7, 6, </div>\n\
<div class=\"line\">        6, 4,</div>\n\
<div class=\"line\">        0, 4, </div>\n\
<div class=\"line\">        1, 5, </div>\n\
<div class=\"line\">        2, 6, </div>\n\
<div class=\"line\">        3, 7,</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    bd.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">    bd.ByteWidth = <span class=\"keyword\">sizeof</span>( WORD ) * 24;</div>\n\
<div class=\"line\">    bd.BindFlags = D3D11_BIND_INDEX_BUFFER;</div>\n\
<div class=\"line\">    bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">    InitData.pSysMem = indices;</div>\n\
<div class=\"line\">    hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, &amp;InitData, &amp;m_pBoundsIndexBuffer );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    bd.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">    bd.ByteWidth = <span class=\"keyword\">sizeof</span>( BoundsConstants );</div>\n\
<div class=\"line\">    bd.BindFlags = D3D11_BIND_CONSTANT_BUFFER;</div>\n\
<div class=\"line\">    bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">    hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, NULL, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    bd.Usage = D3D11_USAGE_DEFAULT;</div>\n\
<div class=\"line\">    bd.ByteWidth = <span class=\"keyword\">sizeof</span>( FixedFunctionConstants );</div>\n\
<div class=\"line\">    bd.BindFlags = D3D11_BIND_CONSTANT_BUFFER;</div>\n\
<div class=\"line\">    bd.CPUAccessFlags = 0;</div>\n\
<div class=\"line\">    hr = m_pD3DDevice-&gt;CreateBuffer( &amp;bd, NULL, &amp;m_pFixedFunctionConstantBuffer );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span></div>\n\
<div class=\"line\">DX11ViewportRenderer::createRasterizerStates()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    HRESULT hr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    D3D11_RASTERIZER_DESC rd;</div>\n\
<div class=\"line\">    rd.FillMode = D3D11_FILL_SOLID;</div>\n\
<div class=\"line\">    rd.CullMode = D3D11_CULL_BACK;</div>\n\
<div class=\"line\">    rd.FrontCounterClockwise = TRUE;</div>\n\
<div class=\"line\">    rd.DepthBias = 0;</div>\n\
<div class=\"line\">    rd.SlopeScaledDepthBias = 0.0f;</div>\n\
<div class=\"line\">    rd.DepthBiasClamp = 0.0f;</div>\n\
<div class=\"line\">    rd.DepthClipEnable = TRUE;</div>\n\
<div class=\"line\">    rd.ScissorEnable = FALSE;</div>\n\
<div class=\"line\">    rd.MultisampleEnable = FALSE;</div>\n\
<div class=\"line\">    rd.AntialiasedLineEnable = FALSE;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    hr = m_pD3DDevice-&gt;CreateRasterizerState( &amp;rd, &amp;m_pNormalRS );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    rd.FillMode = D3D11_FILL_WIREFRAME;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    hr = m_pD3DDevice-&gt;CreateRasterizerState( &amp;rd, &amp;m_pWireframeRS );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED( hr ) )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span>   </div>\n\
<div class=\"line\"><a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> </div>\n\
<div class=\"line\">DX11ViewportRenderer::initialize()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status = <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Do we want floating point targets</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> wantFloatingPoint(<span class=\"stringliteral\">&quot;D3D_RENDERER_FLOAT_TARGETS&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#aba6c13d47a4c052cdd5915f45fed39b6\">MGlobal::getOptionVarValue</a>(wantFloatingPoint, value))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_wantFloatingPointTargets = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_wantFloatingPointTargets = (value != 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    m_wantFloatingPointTargets = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create the window to contain our off-screen target.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_hWnd)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Register the window class</span></div>\n\
<div class=\"line\">        WNDCLASSEX wc = { <span class=\"keyword\">sizeof</span>(WNDCLASSEX), CS_CLASSDC, (WNDPROC) D3DWindowProc, 0L, 0L, </div>\n\
<div class=\"line\">                      GetModuleHandle(NULL), NULL, NULL, NULL, NULL,</div>\n\
<div class=\"line\">                      <span class=\"stringliteral\">&quot;DX11 Viewport Renderer&quot;</span>, NULL };</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (RegisterClassEx( &amp;wc ))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_hWnd = CreateWindow( <span class=\"stringliteral\">&quot;DX11 Viewport Renderer&quot;</span>, <span class=\"stringliteral\">&quot;DX11 Viewport Renderer&quot;</span>, </div>\n\
<div class=\"line\">                                    WS_OVERLAPPEDWINDOW, 0, 0, m_renderWidth, m_renderHeight,</div>\n\
<div class=\"line\">                                    NULL, NULL, wc.hInstance, NULL );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    HRESULT hr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Test for floating point buffer usage for render targets</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_wantFloatingPointTargets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_intermediateTargetFormat = DXGI_FORMAT_R16G16B16A16_FLOAT;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_intermediateTargetFormat = DXGI_FORMAT_R8G8B8A8_UNORM;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// The output target is always fixed8 for now.</span></div>\n\
<div class=\"line\">    m_outputTargetFormat = DXGI_FORMAT_R8G8B8A8_UNORM;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_requireDepthStencilReadback)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_depthStencilFormat = DXGI_FORMAT_D32_FLOAT; <span class=\"comment\">// Let&#39;s try for 32-bit depth, not stencil</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        m_depthStencilFormat = DXGI_FORMAT_D24_UNORM_S8_UINT; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create an appropriate device</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_hWnd)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!m_pD3DDevice)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Try hardware vertex processing first.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            hr = D3D11CreateDevice( NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, 0, NULL, </div>\n\
<div class=\"line\">                                                0, D3D11_SDK_VERSION, </div>\n\
<div class=\"line\">                                                &amp;m_pD3DDevice, NULL, NULL );</div>\n\
<div class=\"line\">            <span class=\"comment\">// Try software if we can&#39;t find hardware.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (FAILED(hr))</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// TODO</span></div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_pD3DDevice = 0;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Get the device context.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pD3DDevice)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pD3DDevice-&gt;GetImmediateContext( &amp;m_pD3DDeviceCtx );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create targets, buffers, states and load shaders.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_pD3DDevice)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> success = buildRenderTargets(640, 480);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( success )</div>\n\
<div class=\"line\">            success = createBoundsBuffers();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( success )</div>\n\
<div class=\"line\">            success = createRasterizerStates();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( success )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a> shaderLocation(<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(getenv(<span class=\"stringliteral\">&quot;MAYA_LOCATION&quot;</span>)) + <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_string.html\">MString</a>(<span class=\"stringliteral\">&quot;\\\\devkit\\\\plug-ins&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> loaded;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                D3D11_INPUT_ELEMENT_DESC layout[] =</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    { <span class=\"stringliteral\">&quot;POSITION&quot;</span>, 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                    { <span class=\"stringliteral\">&quot;NORMAL&quot;</span>, 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                    { <span class=\"stringliteral\">&quot;TEXCOORD&quot;</span>, 0, DXGI_FORMAT_R32G32_FLOAT, 0, 24, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                };</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numLayoutElements = <span class=\"keyword\">sizeof</span> layout/<span class=\"keyword\">sizeof</span> layout[0];</div>\n\
<div class=\"line\">                loaded = m_resourceManager.initializeDefaultSurfaceEffect( shaderLocation, m_pD3DDevice, <span class=\"stringliteral\">&quot;Maya_fixedFunction&quot;</span>, </div>\n\
<div class=\"line\">                                                                            <span class=\"stringliteral\">&quot;mainVS&quot;</span>, <span class=\"stringliteral\">&quot;mainPS&quot;</span>, layout, numLayoutElements );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                D3D11_INPUT_ELEMENT_DESC layout[] =</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    { <span class=\"stringliteral\">&quot;POSITION&quot;</span>, 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },</div>\n\
<div class=\"line\">                };</div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numLayoutElements = <span class=\"keyword\">sizeof</span> layout/<span class=\"keyword\">sizeof</span> layout[0];</div>\n\
<div class=\"line\">                loaded = m_resourceManager.initializeDefaultSurfaceEffect( shaderLocation, m_pD3DDevice, <span class=\"stringliteral\">&quot;Maya_unlit&quot;</span>, </div>\n\
<div class=\"line\">                                                                            <span class=\"stringliteral\">&quot;mainVS&quot;</span>, <span class=\"stringliteral\">&quot;mainPS&quot;</span>, layout, numLayoutElements );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// All elements must exist for success</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (m_hWnd &amp;&amp; m_pD3DDevice &amp;&amp; m_pD3DDeviceCtx &amp;&amp; m_pTextureOutput &amp;&amp; m_pTextureOutputView &amp;&amp;</div>\n\
<div class=\"line\">                m_pTextureInterm &amp;&amp; m_pTextureIntermView )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                status = <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If for any reason we failed. Cleanup what we can.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (status != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        uninitialize();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span>   </div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> </div>\n\
<div class=\"line\">DX11ViewportRenderer::uninitialize()</div>\n\
<div class=\"line\">{   </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cleanup D3D items</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pTextureOutput )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pTextureOutput != m_pTextureInterm)       </div>\n\
<div class=\"line\">            m_pTextureOutput-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureOutput = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pTextureOutputView )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_pTextureOutputView != m_pTextureIntermView)       </div>\n\
<div class=\"line\">            m_pTextureOutputView-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureOutputView = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pTextureInterm )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureInterm-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureInterm = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pTextureIntermView )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureIntermView-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureIntermView = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pTextureReadBack )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pTextureReadBack-&gt;Release();</div>\n\
<div class=\"line\">        m_pTextureReadBack = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pDepthStencil )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pDepthStencil-&gt;Release();</div>\n\
<div class=\"line\">        m_pDepthStencil = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pDepthStencilView )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pDepthStencilView-&gt;Release();</div>\n\
<div class=\"line\">        m_pDepthStencilView = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pBoundsVertexBuffer != NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pBoundsVertexBuffer-&gt;Release(); </div>\n\
<div class=\"line\">        m_pBoundsVertexBuffer = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pBoundsIndexBuffer != NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pBoundsIndexBuffer-&gt;Release(); </div>\n\
<div class=\"line\">        m_pBoundsIndexBuffer = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pBoundsConstantBuffer != NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pBoundsConstantBuffer-&gt;Release(); </div>\n\
<div class=\"line\">        m_pBoundsConstantBuffer = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pFixedFunctionConstantBuffer != NULL )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pFixedFunctionConstantBuffer-&gt;Release(); </div>\n\
<div class=\"line\">        m_pFixedFunctionConstantBuffer = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    m_resourceManager.clearResources(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>); <span class=\"comment\">/* wipe out shaders */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pNormalRS )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pNormalRS-&gt;Release();</div>\n\
<div class=\"line\">        m_pNormalRS = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pWireframeRS )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pWireframeRS-&gt;Release();</div>\n\
<div class=\"line\">        m_pWireframeRS = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pD3DDeviceCtx )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pD3DDeviceCtx-&gt;Release();</div>\n\
<div class=\"line\">        m_pD3DDeviceCtx = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_pD3DDevice )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_pD3DDevice-&gt;Release();</div>\n\
<div class=\"line\">        m_pD3DDevice = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Clean up windowing items.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m_hWnd)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        ReleaseDC( m_hWnd, GetDC(m_hWnd ));</div>\n\
<div class=\"line\">        DestroyWindow(m_hWnd);</div>\n\
<div class=\"line\">        UnregisterClass(<span class=\"stringliteral\">&quot;DX11 Viewport Renderer&quot;</span>, GetModuleHandle(NULL));</div>\n\
<div class=\"line\">        m_hWnd = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span> </div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> </div>\n\
<div class=\"line\">DX11ViewportRenderer::render(<span class=\"keyword\">const</span> <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html\">MRenderingInfo</a> &amp;renderInfo)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Print some diagnostic information.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html\">MRenderTargetLegacy</a> &amp; target = renderInfo.<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#aa75c15a3946887c4344280baf2b71f93\">renderTarget</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> currentWidth = target.<a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#a8486e338fcda95e70c71ad373dfc9555\">width</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> currentHeight = target.<a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#aa420a28166e708e3f8b9ecc8e527fc09\">height</a>();</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!buildRenderTargets(currentWidth, currentHeight))</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//printf(&quot;Render using (%s : %s) renderer\\n&quot;, fName.asChar(), fUIName.asChar());</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//printf(&quot;Render region: %d,%d -&gt; %d, %d into target of size %d,%d\\n&quot;, </span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  renderInfo.originX(), renderInfo.originY(), renderInfo.width(), renderInfo.height(),</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//  target.width(), target.height() );</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a5cc2993db47042d12f73f656e0fa1435\">MViewportRenderer::RenderingAPI</a> targetAPI = renderInfo.<a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#a0f2275dc8cb381a257941c312fb16dc8\">renderingAPI</a>();</div>\n\
<div class=\"line\">    <span class=\"comment\">//float targetVersion = renderInfo.renderingVersion();</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//printf(&quot;Render target API is %s (Version %g)\\n&quot;, targetAPI == MViewportRenderer::kDirect3D ?</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//      &quot;Direct3D&quot; : &quot;OpenGL&quot;, targetVersion);</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Render if we get a valid camera</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a name=\"_a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;cameraPath = renderInfo.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#a07e8bf96bcd0ec1fffd88c631a5c82ff\">cameraPath</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_resourceManager.translateCamera( cameraPath ) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( renderToTarget( renderInfo ) )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Read back results and set into an intermediate buffer,</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if the target is not Direct3D. Also readback if we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// want to debug the buffer.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> requireReadBack = (targetAPI != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a5cc2993db47042d12f73f656e0fa1435a5ff3679a551a12c7374cd6b9ee8c9e21\">MViewportRenderer::kDirect3D</a>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( requireReadBack )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (readFromTargetToSystemMemory())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Blit image back to OpenGL </span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (targetAPI == <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a5cc2993db47042d12f73f656e0fa1435a72361be679c1aca1c1be5f9b500a3315\">MViewportRenderer::kOpenGL</a>)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Center the image for now.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetW = target.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#a8486e338fcda95e70c71ad373dfc9555\">width</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> targetH = target.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#aa420a28166e708e3f8b9ecc8e527fc09\">height</a>();                         </div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_readBackBufferWidth, m_readBackBufferHeight;</div>\n\
<div class=\"line\">                        m_readBackBuffer.getSize(m_readBackBufferWidth, m_readBackBufferHeight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (m_readBackBufferWidth &amp;&amp; m_readBackBufferHeight)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">if</span> (m_readBackBufferWidth &gt; targetW ||</div>\n\
<div class=\"line\">                                m_readBackBufferHeight &gt; targetH)</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                m_readBackBuffer.resize(targetW, targetH);</div>\n\
<div class=\"line\">                                target.<a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#af6a698f3a33421cea5bd8ecbad97f102\">writeColorBuffer</a>( m_readBackBuffer, 0, 0 );</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                target.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#af6a698f3a33421cea5bd8ecbad97f102\">writeColorBuffer</a>( m_readBackBuffer, </div>\n\
<div class=\"line\">                                    (<span class=\"keywordtype\">short</span>)(targetW/2 - m_readBackBufferWidth/2),</div>\n\
<div class=\"line\">                                    (<span class=\"keywordtype\">short</span>)(targetH/2 - m_readBackBufferHeight/2));</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Blit image back to a software raster</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"comment\">// To ADD</span></div>\n\
<div class=\"line\">                        status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;             </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Do nothing here. Direct rendering to D3D target</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// should be handled in renderToTarget().</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : No valid render camera to use. Nothing rendered\\n&quot;</span>);</div>\n\
<div class=\"line\">        status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80a1ef6c2d725fb4bec3e7e840d28adbc00\">MStatus::kFailure</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        status = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a02ab596f4febca68da503aaf8dde3a80af0536797208144380691e2b376ffc1d1\">MStatus::kSuccess</a>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> status;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span> </div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>    </div>\n\
<div class=\"line\">DX11ViewportRenderer::nativelySupports( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a5cc2993db47042d12f73f656e0fa1435\">MViewportRenderer::RenderingAPI</a> api, </div>\n\
<div class=\"line\">                                       <span class=\"keywordtype\">float</span> version )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Do API and version check</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ((api == m_API) &amp;&amp; (version == m_Version) );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* virtual */</span> <span class=\"keywordtype\">bool</span>  </div>\n\
<div class=\"line\">DX11ViewportRenderer::override( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a21e72c75b59deb20f71d38a11967cfa7\">MViewportRenderer::RenderingOverride</a> <span class=\"keyword\">override</span> )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Check override</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keyword\">override</span> == fRenderingOverride);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Rendering methods</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span><span class=\"preprocessor\">#if defined(DX11_SUPPORTED)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span>                    </div>\n\
<div class=\"line\">DX11ViewportRenderer::translateCamera( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html\">MRenderingInfo</a> &amp;renderInfo )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Translate Maya&#39;s camera </span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;cameraPath = renderInfo.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#a07e8bf96bcd0ec1fffd88c631a5c82ff\">cameraPath</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cameraPath.<a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> m_resourceManager.translateCamera( cameraPath );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span>                    </div>\n\
<div class=\"line\">DX11ViewportRenderer::clearResources(<span class=\"keywordtype\">bool</span> onlyInvalidItems, <span class=\"keywordtype\">bool</span> clearShaders)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    m_resourceManager.clearResources( onlyInvalidItems, clearShaders );</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> findShader( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a>&amp; setNode )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//  Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Find the shading node for the given shading group set node.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dependency_node.html\">MFnDependencyNode</a> fnNode(setNode);</div>\n\
<div class=\"line\">    <a name=\"_a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html\">MPlug</a> shaderPlug = fnNode.findPlug(<span class=\"stringliteral\">&quot;surfaceShader&quot;</span>);</div>\n\
<div class=\"line\">            </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!shaderPlug.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#ab7ec149d38b7c29ca55c5aa7b407d8f9\">isNull</a>()) {         </div>\n\
<div class=\"line\">        <a name=\"_a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html\">MPlugArray</a> connectedPlugs;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> asSrc = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> asDst = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        shaderPlug.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug.html#acf1340576a4a0a78a0045e67ee4155bf\">connectedTo</a>( connectedPlugs, asDst, asSrc );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (connectedPlugs.<a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_plug_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>() != 1)</div>\n\
<div class=\"line\">            <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;Error getting shader&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> connectedPlugs[0].node();</div>\n\
<div class=\"line\">    }           </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DX11ViewportRenderer::drawSurface( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;dagPath, <span class=\"keywordtype\">bool</span> active, <span class=\"keywordtype\">bool</span> templated)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> drewSurface = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !dagPath.<a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a30\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a> ))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a name=\"_a31\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  matrix = dagPath.<a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\">        <a name=\"_a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath);</div>\n\
<div class=\"line\">        <a name=\"_a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> box = dagNode.boundingBox();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> color[3] = {0.6f, 0.3f, 0.0f};</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (active)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            color[0] = 1.0f;</div>\n\
<div class=\"line\">            color[1] = 1.0f;</div>\n\
<div class=\"line\">            color[2] = 1.0f;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (templated)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            color[0] = 1.0f;</div>\n\
<div class=\"line\">            color[1] = 0.686f;</div>\n\
<div class=\"line\">            color[2] = 0.686f;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        drawBounds( matrix, box, color);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a> ))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  matrix = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Look for any hardware shaders which can draw D3D first.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> drewWithHwShader = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a name=\"_a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_mesh.html\">MFnMesh</a> fnMesh(dagPath);</div>\n\
<div class=\"line\">            <a name=\"_a36\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> sets;</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html\">MObjectArray</a> comps;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> instanceNum = dagPath.<a name=\"a37\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#ac908055bb978bce38fcb5f1af6620760\">instanceNumber</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!fnMesh.getConnectedSetsAndMembers(instanceNum, sets, comps, <span class=\"keyword\">true</span>))</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;ERROR : MFnMesh::getConnectedSetsAndMembers&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> i=0; i&lt;sets.<a name=\"a38\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object_array.html#a580388f31f60c46fac867ca48a48da1e\">length</a>(); i++ ) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> set = sets[i];</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> comp = comps[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\">                <a name=\"_a39\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_set.html\">MFnSet</a> fnSet( set, &amp;status );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (status == MS::kFailure) {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;ERROR: MFnSet::MFnSet&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html\">MObject</a> shaderNode = findShader(set);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (shaderNode != <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_object.html#af2a707b4254eb54763167aeced863e63\">MObject::kNullObj</a>)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html\">MPxHardwareShader</a> * hwShader = </div>\n\
<div class=\"line\">                        <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#aa23ddc899bfdca52a5b703c3e7a66adb\">MPxHardwareShader::getHardwareShaderPtr</a>( shaderNode );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (hwShader)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <a name=\"_a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html\">MRenderProfile</a> &amp; profile = hwShader-&gt;<a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_px_hardware_shader.html#a269d88f7a24099bc25280475c931e49d\">profile</a>();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (profile.<a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html#a03c41780d4785ce5e234fb4ae23a3aa8\">hasRenderer</a>( <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_profile.html#a7f20c37a8a7dba81b35df0f8d841129ba9b232cce89de80d357dce779509fc75a\">MRenderProfile::kMayaD3D</a>))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Render a Maya D3D hw shader here....</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//printf(&quot;Found a D3D hw shader\\n&quot;);</span></div>\n\
<div class=\"line\">                            <span class=\"comment\">//drewWithHwShader = true;</span></div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Get the geometry buffers for this bad boy and render them</span></div>\n\
<div class=\"line\">        D3DGeometry* Geometry = m_resourceManager.getGeometry( dagPath, m_pD3DDevice);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span>( Geometry)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Transform from object to world space</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            XMMATRIX objectToWorld = XMMATRIX</div>\n\
<div class=\"line\">                (</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">float</span>)matrix.<a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3],</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3],</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3],</div>\n\
<div class=\"line\">                (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]</div>\n\
<div class=\"line\">            );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            FixedFunctionConstants cb;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!drewWithHwShader)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Get material properties for shader associated with mesh</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// 1. Try to draw with the sample internal programmable shader</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> drewGeometryWithShader = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// 2. Draw with fixed function shader</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (!drewGeometryWithShader)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Set up a default material, just in case there is none.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> diffuse[3];</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (active)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (templated)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            m_pD3DDeviceCtx-&gt;RSSetState( m_pWireframeRS );</div>\n\
<div class=\"line\">                            diffuse[0] = 1.0f; diffuse[1] = 0.686f; diffuse[2] = 0.686f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            m_pD3DDeviceCtx-&gt;RSSetState( m_pNormalRS );</div>\n\
<div class=\"line\">                            diffuse[0] = 0.6f; diffuse[1] = 0.6f; diffuse[2] = 0.6f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (templated)</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            m_pD3DDeviceCtx-&gt;RSSetState( m_pWireframeRS );</div>\n\
<div class=\"line\">                            diffuse[0] = 1.0f; diffuse[1] = 0.686f; diffuse[2] = 0.686f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            m_pD3DDeviceCtx-&gt;RSSetState( m_pNormalRS );</div>\n\
<div class=\"line\">                            diffuse[0] = 0.5f; diffuse[1] = 0.5f; diffuse[2] = 0.5f;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Set constant buffer</span></div>\n\
<div class=\"line\">                    XMVECTOR det;</div>\n\
<div class=\"line\">                    cb.wvIT = XMMatrixInverse( &amp;det, objectToWorld * m_currentViewMatrix );</div>\n\
<div class=\"line\">                    cb.wvp = XMMatrixTranspose( objectToWorld * m_currentViewMatrix * m_currentProjectionMatrix );</div>\n\
<div class=\"line\">                    cb.wv = XMMatrixTranspose( objectToWorld * m_currentViewMatrix );</div>\n\
<div class=\"line\">                    cb.lightDir = XMFLOAT4( 0.0f, 0.0f, 1.0f, 0.0f );</div>\n\
<div class=\"line\">                    cb.lightColor = XMFLOAT4( 1.0f, 1.0f, 1.0f, 0.0f );</div>\n\
<div class=\"line\">                    cb.ambientLight = XMFLOAT4( 0.2f, 0.2f, 0.2f, 0.0f );</div>\n\
<div class=\"line\">                    cb.diffuseMaterial = XMFLOAT4( diffuse[0], diffuse[1], diffuse[2], 0.0f );</div>\n\
<div class=\"line\">                    cb.specularColor = XMFLOAT4( 0.2f, 0.2f, 0.2f, 0.0f );</div>\n\
<div class=\"line\">                    cb.diffuseCoeff = 1.0f;</div>\n\
<div class=\"line\">                    cb.shininess = 16.0f;</div>\n\
<div class=\"line\">                    cb.transparency = 1.0f;</div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;UpdateSubresource( m_pFixedFunctionConstantBuffer, 0, NULL, &amp;cb, 0, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// get shader</span></div>\n\
<div class=\"line\">                    SurfaceEffectItemList::const_iterator it = m_resourceManager.getSurfaceEffectItemList().find( <span class=\"stringliteral\">&quot;Maya_fixedFunction&quot;</span> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( it == m_resourceManager.getSurfaceEffectItemList().end() )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> SurfaceEffectItem* sei = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// bind shaders</span></div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;VSSetShader( sei-&gt;fVertexShader, NULL, 0 );</div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;VSSetConstantBuffers( 0, 1, &amp;m_pFixedFunctionConstantBuffer );</div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;IASetInputLayout( sei-&gt;fInputLayout );</div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;PSSetShader( sei-&gt;fPixelShader, NULL, 0 );</div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;PSSetConstantBuffers( 0, 1, &amp;m_pFixedFunctionConstantBuffer );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    Geometry-&gt;Render( m_pD3DDeviceCtx );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    drewSurface = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Draw wireframe on top</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( drewSurface &amp;&amp; active )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> drawActiveWithBounds = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (drawActiveWithBounds)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> box = dagNode.boundingBox();</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">float</span> color[3] = {1.0f, 1.0f, 1.0f};</div>\n\
<div class=\"line\">                    drawBounds( matrix, box, color );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    cb.lightColor = XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f );</div>\n\
<div class=\"line\">                    cb.ambientLight = XMFLOAT4( 1.0f, 1.0f, 1.0f, 0.0f );</div>\n\
<div class=\"line\">                    cb.diffuseMaterial = XMFLOAT4( 1.0f, 1.0f, 1.0f, 0.0f );</div>\n\
<div class=\"line\">                    cb.specularColor = XMFLOAT4( 0.0f, 0.0f, 0.0f, 0.0f );</div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;UpdateSubresource( m_pFixedFunctionConstantBuffer, 0, NULL, &amp;cb, 0, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    m_pD3DDeviceCtx-&gt;RSSetState( m_pWireframeRS );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    Geometry-&gt;Render( m_pD3DDeviceCtx );                </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"comment\">// If Geometry</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> drewSurface;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DX11ViewportRenderer::drawScene(<span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html\">MRenderingInfo</a> &amp;renderInfo)</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Draw the Maya scene, using a custom traverser.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useDrawTraversal = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> groundPlaneColor[3] = { 0.8f, 0.8f, 0.8f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (useDrawTraversal)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> &amp;cameraPath = renderInfo.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#a07e8bf96bcd0ec1fffd88c631a5c82ff\">cameraPath</a>();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (cameraPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// You can actually keep the traverser classes around</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// if desired. Here we just create temporary traversers</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// on the fly.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <a name=\"_a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html\">MDrawTraversal</a> *trav = <span class=\"keyword\">new</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html\">MDrawTraversal</a>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!trav)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : failed to create a traversal class !\\n&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            trav-&gt;<a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#afb2ac0dd09dd73700a4258f091c04a1d\">enableFiltering</a>( <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html\">MRenderTargetLegacy</a> &amp;renderTarget = renderInfo.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#aa75c15a3946887c4344280baf2b71f93\">renderTarget</a>();</div>\n\
<div class=\"line\">            trav-&gt;<a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a54bc763b89ac8604bfd0a7c88c0044e1\">setFrustum</a>( cameraPath, renderTarget.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#a8486e338fcda95e70c71ad373dfc9555\">width</a>(), </div>\n\
<div class=\"line\">                              renderTarget.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_render_target_legacy.html#aa420a28166e708e3f8b9ecc8e527fc09\">height</a>() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!trav-&gt;<a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a3560c3bd79408c8cd0615889d349c1b3\">frustumValid</a>())</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Frustum is invalid !\\n&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            trav-&gt;<a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a5f1630ceda51de2240591c5409cb3790\">traverse</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> numItems = trav-&gt;<a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a890a36866f5602d44153c818f81d8ef5\">numberOfItems</a>();</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> (i=0; i&lt;numItems; i++)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> path;</div>\n\
<div class=\"line\">                trav-&gt;<a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#ad398b50125777b1021b33f16584370a3\">itemPath</a>(i, path);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a095ae34296e81703965265a42ee783ca\">isValid</a>())</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> drawIt = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Default traverer may have view manips showing up.</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// This is currently a known Maya bug.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a1ffa06cc268579e3f936af4fa5b0e7cc\">MFn::kViewManip</a> ))</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Draw surfaces (polys, nurbs, subdivs)</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> active = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">bool</span> templated = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>) || </div>\n\
<div class=\"line\">                         path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a016a93d2c00725d6ca8021dffbd2a0a8\">MFn::kNurbsSurface</a>) || </div>\n\
<div class=\"line\">                         path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a305a1a7e615931a31f8d932bb4f3a4c1\">MFn::kSubdiv</a>) )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        drawIt = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (trav-&gt;<a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a372f897e3c752448f55cf1ab61f2bddf\">itemHasStatus</a>( i, <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a726ca809ffd3d67ab4b8476646f26635aeb81f2660649dd45dbf8316826c2e96c\">MDrawTraversal::kActiveItem</a> ))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            active = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (trav-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a372f897e3c752448f55cf1ab61f2bddf\">itemHasStatus</a>( i, <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_draw_traversal.html#a726ca809ffd3d67ab4b8476646f26635a4c661de51d08a364ca2d91c38122e9e6\">MDrawTraversal::kTemplateItem</a> ))</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            templated = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Draw the ground plane</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a820f123f996c72c300977750d929a07d\">MFn::kSketchPlane</a> ) ||</div>\n\
<div class=\"line\">                             path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#a5901f0fa543d32fb13756c2d004f37ae\">hasFn</a>( <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a71922db719316890115e11f622c07b96\">MFn::kGroundPlane</a> ))</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  matrix = path.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(path);</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> box = dagNode.boundingBox();</div>\n\
<div class=\"line\">                        drawBounds( matrix, box, groundPlaneColor );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (drawIt)</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        drawSurface( path, active, templated );</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (trav)</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span> trav;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Cleanup any unused resource items</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> onlyInvalidItems = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            clearResources( onlyInvalidItems, <span class=\"keyword\">false</span> );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Draw some poly bounding boxes </span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1\">MItDag::TraversalType</a> traversalType = <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html#a1545968b4f810358b53ae9844bce6bd1a6e92a8757afce03be51397f0b518f4c5\">MItDag::kDepthFirst</a>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7\">MFn::Type</a> filter = <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn.html#a1d1cfd8ffb84e947f82999c682b666a7a19fd562fc0900a60162e6073df36cb62\">MFn::kMesh</a>;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html\">MStatus</a> status;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_it_dag.html\">MItDag</a> dagIterator( traversalType, filter, &amp;status);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( ; !dagIterator.isDone(); dagIterator.next() ) </div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html\">MDagPath</a> dagPath;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            status = dagIterator.getPath(dagPath);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !status ) {</div>\n\
<div class=\"line\">                status.<a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;MItDag::getPath&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_fn_dag_node.html\">MFnDagNode</a> dagNode(dagPath, &amp;status);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !status ) {</div>\n\
<div class=\"line\">                status.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_status.html#a1f01a4748fea4d8bcced082df83f804d\">perror</a>(<span class=\"stringliteral\">&quot;MFnDagNode constructor&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a>  matrix = dagPath.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_dag_path.html#afb30f64680f5aa038da428a79579d08c\">inclusiveMatrix</a>();</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> box = dagNode.boundingBox();</div>\n\
<div class=\"line\">            drawBounds( matrix, box, groundPlaneColor );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DX11ViewportRenderer::drawBounds( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp;matrix, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html\">MBoundingBox</a> &amp;box, <span class=\"keywordtype\">float</span> color[3] )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Transform from object to world space</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    XMMATRIX mat = XMMATRIX</div>\n\
<div class=\"line\">        (</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3],</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3],</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3],</div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)matrix.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]</div>\n\
<div class=\"line\">        );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Adjust the unit cube to the bounds</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <a name=\"_a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>  minPt = box.<a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#afb3213b98f3a6b4bda9759511e9b79a1\">min</a>();</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html\">MPoint</a>  maxPt = box.<a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_bounding_box.html#a1dfdbea9d5560e4aa09d34bdbd82480c\">max</a>();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> minVal[3] = { (float)minPt.<a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)minPt.<a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, (float)minPt.<a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> maxVal[3] = { (float)maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#af88b946fb90d5f08b5fb740c70e98c10\">x</a>, (<span class=\"keywordtype\">float</span>)maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab927965981178aa1fba979a37168db2a\">y</a>, (float)maxPt.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_point.html#ab3e6ed577a7c669c19de1f9c1b46c872\">z</a> };</div>\n\
<div class=\"line\">    XMMATRIX bounds( 0.5f*(maxVal[0]-minVal[0]), 0.0f,                       0.0f,                          0.0f,</div>\n\
<div class=\"line\">                     0.0f,                       0.5f*(maxVal[1]-minVal[1]), 0.0f,                          0.0f,</div>\n\
<div class=\"line\">                     0.0f,                       0.0f,                       0.5f*(maxVal[2]-minVal[2]),    0.0f,</div>\n\
<div class=\"line\">                     0.5f*(maxVal[0]+minVal[0]), 0.5f*(maxVal[1]+minVal[1]), 0.5f*(maxVal[2]+minVal[2]),    1.0f );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set vertex buffer</span></div>\n\
<div class=\"line\">    UINT stride = <span class=\"keyword\">sizeof</span>( BoundsVertex );</div>\n\
<div class=\"line\">    UINT offset = 0;</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;IASetVertexBuffers( 0, 1, &amp;m_pBoundsVertexBuffer, &amp;stride, &amp;offset );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set index buffer</span></div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;IASetIndexBuffer( m_pBoundsIndexBuffer, DXGI_FORMAT_R16_UINT, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set constant buffer</span></div>\n\
<div class=\"line\">    BoundsConstants cb;</div>\n\
<div class=\"line\">    cb.fWVP = XMMatrixTranspose( bounds * mat * m_currentViewMatrix * m_currentProjectionMatrix );</div>\n\
<div class=\"line\">    cb.fDiffuseMaterial = XMFLOAT3( color[0], color[1], color[2] );</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;UpdateSubresource( m_pBoundsConstantBuffer, 0, NULL, &amp;cb, 0, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set primitive topology</span></div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;IASetPrimitiveTopology( D3D11_PRIMITIVE_TOPOLOGY_LINELIST );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get shader</span></div>\n\
<div class=\"line\">    SurfaceEffectItemList::const_iterator it = m_resourceManager.getSurfaceEffectItemList().find( <span class=\"stringliteral\">&quot;Maya_unlit&quot;</span> );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( it == m_resourceManager.getSurfaceEffectItemList().end() )</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> SurfaceEffectItem* sei = it-&gt;second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// bind shaders</span></div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;VSSetShader( sei-&gt;fVertexShader, NULL, 0 );</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;VSSetConstantBuffers( 0, 1, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;IASetInputLayout( sei-&gt;fInputLayout );</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;PSSetShader( sei-&gt;fPixelShader, NULL, 0 );</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;PSSetConstantBuffers( 0, 1, &amp;m_pBoundsConstantBuffer );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// draw</span></div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;DrawIndexed( 24, 0, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DX11ViewportRenderer::renderToTarget( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html\">MRenderingInfo</a> &amp;renderInfo )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Rener to off-screen render target and read back into system memory </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      output buffer.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Direct rendering to a D3D surface</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (renderInfo.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#a0f2275dc8cb381a257941c312fb16dc8\">renderingAPI</a>() == <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_viewport_renderer.html#a5cc2993db47042d12f73f656e0fa1435a5ff3679a551a12c7374cd6b9ee8c9e21\">MViewportRenderer::kDirect3D</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Maya does not support D3D currently. Would need</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to have access to the device, and surface here</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// from an MRenderTargetLegacy. API doesn&#39;t exist, so</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// do nothing.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Offscreen rendering</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_pD3DDevice || !m_pD3DDeviceCtx || !m_pTextureOutput || !m_pTextureInterm)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// START RENDER</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Set colour and depth surfaces.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\">    ID3D11RenderTargetView* targets[] = { m_pTextureIntermView };</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;OMSetRenderTargets( 1, targets, m_pDepthStencilView );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Setup projection and view matrices</span></div>\n\
<div class=\"line\">        setupMatrices( renderInfo );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// set rasterizer state</span></div>\n\
<div class=\"line\">        m_pD3DDeviceCtx-&gt;RSSetState( m_pNormalRS );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Clear the entire buffer (RGB, Depth). Leave stencil for now.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> clearColor[4] = { 0.0f, 0.125f, 0.6f, 1.0f }; <span class=\"comment\">// RGBA</span></div>\n\
<div class=\"line\">        m_pD3DDeviceCtx-&gt;ClearRenderTargetView( m_pTextureIntermView, clearColor );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_pDepthStencilView )</div>\n\
<div class=\"line\">            m_pD3DDeviceCtx-&gt;ClearDepthStencilView( m_pDepthStencilView, D3D11_CLEAR_DEPTH, 1.0f, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Render the scene</span></div>\n\
<div class=\"line\">        drawScene(renderInfo);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// END SCENE RENDER</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DX11ViewportRenderer::setupMatrices( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html\">MRenderingInfo</a> &amp;info )</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Set up camera matrices. Mechanism to check for changes in camera</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      parameters should be done before matrix setup.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Note that we *must* use a &quot;right-handed&quot; system (RH method </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      versions) for computations to match what is coming from Maya.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_pD3DDevice || !m_pD3DDeviceCtx)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set up the viewport</span></div>\n\
<div class=\"line\">    D3D11_VIEWPORT vp;</div>\n\
<div class=\"line\">    vp.Width = (float)m_renderWidth;</div>\n\
<div class=\"line\">    vp.Height = (float)m_renderHeight;</div>\n\
<div class=\"line\">    vp.MinDepth = 0.0f;</div>\n\
<div class=\"line\">    vp.MaxDepth = 1.0f;</div>\n\
<div class=\"line\">    vp.TopLeftX = 0;</div>\n\
<div class=\"line\">    vp.TopLeftY = 0;</div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;RSSetViewports( 1, &amp;vp );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; view = info.<a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#a53c16ec1239d17f326fb7216ba8b91d8\">viewMatrix</a>(); </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html\">MMatrix</a> &amp; projection = info.<a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_m_rendering_info.html#ab1858a6f233c72075f40621f70f137b5\">projectionMatrix</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Double to float conversion</span></div>\n\
<div class=\"line\">    m_currentViewMatrix = XMMATRIX( (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3], </div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3], </div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3], </div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)view.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_currentProjectionMatrix = XMMATRIX( (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[0][3], </div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[1][3], </div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[2][3], </div>\n\
<div class=\"line\">        (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][0], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][1], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][2], (<span class=\"keywordtype\">float</span>)projection.<a class=\"code\" href=\"#!/url=./cpp_ref/class_m_matrix.html#a527b102f4eb0951cf4f391f828d3ca34\">matrix</a>[3][3]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> DX11ViewportRenderer::readFromTargetToSystemMemory()</div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Description:</span></div>\n\
<div class=\"line\"><span class=\"comment\">//      Read back render target memory into system memory to </span></div>\n\
<div class=\"line\"><span class=\"comment\">//      transfer back to calling code.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// </span></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_pD3DDevice || !m_pTextureOutput || m_renderWidth==0 || m_renderHeight == 0 ||</div>\n\
<div class=\"line\">        !m_pTextureReadBack)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> readBuffer = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    HRESULT hr;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Dump to file option for debugging purposes.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_DUMP_SURFACE_READBACK_CONTENTS_)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> dumpToFile= <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (dumpToFile)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> fileName[] = <span class=\"stringliteral\">&quot;c:\\\\temp\\\\d3dDump.jpg&quot;</span>;</div>\n\
<div class=\"line\">        HRESULT hres = D3DXSaveSurfaceToFile( fileName, D3DXIFF_JPG,</div>\n\
<div class=\"line\">                            m_pTextureOutputSurface, NULL <span class=\"comment\">/*palette*/</span>, NULL <span class=\"comment\">/*rect*/</span> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (hres != D3D_OK)</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#acb043e7fc4eb7fc0f39833d31364b8a4\">MGlobal::displayWarning</a>(<span class=\"stringliteral\">&quot;DX11 renderer : Failed to dump surface contents to file !\\n&quot;</span>);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;CopyResource( m_pTextureReadBack, m_pTextureOutput );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    D3D11_MAPPED_SUBRESOURCE resource;</div>\n\
<div class=\"line\">    hr = m_pD3DDeviceCtx-&gt;Map( m_pTextureReadBack, 0, D3D11_MAP_READ, 0, &amp;resource );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( FAILED(hr) )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;DX11 Renderer : Could not map resource for readback\\n&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            INT pitch = resource.RowPitch;</div>\n\
<div class=\"line\">            BYTE *data = (BYTE *)resource.pData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// ** Magic number warning ***</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// We use D3DFMT_A8R8G8B8 as the buffer format for now as we</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// assume 32 bits per pixel = 4 bytes per pixel. Will need to</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// change when buffer format changes possibly be float.</span></div>\n\
<div class=\"line\">            <span class=\"comment\">//</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> bytesPerPixel = 4;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Reallocate buffer block as required.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_readBackBufferWidth = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_readBackBufferHeight = 0;</div>\n\
<div class=\"line\">            m_readBackBuffer.getSize(m_readBackBufferWidth, m_readBackBufferHeight);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            BYTE *m_readBackBufferPtr = NULL;</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> replaceReadBackBuffer = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!m_readBackBufferWidth || !m_readBackBufferHeight ||</div>\n\
<div class=\"line\">                m_readBackBufferWidth != m_renderWidth ||</div>\n\
<div class=\"line\">                m_readBackBufferHeight != m_renderHeight)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// This crashes Maya. Need to figure out why ?????</span></div>\n\
<div class=\"line\">                m_readBackBuffer.resize(m_renderWidth, m_renderHeight, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">                m_readBackBuffer.getSize(m_readBackBufferWidth, m_readBackBufferHeight);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_readBackBufferWidth != m_renderWidth ||</div>\n\
<div class=\"line\">                    m_readBackBufferHeight != m_renderHeight)</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_m_global.html#a4ddbe97e58a90e1ab05d45a62c006cf0\">MGlobal::displayError</a>(<span class=\"stringliteral\">&quot;D3D Renderer : Could not resize MImage buffer for readback !\\n&quot;</span>);</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                m_readBackBufferPtr = (BYTE *)(m_readBackBuffer.pixels());</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                m_readBackBufferPtr = (BYTE *)(m_readBackBuffer.pixels());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (m_readBackBufferPtr)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Copy a row at a time.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// The jump by pitch, may differ if pitch is not the same as width.</span></div>\n\
<div class=\"line\">                <span class=\"comment\">//</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> myLineSize = m_renderWidth * bytesPerPixel;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> offsetMyData = (m_renderHeight-1) * myLineSize;</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> offsetData = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( i=0 ; i &lt; m_renderHeight; i++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    memcpy( m_readBackBufferPtr + offsetMyData, </div>\n\
<div class=\"line\">                        data + offsetData, </div>\n\
<div class=\"line\">                        myLineSize );</div>\n\
<div class=\"line\">                    offsetMyData -= myLineSize;</div>\n\
<div class=\"line\">                    offsetData += pitch;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                readBuffer = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (replaceReadBackBuffer)</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                m_readBackBuffer.setPixels( m_readBackBufferPtr, m_renderWidth,</div>\n\
<div class=\"line\">                    m_renderHeight );</div>\n\
<div class=\"line\">                <span class=\"keyword\">delete</span>[] m_readBackBufferPtr;                   </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            m_readBackBufferPtr = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    m_pD3DDeviceCtx-&gt;Unmap( m_pTextureReadBack, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> readBuffer;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";